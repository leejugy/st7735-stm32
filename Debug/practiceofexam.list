
practiceofexam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  08009bf4  08009bf4  0000abf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1d0  0800a1d0  0000c994  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1d0  0800a1d0  0000b1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1d8  0800a1d8  0000c994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1d8  0800a1d8  0000b1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1dc  0800a1dc  0000b1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000994  20000000  0800a1e0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a68  20000994  0800ab74  0000c994  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013fc  0800ab74  0000d3fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c994  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b69  00000000  00000000  0000c9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000348b  00000000  00000000  0002052d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  000239b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf3  00000000  00000000  00024ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195ab  00000000  00000000  000257b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018abf  00000000  00000000  0003ed5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2ed  00000000  00000000  0005781d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6b0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004950  00000000  00000000  000e6b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000eb4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000994 	.word	0x20000994
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009bdc 	.word	0x08009bdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000998 	.word	0x20000998
 80001dc:	08009bdc 	.word	0x08009bdc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <MX_DMA_Init+0x5c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a13      	ldr	r2, [pc, #76]	@ (80005dc <MX_DMA_Init+0x5c>)
 8000590:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <MX_DMA_Init+0x5c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	203a      	movs	r0, #58	@ 0x3a
 80005a8:	f001 fb49 	bl	8001c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005ac:	203a      	movs	r0, #58	@ 0x3a
 80005ae:	f001 fb62 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	203b      	movs	r0, #59	@ 0x3b
 80005b8:	f001 fb41 	bl	8001c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005bc:	203b      	movs	r0, #59	@ 0x3b
 80005be:	f001 fb5a 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2045      	movs	r0, #69	@ 0x45
 80005c8:	f001 fb39 	bl	8001c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005cc:	2045      	movs	r0, #69	@ 0x45
 80005ce:	f001 fb52 	bl	8001c76 <HAL_NVIC_EnableIRQ>

}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b3d      	ldr	r3, [pc, #244]	@ (80006f0 <MX_GPIO_Init+0x110>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a3c      	ldr	r2, [pc, #240]	@ (80006f0 <MX_GPIO_Init+0x110>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b3a      	ldr	r3, [pc, #232]	@ (80006f0 <MX_GPIO_Init+0x110>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b36      	ldr	r3, [pc, #216]	@ (80006f0 <MX_GPIO_Init+0x110>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a35      	ldr	r2, [pc, #212]	@ (80006f0 <MX_GPIO_Init+0x110>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b33      	ldr	r3, [pc, #204]	@ (80006f0 <MX_GPIO_Init+0x110>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <MX_GPIO_Init+0x110>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a2e      	ldr	r2, [pc, #184]	@ (80006f0 <MX_GPIO_Init+0x110>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b2c      	ldr	r3, [pc, #176]	@ (80006f0 <MX_GPIO_Init+0x110>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_C_GPIO_Port, D_C_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2102      	movs	r1, #2
 800064e:	4829      	ldr	r0, [pc, #164]	@ (80006f4 <MX_GPIO_Init+0x114>)
 8000650:	f002 f866 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ChipSelect_Pin|RESET_LCD_Pin|BackLight_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	211c      	movs	r1, #28
 8000658:	4826      	ldr	r0, [pc, #152]	@ (80006f4 <MX_GPIO_Init+0x114>)
 800065a:	f002 f861 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800065e:	2301      	movs	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000662:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4619      	mov	r1, r3
 8000672:	4820      	ldr	r0, [pc, #128]	@ (80006f4 <MX_GPIO_Init+0x114>)
 8000674:	f001 feb8 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D_C_Pin|ChipSelect_Pin|RESET_LCD_Pin|BackLight_Pin;
 8000678:	231e      	movs	r3, #30
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	4819      	ldr	r0, [pc, #100]	@ (80006f4 <MX_GPIO_Init+0x114>)
 8000690:	f001 feaa 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <MX_GPIO_Init+0x114>)
 80006a8:	f001 fe9e 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_GPIO_Init+0x118>)
 80006c4:	f001 fe90 	bl	80023e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	2006      	movs	r0, #6
 80006ce:	f001 fab6 	bl	8001c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006d2:	2006      	movs	r0, #6
 80006d4:	f001 facf 	bl	8001c76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2028      	movs	r0, #40	@ 0x28
 80006de:	f001 faae 	bl	8001c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006e2:	2028      	movs	r0, #40	@ 0x28
 80006e4:	f001 fac7 	bl	8001c76 <HAL_NVIC_EnableIRQ>

}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020400 	.word	0x40020400

080006fc <HAL_GPIO_EXTI_Callback>:
void SEL_COLOR(color col, uint8_t *color_data);
void ST7735_LCD_FILLBlock(color col,uint8_t startx, uint8_t endx, uint8_t starty, uint8_t endy);


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12 && HAL_GetTick()-pretime > 200){
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800070c:	d11d      	bne.n	800074a <HAL_GPIO_EXTI_Callback+0x4e>
 800070e:	f001 f98b 	bl	8001a28 <HAL_GetTick>
 8000712:	4602      	mov	r2, r0
 8000714:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	2bc8      	cmp	r3, #200	@ 0xc8
 800071c:	d915      	bls.n	800074a <HAL_GPIO_EXTI_Callback+0x4e>
		count=(count+1)%8;
 800071e:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <HAL_GPIO_EXTI_Callback+0xa0>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	425a      	negs	r2, r3
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	f002 0207 	and.w	r2, r2, #7
 800072e:	bf58      	it	pl
 8000730:	4253      	negpl	r3, r2
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b19      	ldr	r3, [pc, #100]	@ (800079c <HAL_GPIO_EXTI_Callback+0xa0>)
 8000736:	701a      	strb	r2, [r3, #0]
		pretime = HAL_GetTick();
 8000738:	f001 f976 	bl	8001a28 <HAL_GetTick>
 800073c:	4603      	mov	r3, r0
 800073e:	4a16      	ldr	r2, [pc, #88]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000740:	6013      	str	r3, [r2, #0]
		EXTI12_flag = true;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
		pretime2 = HAL_GetTick();
		LightOn = !LightOn;
	}
  UNUSED(GPIO_Pin);

}
 8000748:	e021      	b.n	800078e <HAL_GPIO_EXTI_Callback+0x92>
	else if(GPIO_Pin == GPIO_PIN_0 && HAL_GetTick()-pretime2 > 200){
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d11e      	bne.n	800078e <HAL_GPIO_EXTI_Callback+0x92>
 8000750:	f001 f96a 	bl	8001a28 <HAL_GetTick>
 8000754:	4602      	mov	r2, r0
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	2bc8      	cmp	r3, #200	@ 0xc8
 800075e:	d916      	bls.n	800078e <HAL_GPIO_EXTI_Callback+0x92>
		EXTI13_flag = true;
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000762:	2201      	movs	r2, #1
 8000764:	701a      	strb	r2, [r3, #0]
		pretime2 = HAL_GetTick();
 8000766:	f001 f95f 	bl	8001a28 <HAL_GetTick>
 800076a:	4603      	mov	r3, r0
 800076c:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800076e:	6013      	str	r3, [r2, #0]
		LightOn = !LightOn;
 8000770:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <HAL_GPIO_EXTI_Callback+0xb0>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	bf14      	ite	ne
 8000778:	2301      	movne	r3, #1
 800077a:	2300      	moveq	r3, #0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	f083 0301 	eor.w	r3, r3, #1
 8000782:	b2db      	uxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <HAL_GPIO_EXTI_Callback+0xb0>)
 800078c:	701a      	strb	r2, [r3, #0]
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200009b4 	.word	0x200009b4
 800079c:	200009b1 	.word	0x200009b1
 80007a0:	200009bc 	.word	0x200009bc
 80007a4:	200009b8 	.word	0x200009b8
 80007a8:	200009bd 	.word	0x200009bd
 80007ac:	200009be 	.word	0x200009be

080007b0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a05      	ldr	r2, [pc, #20]	@ (80007d4 <HAL_UART_RxCpltCallback+0x24>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d104      	bne.n	80007cc <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Receive_DMA(&huart1, &uart_rx_data, 1);
 80007c2:	2201      	movs	r2, #1
 80007c4:	4904      	ldr	r1, [pc, #16]	@ (80007d8 <HAL_UART_RxCpltCallback+0x28>)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <HAL_UART_RxCpltCallback+0x2c>)
 80007c8:	f004 f8f5 	bl	80049b6 <HAL_UART_Receive_DMA>
	}
  UNUSED(huart);
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40011000 	.word	0x40011000
 80007d8:	200009b0 	.word	0x200009b0
 80007dc:	20000b60 	.word	0x20000b60

080007e0 <uart_send>:

void uart_send(uint8_t uart_num,char *fmt,...){
 80007e0:	b40e      	push	{r1, r2, r3}
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b08f      	sub	sp, #60	@ 0x3c
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	va_list arg;
	uint8_t uart_send_data[40];
	memset(uart_send_data,0,40);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2228      	movs	r2, #40	@ 0x28
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f008 fd71 	bl	80092dc <memset>

	va_start(arg,fmt);
 80007fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007fe:	637b      	str	r3, [r7, #52]	@ 0x34
	vsnprintf((char *)uart_send_data,32,fmt,arg);
 8000800:	f107 000c 	add.w	r0, r7, #12
 8000804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000808:	2120      	movs	r1, #32
 800080a:	f008 fd59 	bl	80092c0 <vsniprintf>

	if(uart_num==1){
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d107      	bne.n	8000824 <uart_send+0x44>
		HAL_UART_Transmit(&huart1, uart_send_data, 32, HAL_MAX_DELAY);
 8000814:	f107 010c 	add.w	r1, r7, #12
 8000818:	f04f 33ff 	mov.w	r3, #4294967295
 800081c:	2220      	movs	r2, #32
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <uart_send+0x54>)
 8000820:	f004 f83e 	bl	80048a0 <HAL_UART_Transmit>
	}

	va_end(arg);
}
 8000824:	bf00      	nop
 8000826:	373c      	adds	r7, #60	@ 0x3c
 8000828:	46bd      	mov	sp, r7
 800082a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800082e:	b003      	add	sp, #12
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000b60 	.word	0x20000b60

08000838 <SD_WRITE>:

void SD_WRITE(SD_MODE sd,char file_route[],char *fmt,...){
 8000838:	b40c      	push	{r2, r3}
 800083a:	b580      	push	{r7, lr}
 800083c:	b08e      	sub	sp, #56	@ 0x38
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	6039      	str	r1, [r7, #0]
 8000844:	71fb      	strb	r3, [r7, #7]
	va_list arg;
	uint8_t buffer[32];

	memset(buffer,0,32);
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	2220      	movs	r2, #32
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f008 fd44 	bl	80092dc <memset>

	va_start(arg,fmt);
 8000854:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000858:	633b      	str	r3, [r7, #48]	@ 0x30
	vsnprintf((char *)buffer,32,fmt,arg);
 800085a:	f107 0010 	add.w	r0, r7, #16
 800085e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000860:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000862:	2120      	movs	r1, #32
 8000864:	f008 fd2c 	bl	80092c0 <vsniprintf>
	va_end(arg);

	uint8_t mode;
	if(sd == SD_NEW){
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d103      	bne.n	8000876 <SD_WRITE+0x3e>
		mode = FA_CREATE_NEW|FA_WRITE;
 800086e:	2306      	movs	r3, #6
 8000870:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000874:	e00c      	b.n	8000890 <SD_WRITE+0x58>
	}
	else if(sd == SD_EXIST){
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d103      	bne.n	8000884 <SD_WRITE+0x4c>
		mode = FA_OPEN_EXISTING|FA_WRITE;
 800087c:	2302      	movs	r3, #2
 800087e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000882:	e005      	b.n	8000890 <SD_WRITE+0x58>
	}
	else if(sd == SD_APPEND){
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b02      	cmp	r3, #2
 8000888:	d102      	bne.n	8000890 <SD_WRITE+0x58>
		mode = FA_OPEN_APPEND|FA_WRITE;
 800088a:	2332      	movs	r3, #50	@ 0x32
 800088c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	}

	retSD = f_open(&SDFile, file_route, mode);
 8000890:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000894:	461a      	mov	r2, r3
 8000896:	6839      	ldr	r1, [r7, #0]
 8000898:	4820      	ldr	r0, [pc, #128]	@ (800091c <SD_WRITE+0xe4>)
 800089a:	f007 fead 	bl	80085f8 <f_open>
 800089e:	4603      	mov	r3, r0
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <SD_WRITE+0xe8>)
 80008a4:	701a      	strb	r2, [r3, #0]

	if(retSD==FR_OK){
 80008a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <SD_WRITE+0xe8>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d114      	bne.n	80008d8 <SD_WRITE+0xa0>
		uart_send(1,"file open success!\n");
 80008ae:	491d      	ldr	r1, [pc, #116]	@ (8000924 <SD_WRITE+0xec>)
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff ff95 	bl	80007e0 <uart_send>
	 return;
	}


	UINT bw;
	retSD = f_write(&SDFile, buffer, sizeof(buffer), &bw);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	f107 0110 	add.w	r1, r7, #16
 80008be:	2220      	movs	r2, #32
 80008c0:	4816      	ldr	r0, [pc, #88]	@ (800091c <SD_WRITE+0xe4>)
 80008c2:	f008 f992 	bl	8008bea <f_write>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <SD_WRITE+0xe8>)
 80008cc:	701a      	strb	r2, [r3, #0]
	if(retSD==FR_OK){
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <SD_WRITE+0xe8>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d112      	bne.n	80008fc <SD_WRITE+0xc4>
 80008d6:	e007      	b.n	80008e8 <SD_WRITE+0xb0>
	 uart_send(1,"file error with error code : %d\n",retSD);
 80008d8:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <SD_WRITE+0xe8>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4912      	ldr	r1, [pc, #72]	@ (8000928 <SD_WRITE+0xf0>)
 80008e0:	2001      	movs	r0, #1
 80008e2:	f7ff ff7d 	bl	80007e0 <uart_send>
 80008e6:	e013      	b.n	8000910 <SD_WRITE+0xd8>
		f_close(&SDFile);
 80008e8:	480c      	ldr	r0, [pc, #48]	@ (800091c <SD_WRITE+0xe4>)
 80008ea:	f008 fb71 	bl	8008fd0 <f_close>
	  uart_send(1,"file write success with bw:%d\n",bw);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	461a      	mov	r2, r3
 80008f2:	490e      	ldr	r1, [pc, #56]	@ (800092c <SD_WRITE+0xf4>)
 80008f4:	2001      	movs	r0, #1
 80008f6:	f7ff ff73 	bl	80007e0 <uart_send>
 80008fa:	e009      	b.n	8000910 <SD_WRITE+0xd8>
	}
	else{
		f_close(&SDFile);
 80008fc:	4807      	ldr	r0, [pc, #28]	@ (800091c <SD_WRITE+0xe4>)
 80008fe:	f008 fb67 	bl	8008fd0 <f_close>
		uart_send(1,"file error with %d\n",retSD);
 8000902:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <SD_WRITE+0xe8>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	4909      	ldr	r1, [pc, #36]	@ (8000930 <SD_WRITE+0xf8>)
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff ff68 	bl	80007e0 <uart_send>
	}
}
 8000910:	3738      	adds	r7, #56	@ 0x38
 8000912:	46bd      	mov	sp, r7
 8000914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000918:	b002      	add	sp, #8
 800091a:	4770      	bx	lr
 800091c:	20000e48 	.word	0x20000e48
 8000920:	20000c0c 	.word	0x20000c0c
 8000924:	08009bf4 	.word	0x08009bf4
 8000928:	08009c08 	.word	0x08009c08
 800092c:	08009c2c 	.word	0x08009c2c
 8000930:	08009c4c 	.word	0x08009c4c

08000934 <SD_READ>:

void SD_READ(char file_route[],uint8_t *buf, uint8_t read_byte){
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	4613      	mov	r3, r2
 8000940:	71fb      	strb	r3, [r7, #7]
	retSD = f_open(&SDFile, file_route, FA_OPEN_EXISTING|FA_READ);
 8000942:	2201      	movs	r2, #1
 8000944:	68f9      	ldr	r1, [r7, #12]
 8000946:	481f      	ldr	r0, [pc, #124]	@ (80009c4 <SD_READ+0x90>)
 8000948:	f007 fe56 	bl	80085f8 <f_open>
 800094c:	4603      	mov	r3, r0
 800094e:	461a      	mov	r2, r3
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <SD_READ+0x94>)
 8000952:	701a      	strb	r2, [r3, #0]

	if(retSD==FR_OK){
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <SD_READ+0x94>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d113      	bne.n	8000984 <SD_READ+0x50>
		uart_send(1,"file open success!\n");
 800095c:	491b      	ldr	r1, [pc, #108]	@ (80009cc <SD_READ+0x98>)
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff ff3e 	bl	80007e0 <uart_send>
	 uart_send(1,"file error with error code : %d\n",retSD);
	 return;
	}

	UINT br;
	retSD = f_read(&SDFile, buf, read_byte, &br);
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	68b9      	ldr	r1, [r7, #8]
 800096c:	4815      	ldr	r0, [pc, #84]	@ (80009c4 <SD_READ+0x90>)
 800096e:	f007 fffd 	bl	800896c <f_read>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <SD_READ+0x94>)
 8000978:	701a      	strb	r2, [r3, #0]

	if(retSD==FR_OK){
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <SD_READ+0x94>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d112      	bne.n	80009a8 <SD_READ+0x74>
 8000982:	e007      	b.n	8000994 <SD_READ+0x60>
	 uart_send(1,"file error with error code : %d\n",retSD);
 8000984:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <SD_READ+0x94>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4911      	ldr	r1, [pc, #68]	@ (80009d0 <SD_READ+0x9c>)
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff ff27 	bl	80007e0 <uart_send>
 8000992:	e013      	b.n	80009bc <SD_READ+0x88>
		f_close(&SDFile);
 8000994:	480b      	ldr	r0, [pc, #44]	@ (80009c4 <SD_READ+0x90>)
 8000996:	f008 fb1b 	bl	8008fd0 <f_close>
	  uart_send(1,"file read success with bw:%d\n",br);
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	461a      	mov	r2, r3
 800099e:	490d      	ldr	r1, [pc, #52]	@ (80009d4 <SD_READ+0xa0>)
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff ff1d 	bl	80007e0 <uart_send>
 80009a6:	e009      	b.n	80009bc <SD_READ+0x88>
	}
	else{
		f_close(&SDFile);
 80009a8:	4806      	ldr	r0, [pc, #24]	@ (80009c4 <SD_READ+0x90>)
 80009aa:	f008 fb11 	bl	8008fd0 <f_close>
		uart_send(1,"file error with %d\n",retSD);
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <SD_READ+0x94>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	4908      	ldr	r1, [pc, #32]	@ (80009d8 <SD_READ+0xa4>)
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff ff12 	bl	80007e0 <uart_send>
	}

}
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000e48 	.word	0x20000e48
 80009c8:	20000c0c 	.word	0x20000c0c
 80009cc:	08009bf4 	.word	0x08009bf4
 80009d0:	08009c08 	.word	0x08009c08
 80009d4:	08009c60 	.word	0x08009c60
 80009d8:	08009c4c 	.word	0x08009c4c

080009dc <sd_init_user>:

void sd_init_user(){
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  retSD = f_mount(&SDFatFS, SDPath, 1);
 80009e0:	2201      	movs	r2, #1
 80009e2:	490d      	ldr	r1, [pc, #52]	@ (8000a18 <sd_init_user+0x3c>)
 80009e4:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <sd_init_user+0x40>)
 80009e6:	f007 fdc1 	bl	800856c <f_mount>
 80009ea:	4603      	mov	r3, r0
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <sd_init_user+0x44>)
 80009f0:	701a      	strb	r2, [r3, #0]
  if(retSD==FR_OK){
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <sd_init_user+0x44>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d104      	bne.n	8000a04 <sd_init_user+0x28>
  	uart_send(1,"file mount success!\n");
 80009fa:	490a      	ldr	r1, [pc, #40]	@ (8000a24 <sd_init_user+0x48>)
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff feef 	bl	80007e0 <uart_send>
 8000a02:	e007      	b.n	8000a14 <sd_init_user+0x38>
  }
  else {
    uart_send(1,"file error with error code : %d\n",retSD);
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <sd_init_user+0x44>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4907      	ldr	r1, [pc, #28]	@ (8000a28 <sd_init_user+0x4c>)
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff fee7 	bl	80007e0 <uart_send>
    return;
 8000a12:	bf00      	nop
  }
}
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000c10 	.word	0x20000c10
 8000a1c:	20000c14 	.word	0x20000c14
 8000a20:	20000c0c 	.word	0x20000c0c
 8000a24:	08009c80 	.word	0x08009c80
 8000a28:	08009c08 	.word	0x08009c08

08000a2c <ST7735_LCD_Init>:

void ST7735_LCD_Init(){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2108      	movs	r1, #8
 8000a36:	481b      	ldr	r0, [pc, #108]	@ (8000aa4 <ST7735_LCD_Init+0x78>)
 8000a38:	f001 fe72 	bl	8002720 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000a3c:	200a      	movs	r0, #10
 8000a3e:	f000 ffff 	bl	8001a40 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2108      	movs	r1, #8
 8000a46:	4817      	ldr	r0, [pc, #92]	@ (8000aa4 <ST7735_LCD_Init+0x78>)
 8000a48:	f001 fe6a 	bl	8002720 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f000 fff7 	bl	8001a40 <HAL_Delay>

  ST7735_CMD(SleepOut,0);
 8000a52:	2100      	movs	r1, #0
 8000a54:	2011      	movs	r0, #17
 8000a56:	f000 f88d 	bl	8000b74 <ST7735_CMD>
  ST7735_CMD(DisplayOn,0);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2029      	movs	r0, #41	@ 0x29
 8000a5e:	f000 f889 	bl	8000b74 <ST7735_CMD>
  HAL_Delay(120);
 8000a62:	2078      	movs	r0, #120	@ 0x78
 8000a64:	f000 ffec 	bl	8001a40 <HAL_Delay>

  uint8_t command = 0xC8;
 8000a68:	23c8      	movs	r3, #200	@ 0xc8
 8000a6a:	71fb      	strb	r3, [r7, #7]
  ST7735_Send_Packet(MADCTL, &command, 1);
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4619      	mov	r1, r3
 8000a72:	2036      	movs	r0, #54	@ 0x36
 8000a74:	f000 f84e 	bl	8000b14 <ST7735_Send_Packet>

  command = 0x06;
 8000a78:	2306      	movs	r3, #6
 8000a7a:	71fb      	strb	r3, [r7, #7]
  ST7735_Send_Packet(COLMOD, &command, 1);
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4619      	mov	r1, r3
 8000a82:	203a      	movs	r0, #58	@ 0x3a
 8000a84:	f000 f846 	bl	8000b14 <ST7735_Send_Packet>

  ST7735_LCD_ADD_SET(0, 127, 0, 127);
 8000a88:	237f      	movs	r3, #127	@ 0x7f
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	217f      	movs	r1, #127	@ 0x7f
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f80a 	bl	8000aa8 <ST7735_LCD_ADD_SET>
  ST7735_LCD_FillFullScreen(BLACK);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f8a7 	bl	8000be8 <ST7735_LCD_FillFullScreen>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <ST7735_LCD_ADD_SET>:

void ST7735_LCD_ADD_SET(uint8_t startx,uint8_t endx, uint8_t starty,uint8_t endy){
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4604      	mov	r4, r0
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4623      	mov	r3, r4
 8000ab8:	71fb      	strb	r3, [r7, #7]
 8000aba:	4603      	mov	r3, r0
 8000abc:	71bb      	strb	r3, [r7, #6]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	717b      	strb	r3, [r7, #5]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	713b      	strb	r3, [r7, #4]
	uint8_t send[4]={0,startx + 2,0,endx + 2};
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	733b      	strb	r3, [r7, #12]
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	3302      	adds	r3, #2
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	737b      	strb	r3, [r7, #13]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73bb      	strb	r3, [r7, #14]
 8000ad6:	79bb      	ldrb	r3, [r7, #6]
 8000ad8:	3302      	adds	r3, #2
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	73fb      	strb	r3, [r7, #15]

	ST7735_Send_Packet(CASET, send, 4);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	202a      	movs	r0, #42	@ 0x2a
 8000ae8:	f000 f814 	bl	8000b14 <ST7735_Send_Packet>

	send[1] = starty+3;
 8000aec:	797b      	ldrb	r3, [r7, #5]
 8000aee:	3303      	adds	r3, #3
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	737b      	strb	r3, [r7, #13]
	send[3] = endy+3;
 8000af4:	793b      	ldrb	r3, [r7, #4]
 8000af6:	3303      	adds	r3, #3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	73fb      	strb	r3, [r7, #15]

	ST7735_Send_Packet(0x2B, send, 4);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2204      	movs	r2, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	202b      	movs	r0, #43	@ 0x2b
 8000b06:	f000 f805 	bl	8000b14 <ST7735_Send_Packet>
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd90      	pop	{r4, r7, pc}
	...

08000b14 <ST7735_Send_Packet>:

void ST7735_Send_Packet(uint8_t command,uint8_t *buf, size_t size){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
 8000b20:	73fb      	strb	r3, [r7, #15]
	ST7735_CMD(command,1);
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	2101      	movs	r1, #1
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f824 	bl	8000b74 <ST7735_CMD>

	DataSend;
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2102      	movs	r1, #2
 8000b30:	480d      	ldr	r0, [pc, #52]	@ (8000b68 <ST7735_Send_Packet+0x54>)
 8000b32:	f001 fdf5 	bl	8002720 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &buf[0], size, HAL_MAX_DELAY)!=HAL_OK){
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	68b9      	ldr	r1, [r7, #8]
 8000b40:	480a      	ldr	r0, [pc, #40]	@ (8000b6c <ST7735_Send_Packet+0x58>)
 8000b42:	f003 fc30 	bl	80043a6 <HAL_SPI_Transmit>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d003      	beq.n	8000b54 <ST7735_Send_Packet+0x40>
		uart_send(1, "SPI Fail.\n");
 8000b4c:	4908      	ldr	r1, [pc, #32]	@ (8000b70 <ST7735_Send_Packet+0x5c>)
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f7ff fe46 	bl	80007e0 <uart_send>
	}

	ChipSelectHigh;
 8000b54:	2201      	movs	r2, #1
 8000b56:	2104      	movs	r1, #4
 8000b58:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <ST7735_Send_Packet+0x54>)
 8000b5a:	f001 fde1 	bl	8002720 <HAL_GPIO_WritePin>
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	20000b04 	.word	0x20000b04
 8000b70:	08009c98 	.word	0x08009c98

08000b74 <ST7735_CMD>:

void ST7735_CMD(uint8_t command,uint8_t CS){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	4613      	mov	r3, r2
 8000b82:	71bb      	strb	r3, [r7, #6]
	CommandSend;
 8000b84:	2200      	movs	r2, #0
 8000b86:	2102      	movs	r1, #2
 8000b88:	4814      	ldr	r0, [pc, #80]	@ (8000bdc <ST7735_CMD+0x68>)
 8000b8a:	f001 fdc9 	bl	8002720 <HAL_GPIO_WritePin>
	ChipSelectLow;
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2104      	movs	r1, #4
 8000b92:	4812      	ldr	r0, [pc, #72]	@ (8000bdc <ST7735_CMD+0x68>)
 8000b94:	f001 fdc4 	bl	8002720 <HAL_GPIO_WritePin>

	while(HAL_SPI_GetState(&hspi1)!=HAL_SPI_STATE_READY);
 8000b98:	bf00      	nop
 8000b9a:	4811      	ldr	r0, [pc, #68]	@ (8000be0 <ST7735_CMD+0x6c>)
 8000b9c:	f003 fd46 	bl	800462c <HAL_SPI_GetState>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d1f9      	bne.n	8000b9a <ST7735_CMD+0x26>

	if(HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000ba6:	1df9      	adds	r1, r7, #7
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bac:	2201      	movs	r2, #1
 8000bae:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <ST7735_CMD+0x6c>)
 8000bb0:	f003 fbf9 	bl	80043a6 <HAL_SPI_Transmit>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <ST7735_CMD+0x4e>
		uart_send(1, "SPI Fail.\n");
 8000bba:	490a      	ldr	r1, [pc, #40]	@ (8000be4 <ST7735_CMD+0x70>)
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f7ff fe0f 	bl	80007e0 <uart_send>
	}

	if(CS == 0){
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d104      	bne.n	8000bd2 <ST7735_CMD+0x5e>
		ChipSelectHigh;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2104      	movs	r1, #4
 8000bcc:	4803      	ldr	r0, [pc, #12]	@ (8000bdc <ST7735_CMD+0x68>)
 8000bce:	f001 fda7 	bl	8002720 <HAL_GPIO_WritePin>
	}
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	20000b04 	.word	0x20000b04
 8000be4:	08009c98 	.word	0x08009c98

08000be8 <ST7735_LCD_FillFullScreen>:

void ST7735_LCD_FillFullScreen(color col) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	ST7735_LCD_FILLBlock(col,0,127,0,127);
 8000bf2:	79f8      	ldrb	r0, [r7, #7]
 8000bf4:	237f      	movs	r3, #127	@ 0x7f
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	227f      	movs	r2, #127	@ 0x7f
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	f000 f805 	bl	8000c0c <ST7735_LCD_FILLBlock>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <ST7735_LCD_FILLBlock>:

void ST7735_LCD_FILLBlock(color col,uint8_t startx, uint8_t endx, uint8_t starty, uint8_t endy) {
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	4608      	mov	r0, r1
 8000c16:	4611      	mov	r1, r2
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4623      	mov	r3, r4
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71bb      	strb	r3, [r7, #6]
 8000c22:	460b      	mov	r3, r1
 8000c24:	717b      	strb	r3, [r7, #5]
 8000c26:	4613      	mov	r3, r2
 8000c28:	713b      	strb	r3, [r7, #4]
    uint8_t color_data[3];
    SEL_COLOR(col,color_data);
 8000c2a:	f107 0208 	add.w	r2, r7, #8
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f844 	bl	8000cc0 <SEL_COLOR>

    ST7735_LCD_ADD_SET(startx,endx,starty,endy);
 8000c38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c3c:	793a      	ldrb	r2, [r7, #4]
 8000c3e:	7979      	ldrb	r1, [r7, #5]
 8000c40:	79b8      	ldrb	r0, [r7, #6]
 8000c42:	f7ff ff31 	bl	8000aa8 <ST7735_LCD_ADD_SET>
    ST7735_CMD(WriteData, 1);
 8000c46:	2101      	movs	r1, #1
 8000c48:	202c      	movs	r0, #44	@ 0x2c
 8000c4a:	f7ff ff93 	bl	8000b74 <ST7735_CMD>

    DataSend;
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2102      	movs	r1, #2
 8000c52:	4818      	ldr	r0, [pc, #96]	@ (8000cb4 <ST7735_LCD_FILLBlock+0xa8>)
 8000c54:	f001 fd64 	bl	8002720 <HAL_GPIO_WritePin>
    for (uint32_t i = 0; i < (endx - startx + 1) * (endy - starty + 1); i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	e012      	b.n	8000c84 <ST7735_LCD_FILLBlock+0x78>
      if (HAL_SPI_Transmit(&hspi1, color_data, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000c5e:	f107 0108 	add.w	r1, r7, #8
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	2203      	movs	r2, #3
 8000c68:	4813      	ldr	r0, [pc, #76]	@ (8000cb8 <ST7735_LCD_FILLBlock+0xac>)
 8000c6a:	f003 fb9c 	bl	80043a6 <HAL_SPI_Transmit>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d004      	beq.n	8000c7e <ST7735_LCD_FILLBlock+0x72>
        uart_send(1, "SPI Fail.\n");
 8000c74:	4911      	ldr	r1, [pc, #68]	@ (8000cbc <ST7735_LCD_FILLBlock+0xb0>)
 8000c76:	2001      	movs	r0, #1
 8000c78:	f7ff fdb2 	bl	80007e0 <uart_send>
        break;
 8000c7c:	e011      	b.n	8000ca2 <ST7735_LCD_FILLBlock+0x96>
    for (uint32_t i = 0; i < (endx - startx + 1) * (endy - starty + 1); i++) {
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	797a      	ldrb	r2, [r7, #5]
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8000c90:	793a      	ldrb	r2, [r7, #4]
 8000c92:	1a8a      	subs	r2, r1, r2
 8000c94:	3201      	adds	r2, #1
 8000c96:	fb02 f303 	mul.w	r3, r2, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d3dd      	bcc.n	8000c5e <ST7735_LCD_FILLBlock+0x52>
      }
    }
    ChipSelectHigh;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	4803      	ldr	r0, [pc, #12]	@ (8000cb4 <ST7735_LCD_FILLBlock+0xa8>)
 8000ca8:	f001 fd3a 	bl	8002720 <HAL_GPIO_WritePin>
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	20000b04 	.word	0x20000b04
 8000cbc:	08009c98 	.word	0x08009c98

08000cc0 <SEL_COLOR>:

void SEL_COLOR(color col, uint8_t *color_data){
 8000cc0:	b490      	push	{r4, r7}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 3 ; i++){
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e00f      	b.n	8000cf2 <SEL_COLOR+0x32>
		color_data[i] = COLOR[col][i];
 8000cd2:	79fa      	ldrb	r2, [r7, #7]
 8000cd4:	7bf8      	ldrb	r0, [r7, #15]
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	6839      	ldr	r1, [r7, #0]
 8000cda:	4419      	add	r1, r3
 8000cdc:	4c09      	ldr	r4, [pc, #36]	@ (8000d04 <SEL_COLOR+0x44>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4423      	add	r3, r4
 8000ce6:	4403      	add	r3, r0
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	700b      	strb	r3, [r1, #0]
	for(uint8_t i = 0; i < 3 ; i++){
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d9ec      	bls.n	8000cd2 <SEL_COLOR+0x12>
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc90      	pop	{r4, r7}
 8000d02:	4770      	bx	lr
 8000d04:	20000924 	.word	0x20000924

08000d08 <ST7735_LCD_FILLBlock_Char>:



void ST7735_LCD_FILLBlock_Char(color col_back,color col_buf, uint8_t buf[font_len_y][font_len_x], uint8_t startx,uint8_t starty){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	603a      	str	r2, [r7, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	460b      	mov	r3, r1
 8000d18:	71bb      	strb	r3, [r7, #6]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	717b      	strb	r3, [r7, #5]
	uint8_t back_color[3], buf_color[3];
	SEL_COLOR(col_back,back_color);
 8000d1e:	f107 0210 	add.w	r2, r7, #16
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ffca 	bl	8000cc0 <SEL_COLOR>
	SEL_COLOR(col_buf,buf_color);
 8000d2c:	f107 020c 	add.w	r2, r7, #12
 8000d30:	79bb      	ldrb	r3, [r7, #6]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ffc3 	bl	8000cc0 <SEL_COLOR>

	ST7735_LCD_ADD_SET(startx, startx+font_len_x - 1, starty, starty+font_len_y - 1);
 8000d3a:	797b      	ldrb	r3, [r7, #5]
 8000d3c:	330c      	adds	r3, #12
 8000d3e:	b2d9      	uxtb	r1, r3
 8000d40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d44:	3313      	adds	r3, #19
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d4c:	7978      	ldrb	r0, [r7, #5]
 8000d4e:	f7ff feab 	bl	8000aa8 <ST7735_LCD_ADD_SET>

	ST7735_CMD(WriteData, 1);
 8000d52:	2101      	movs	r1, #1
 8000d54:	202c      	movs	r0, #44	@ 0x2c
 8000d56:	f7ff ff0d 	bl	8000b74 <ST7735_CMD>

	DataSend;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	481d      	ldr	r0, [pc, #116]	@ (8000dd4 <ST7735_LCD_FILLBlock_Char+0xcc>)
 8000d60:	f001 fcde 	bl	8002720 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<font_len_y; i++){
 8000d64:	2300      	movs	r3, #0
 8000d66:	75fb      	strb	r3, [r7, #23]
 8000d68:	e028      	b.n	8000dbc <ST7735_LCD_FILLBlock_Char+0xb4>
		for(uint8_t j=0; j<font_len_x; j++){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	75bb      	strb	r3, [r7, #22]
 8000d6e:	e01f      	b.n	8000db0 <ST7735_LCD_FILLBlock_Char+0xa8>
			if(buf[i][j]){
 8000d70:	7dfa      	ldrb	r2, [r7, #23]
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	441a      	add	r2, r3
 8000d80:	7dbb      	ldrb	r3, [r7, #22]
 8000d82:	5cd3      	ldrb	r3, [r2, r3]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d008      	beq.n	8000d9a <ST7735_LCD_FILLBlock_Char+0x92>
				HAL_SPI_Transmit(&hspi1, buf_color, 3, HAL_MAX_DELAY);
 8000d88:	f107 010c 	add.w	r1, r7, #12
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d90:	2203      	movs	r2, #3
 8000d92:	4811      	ldr	r0, [pc, #68]	@ (8000dd8 <ST7735_LCD_FILLBlock_Char+0xd0>)
 8000d94:	f003 fb07 	bl	80043a6 <HAL_SPI_Transmit>
 8000d98:	e007      	b.n	8000daa <ST7735_LCD_FILLBlock_Char+0xa2>
			}
			else{
				HAL_SPI_Transmit(&hspi1, back_color, 3, HAL_MAX_DELAY);
 8000d9a:	f107 0110 	add.w	r1, r7, #16
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	2203      	movs	r2, #3
 8000da4:	480c      	ldr	r0, [pc, #48]	@ (8000dd8 <ST7735_LCD_FILLBlock_Char+0xd0>)
 8000da6:	f003 fafe 	bl	80043a6 <HAL_SPI_Transmit>
		for(uint8_t j=0; j<font_len_x; j++){
 8000daa:	7dbb      	ldrb	r3, [r7, #22]
 8000dac:	3301      	adds	r3, #1
 8000dae:	75bb      	strb	r3, [r7, #22]
 8000db0:	7dbb      	ldrb	r3, [r7, #22]
 8000db2:	2b0c      	cmp	r3, #12
 8000db4:	d9dc      	bls.n	8000d70 <ST7735_LCD_FILLBlock_Char+0x68>
	for(uint8_t i=0; i<font_len_y; i++){
 8000db6:	7dfb      	ldrb	r3, [r7, #23]
 8000db8:	3301      	adds	r3, #1
 8000dba:	75fb      	strb	r3, [r7, #23]
 8000dbc:	7dfb      	ldrb	r3, [r7, #23]
 8000dbe:	2b13      	cmp	r3, #19
 8000dc0:	d9d3      	bls.n	8000d6a <ST7735_LCD_FILLBlock_Char+0x62>
			}
		}
	}
	ChipSelectHigh;
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	4803      	ldr	r0, [pc, #12]	@ (8000dd4 <ST7735_LCD_FILLBlock_Char+0xcc>)
 8000dc8:	f001 fcaa 	bl	8002720 <HAL_GPIO_WritePin>

}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	20000b04 	.word	0x20000b04

08000ddc <ST7735_LCD_Write_String>:

void ST7735_LCD_Write_String(char *fmt, uint8_t *startx, uint8_t *starty, color font_color, color back_color){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	70fb      	strb	r3, [r7, #3]
	uint8_t string_len = strlen(fmt);
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f7ff f9f8 	bl	80001e0 <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	75bb      	strb	r3, [r7, #22]
	for(uint8_t i=0;i<string_len;i++){
 8000df4:	2300      	movs	r3, #0
 8000df6:	75fb      	strb	r3, [r7, #23]
 8000df8:	e0e4      	b.n	8000fc4 <ST7735_LCD_Write_String+0x1e8>
		switch (fmt[i]){
 8000dfa:	7dfb      	ldrb	r3, [r7, #23]
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	3b41      	subs	r3, #65	@ 0x41
 8000e04:	2b16      	cmp	r3, #22
 8000e06:	f200 80a6 	bhi.w	8000f56 <ST7735_LCD_Write_String+0x17a>
 8000e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e10 <ST7735_LCD_Write_String+0x34>)
 8000e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e10:	08000e6d 	.word	0x08000e6d
 8000e14:	08000e87 	.word	0x08000e87
 8000e18:	08000f57 	.word	0x08000f57
 8000e1c:	08000ea1 	.word	0x08000ea1
 8000e20:	08000ebb 	.word	0x08000ebb
 8000e24:	08000f57 	.word	0x08000f57
 8000e28:	08000f57 	.word	0x08000f57
 8000e2c:	08000ed5 	.word	0x08000ed5
 8000e30:	08000f57 	.word	0x08000f57
 8000e34:	08000f57 	.word	0x08000f57
 8000e38:	08000f57 	.word	0x08000f57
 8000e3c:	08000eef 	.word	0x08000eef
 8000e40:	08000f57 	.word	0x08000f57
 8000e44:	08000f57 	.word	0x08000f57
 8000e48:	08000f09 	.word	0x08000f09
 8000e4c:	08000f57 	.word	0x08000f57
 8000e50:	08000f57 	.word	0x08000f57
 8000e54:	08000f23 	.word	0x08000f23
 8000e58:	08000f57 	.word	0x08000f57
 8000e5c:	08000f57 	.word	0x08000f57
 8000e60:	08000f57 	.word	0x08000f57
 8000e64:	08000f57 	.word	0x08000f57
 8000e68:	08000f3d 	.word	0x08000f3d
		case 'A':
			ST7735_LCD_FILLBlock_Char(back_color, font_color, buffer_A, *startx, *starty);
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	781a      	ldrb	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	78f9      	ldrb	r1, [r7, #3]
 8000e76:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	4a56      	ldr	r2, [pc, #344]	@ (8000fd8 <ST7735_LCD_Write_String+0x1fc>)
 8000e80:	f7ff ff42 	bl	8000d08 <ST7735_LCD_FILLBlock_Char>
			break;
 8000e84:	e067      	b.n	8000f56 <ST7735_LCD_Write_String+0x17a>
		case 'B':
			ST7735_LCD_FILLBlock_Char(back_color, font_color, buffer_B, *startx, *starty);
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	78f9      	ldrb	r1, [r7, #3]
 8000e90:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	4613      	mov	r3, r2
 8000e98:	4a50      	ldr	r2, [pc, #320]	@ (8000fdc <ST7735_LCD_Write_String+0x200>)
 8000e9a:	f7ff ff35 	bl	8000d08 <ST7735_LCD_FILLBlock_Char>
			break;
 8000e9e:	e05a      	b.n	8000f56 <ST7735_LCD_Write_String+0x17a>
		case 'D':
			ST7735_LCD_FILLBlock_Char(back_color, font_color, buffer_D, *startx, *starty);
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	781a      	ldrb	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	78f9      	ldrb	r1, [r7, #3]
 8000eaa:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	4a4b      	ldr	r2, [pc, #300]	@ (8000fe0 <ST7735_LCD_Write_String+0x204>)
 8000eb4:	f7ff ff28 	bl	8000d08 <ST7735_LCD_FILLBlock_Char>
			break;
 8000eb8:	e04d      	b.n	8000f56 <ST7735_LCD_Write_String+0x17a>
		case 'E':
			ST7735_LCD_FILLBlock_Char(back_color, font_color, buffer_E, *startx, *starty);
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	781a      	ldrb	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	78f9      	ldrb	r1, [r7, #3]
 8000ec4:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	4a45      	ldr	r2, [pc, #276]	@ (8000fe4 <ST7735_LCD_Write_String+0x208>)
 8000ece:	f7ff ff1b 	bl	8000d08 <ST7735_LCD_FILLBlock_Char>
			break;
 8000ed2:	e040      	b.n	8000f56 <ST7735_LCD_Write_String+0x17a>
		case 'H':
			ST7735_LCD_FILLBlock_Char(back_color, font_color, buffer_H, *startx, *starty);
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	78f9      	ldrb	r1, [r7, #3]
 8000ede:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	4a40      	ldr	r2, [pc, #256]	@ (8000fe8 <ST7735_LCD_Write_String+0x20c>)
 8000ee8:	f7ff ff0e 	bl	8000d08 <ST7735_LCD_FILLBlock_Char>
			break;
 8000eec:	e033      	b.n	8000f56 <ST7735_LCD_Write_String+0x17a>
		case 'L':
			ST7735_LCD_FILLBlock_Char(back_color, font_color, buffer_L, *startx, *starty);
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	781a      	ldrb	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	78f9      	ldrb	r1, [r7, #3]
 8000ef8:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	4613      	mov	r3, r2
 8000f00:	4a3a      	ldr	r2, [pc, #232]	@ (8000fec <ST7735_LCD_Write_String+0x210>)
 8000f02:	f7ff ff01 	bl	8000d08 <ST7735_LCD_FILLBlock_Char>
			break;
 8000f06:	e026      	b.n	8000f56 <ST7735_LCD_Write_String+0x17a>
		case 'O':
			ST7735_LCD_FILLBlock_Char(back_color, font_color, buffer_O, *startx, *starty);
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	78f9      	ldrb	r1, [r7, #3]
 8000f12:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	4a35      	ldr	r2, [pc, #212]	@ (8000ff0 <ST7735_LCD_Write_String+0x214>)
 8000f1c:	f7ff fef4 	bl	8000d08 <ST7735_LCD_FILLBlock_Char>
			break;
 8000f20:	e019      	b.n	8000f56 <ST7735_LCD_Write_String+0x17a>
		case 'R':
			ST7735_LCD_FILLBlock_Char(back_color, font_color, buffer_R, *startx, *starty);
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	781a      	ldrb	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	78f9      	ldrb	r1, [r7, #3]
 8000f2c:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	4613      	mov	r3, r2
 8000f34:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff4 <ST7735_LCD_Write_String+0x218>)
 8000f36:	f7ff fee7 	bl	8000d08 <ST7735_LCD_FILLBlock_Char>
			break;
 8000f3a:	e00c      	b.n	8000f56 <ST7735_LCD_Write_String+0x17a>
		case 'W':
			ST7735_LCD_FILLBlock_Char(back_color, font_color, buffer_W, *startx, *starty);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	781a      	ldrb	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	78f9      	ldrb	r1, [r7, #3]
 8000f46:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ff8 <ST7735_LCD_Write_String+0x21c>)
 8000f50:	f7ff feda 	bl	8000d08 <ST7735_LCD_FILLBlock_Char>
			break;
 8000f54:	bf00      	nop
		}
		if(fmt[i] == '\n'){
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b0a      	cmp	r3, #10
 8000f60:	d109      	bne.n	8000f76 <ST7735_LCD_Write_String+0x19a>
			*startx = 0;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
			*starty = *starty+font_len_y+1;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	3315      	adds	r3, #21
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e023      	b.n	8000fbe <ST7735_LCD_Write_String+0x1e2>
		}
		else if((fmt[i] >= 'A' && fmt[i] <= 'Z' )||(fmt[i] >= 'a' && fmt[i] <= 'z' )||
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b40      	cmp	r3, #64	@ 0x40
 8000f80:	d905      	bls.n	8000f8e <ST7735_LCD_Write_String+0x1b2>
 8000f82:	7dfb      	ldrb	r3, [r7, #23]
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b5a      	cmp	r3, #90	@ 0x5a
 8000f8c:	d911      	bls.n	8000fb2 <ST7735_LCD_Write_String+0x1d6>
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b60      	cmp	r3, #96	@ 0x60
 8000f98:	d905      	bls.n	8000fa6 <ST7735_LCD_Write_String+0x1ca>
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b7a      	cmp	r3, #122	@ 0x7a
 8000fa4:	d905      	bls.n	8000fb2 <ST7735_LCD_Write_String+0x1d6>
						(fmt[i] == ' ')){
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
		else if((fmt[i] >= 'A' && fmt[i] <= 'Z' )||(fmt[i] >= 'a' && fmt[i] <= 'z' )||
 8000fae:	2b20      	cmp	r3, #32
 8000fb0:	d105      	bne.n	8000fbe <ST7735_LCD_Write_String+0x1e2>
			*startx = *startx+font_len_x+1;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	330e      	adds	r3, #14
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<string_len;i++){
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	75fb      	strb	r3, [r7, #23]
 8000fc4:	7dfa      	ldrb	r2, [r7, #23]
 8000fc6:	7dbb      	ldrb	r3, [r7, #22]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f4ff af16 	bcc.w	8000dfa <ST7735_LCD_Write_String+0x1e>
		}
	}

}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000104 	.word	0x20000104
 8000fe0:	20000208 	.word	0x20000208
 8000fe4:	2000030c 	.word	0x2000030c
 8000fe8:	20000410 	.word	0x20000410
 8000fec:	20000514 	.word	0x20000514
 8000ff0:	20000618 	.word	0x20000618
 8000ff4:	2000071c 	.word	0x2000071c
 8000ff8:	20000820 	.word	0x20000820

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	@ 0x30
 8001000:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001002:	f000 fcab 	bl	800195c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001006:	f000 f8e5 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100a:	f7ff fae9 	bl	80005e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800100e:	f7ff fab7 	bl	8000580 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001012:	f000 fbd1 	bl	80017b8 <MX_USART1_UART_Init>
  MX_SDIO_SD_Init();
 8001016:	f000 f94b 	bl	80012b0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800101a:	f004 ff35 	bl	8005e88 <MX_FATFS_Init>
  MX_SPI1_Init();
 800101e:	f000 fa57 	bl	80014d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  UART_Start_Receive_DMA(&huart1, &uart_rx_data, 1);
 8001022:	2201      	movs	r2, #1
 8001024:	495f      	ldr	r1, [pc, #380]	@ (80011a4 <main+0x1a8>)
 8001026:	4860      	ldr	r0, [pc, #384]	@ (80011a8 <main+0x1ac>)
 8001028:	f003 fe62 	bl	8004cf0 <UART_Start_Receive_DMA>
  sd_init_user();
 800102c:	f7ff fcd6 	bl	80009dc <sd_init_user>

  SD_WRITE(SD_EXIST,"0:/hard.txt","test test%d",166);
 8001030:	23a6      	movs	r3, #166	@ 0xa6
 8001032:	4a5e      	ldr	r2, [pc, #376]	@ (80011ac <main+0x1b0>)
 8001034:	495e      	ldr	r1, [pc, #376]	@ (80011b0 <main+0x1b4>)
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff fbfe 	bl	8000838 <SD_WRITE>
  uint8_t buf[32];
  SD_READ("0:/hard.txt",buf,32);
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	2220      	movs	r2, #32
 8001042:	4619      	mov	r1, r3
 8001044:	485a      	ldr	r0, [pc, #360]	@ (80011b0 <main+0x1b4>)
 8001046:	f7ff fc75 	bl	8000934 <SD_READ>

  ST7735_LCD_Init();
 800104a:	f7ff fcef 	bl	8000a2c <ST7735_LCD_Init>
  uart_send(1,"%s",buf);
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	461a      	mov	r2, r3
 8001054:	4957      	ldr	r1, [pc, #348]	@ (80011b4 <main+0x1b8>)
 8001056:	2001      	movs	r0, #1
 8001058:	f7ff fbc2 	bl	80007e0 <uart_send>
  uint8_t startx = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	71fb      	strb	r3, [r7, #7]
  uint8_t starty = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	71bb      	strb	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if(EXTI12_flag){
 8001064:	4b54      	ldr	r3, [pc, #336]	@ (80011b8 <main+0x1bc>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d073      	beq.n	8001154 <main+0x158>
  		switch (count){
 800106c:	4b53      	ldr	r3, [pc, #332]	@ (80011bc <main+0x1c0>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b07      	cmp	r3, #7
 8001072:	d86c      	bhi.n	800114e <main+0x152>
 8001074:	a201      	add	r2, pc, #4	@ (adr r2, 800107c <main+0x80>)
 8001076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107a:	bf00      	nop
 800107c:	0800109d 	.word	0x0800109d
 8001080:	080010a5 	.word	0x080010a5
 8001084:	080010ad 	.word	0x080010ad
 8001088:	080010b5 	.word	0x080010b5
 800108c:	080010bd 	.word	0x080010bd
 8001090:	080010c5 	.word	0x080010c5
 8001094:	080010cd 	.word	0x080010cd
 8001098:	0800110f 	.word	0x0800110f
  		case 0:
    		ST7735_LCD_FillFullScreen(RED);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fda3 	bl	8000be8 <ST7735_LCD_FillFullScreen>
    		break;
 80010a2:	e054      	b.n	800114e <main+0x152>
  		case 1:
    		ST7735_LCD_FillFullScreen(GREEN);
 80010a4:	2002      	movs	r0, #2
 80010a6:	f7ff fd9f 	bl	8000be8 <ST7735_LCD_FillFullScreen>
    		break;
 80010aa:	e050      	b.n	800114e <main+0x152>
  		case 2:
    	  ST7735_LCD_FillFullScreen(BLUE);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff fd9b 	bl	8000be8 <ST7735_LCD_FillFullScreen>
    	  break;
 80010b2:	e04c      	b.n	800114e <main+0x152>
  		case 3:
    	  ST7735_LCD_FillFullScreen(BLACK);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f7ff fd97 	bl	8000be8 <ST7735_LCD_FillFullScreen>
    	  break;
 80010ba:	e048      	b.n	800114e <main+0x152>
  		case 4:
    	  ST7735_LCD_FillFullScreen(PURPLE);
 80010bc:	2004      	movs	r0, #4
 80010be:	f7ff fd93 	bl	8000be8 <ST7735_LCD_FillFullScreen>
    	  break;
 80010c2:	e044      	b.n	800114e <main+0x152>
  		case 5:
  			ST7735_LCD_FillFullScreen(WHITE);
 80010c4:	2005      	movs	r0, #5
 80010c6:	f7ff fd8f 	bl	8000be8 <ST7735_LCD_FillFullScreen>
  			break;
 80010ca:	e040      	b.n	800114e <main+0x152>
  		case 6:
        ST7735_LCD_FILLBlock(WHITE, 0, 63, 0, 63);
 80010cc:	233f      	movs	r3, #63	@ 0x3f
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2300      	movs	r3, #0
 80010d2:	223f      	movs	r2, #63	@ 0x3f
 80010d4:	2100      	movs	r1, #0
 80010d6:	2005      	movs	r0, #5
 80010d8:	f7ff fd98 	bl	8000c0c <ST7735_LCD_FILLBlock>
        ST7735_LCD_FILLBlock(BLACK, 0, 63, 64, 127);
 80010dc:	237f      	movs	r3, #127	@ 0x7f
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2340      	movs	r3, #64	@ 0x40
 80010e2:	223f      	movs	r2, #63	@ 0x3f
 80010e4:	2100      	movs	r1, #0
 80010e6:	2003      	movs	r0, #3
 80010e8:	f7ff fd90 	bl	8000c0c <ST7735_LCD_FILLBlock>
        ST7735_LCD_FILLBlock(PURPLE, 64, 127, 0, 63);
 80010ec:	233f      	movs	r3, #63	@ 0x3f
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2300      	movs	r3, #0
 80010f2:	227f      	movs	r2, #127	@ 0x7f
 80010f4:	2140      	movs	r1, #64	@ 0x40
 80010f6:	2004      	movs	r0, #4
 80010f8:	f7ff fd88 	bl	8000c0c <ST7735_LCD_FILLBlock>
        ST7735_LCD_FILLBlock(RED, 64, 127, 64, 127);
 80010fc:	237f      	movs	r3, #127	@ 0x7f
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2340      	movs	r3, #64	@ 0x40
 8001102:	227f      	movs	r2, #127	@ 0x7f
 8001104:	2140      	movs	r1, #64	@ 0x40
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff fd80 	bl	8000c0c <ST7735_LCD_FILLBlock>
        break;
 800110c:	e01f      	b.n	800114e <main+0x152>
  		case 7:
    		ST7735_LCD_FillFullScreen(BLACK);
 800110e:	2003      	movs	r0, #3
 8001110:	f7ff fd6a 	bl	8000be8 <ST7735_LCD_FillFullScreen>
    	  ST7735_LCD_Write_String("HELLOW\nWORLD",&startx,&starty,PURPLE,BLACK);
 8001114:	1dba      	adds	r2, r7, #6
 8001116:	1df9      	adds	r1, r7, #7
 8001118:	2303      	movs	r3, #3
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2304      	movs	r3, #4
 800111e:	4828      	ldr	r0, [pc, #160]	@ (80011c0 <main+0x1c4>)
 8001120:	f7ff fe5c 	bl	8000ddc <ST7735_LCD_Write_String>
    	  ST7735_LCD_Write_String("\nHELLOW\nWORLD",&startx,&starty,RED,GREEN);
 8001124:	1dba      	adds	r2, r7, #6
 8001126:	1df9      	adds	r1, r7, #7
 8001128:	2302      	movs	r3, #2
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2300      	movs	r3, #0
 800112e:	4825      	ldr	r0, [pc, #148]	@ (80011c4 <main+0x1c8>)
 8001130:	f7ff fe54 	bl	8000ddc <ST7735_LCD_Write_String>
    	  ST7735_LCD_Write_String("\nHELLOW\nWORLD",&startx,&starty,WHITE,BLACK);
 8001134:	1dba      	adds	r2, r7, #6
 8001136:	1df9      	adds	r1, r7, #7
 8001138:	2303      	movs	r3, #3
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2305      	movs	r3, #5
 800113e:	4821      	ldr	r0, [pc, #132]	@ (80011c4 <main+0x1c8>)
 8001140:	f7ff fe4c 	bl	8000ddc <ST7735_LCD_Write_String>

    	  startx = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	71fb      	strb	r3, [r7, #7]
    	  starty = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	71bb      	strb	r3, [r7, #6]
    	  break;
 800114c:	bf00      	nop
  		}
  		EXTI12_flag = false;
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <main+0x1bc>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
  	}

  	if(EXTI13_flag && LightOn){
 8001154:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <main+0x1cc>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00c      	beq.n	8001176 <main+0x17a>
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <main+0x1d0>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <main+0x17a>
  		BackLightON;
 8001164:	2201      	movs	r2, #1
 8001166:	2110      	movs	r1, #16
 8001168:	4819      	ldr	r0, [pc, #100]	@ (80011d0 <main+0x1d4>)
 800116a:	f001 fad9 	bl	8002720 <HAL_GPIO_WritePin>
  		EXTI13_flag = false;
 800116e:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <main+0x1cc>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	e014      	b.n	80011a0 <main+0x1a4>
  	}
  	else if(EXTI13_flag && !LightOn){
 8001176:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <main+0x1cc>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f43f af72 	beq.w	8001064 <main+0x68>
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <main+0x1d0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	f083 0301 	eor.w	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	f43f af6a 	beq.w	8001064 <main+0x68>
  		BackLightOFF;
 8001190:	2200      	movs	r2, #0
 8001192:	2110      	movs	r1, #16
 8001194:	480e      	ldr	r0, [pc, #56]	@ (80011d0 <main+0x1d4>)
 8001196:	f001 fac3 	bl	8002720 <HAL_GPIO_WritePin>
  	  EXTI13_flag = false;
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <main+0x1cc>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
  	if(EXTI12_flag){
 80011a0:	e760      	b.n	8001064 <main+0x68>
 80011a2:	bf00      	nop
 80011a4:	200009b0 	.word	0x200009b0
 80011a8:	20000b60 	.word	0x20000b60
 80011ac:	08009ca4 	.word	0x08009ca4
 80011b0:	08009cb0 	.word	0x08009cb0
 80011b4:	08009cbc 	.word	0x08009cbc
 80011b8:	200009bc 	.word	0x200009bc
 80011bc:	200009b1 	.word	0x200009b1
 80011c0:	08009cc0 	.word	0x08009cc0
 80011c4:	08009cd0 	.word	0x08009cd0
 80011c8:	200009bd 	.word	0x200009bd
 80011cc:	200009be 	.word	0x200009be
 80011d0:	40020000 	.word	0x40020000

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b094      	sub	sp, #80	@ 0x50
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0320 	add.w	r3, r7, #32
 80011de:	2230      	movs	r2, #48	@ 0x30
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 f87a 	bl	80092dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	4b27      	ldr	r3, [pc, #156]	@ (800129c <SystemClock_Config+0xc8>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	4a26      	ldr	r2, [pc, #152]	@ (800129c <SystemClock_Config+0xc8>)
 8001202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001206:	6413      	str	r3, [r2, #64]	@ 0x40
 8001208:	4b24      	ldr	r3, [pc, #144]	@ (800129c <SystemClock_Config+0xc8>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	4b21      	ldr	r3, [pc, #132]	@ (80012a0 <SystemClock_Config+0xcc>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a20      	ldr	r2, [pc, #128]	@ (80012a0 <SystemClock_Config+0xcc>)
 800121e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b1e      	ldr	r3, [pc, #120]	@ (80012a0 <SystemClock_Config+0xcc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	2301      	movs	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001238:	2310      	movs	r3, #16
 800123a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123c:	2302      	movs	r3, #2
 800123e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001240:	2300      	movs	r3, #0
 8001242:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001244:	2308      	movs	r3, #8
 8001246:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001248:	2360      	movs	r3, #96	@ 0x60
 800124a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124c:	2302      	movs	r3, #2
 800124e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001250:	2304      	movs	r3, #4
 8001252:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001254:	f107 0320 	add.w	r3, r7, #32
 8001258:	4618      	mov	r0, r3
 800125a:	f001 fa93 	bl	8002784 <HAL_RCC_OscConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001264:	f000 f81e 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001268:	230f      	movs	r3, #15
 800126a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126c:	2302      	movs	r3, #2
 800126e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001274:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001278:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	2103      	movs	r1, #3
 8001284:	4618      	mov	r0, r3
 8001286:	f001 fcf5 	bl	8002c74 <HAL_RCC_ClockConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001290:	f000 f808 	bl	80012a4 <Error_Handler>
  }
}
 8001294:	bf00      	nop
 8001296:	3750      	adds	r7, #80	@ 0x50
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800
 80012a0:	40007000 	.word	0x40007000

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <Error_Handler+0x8>

080012b0 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_SDIO_SD_Init+0x38>)
 80012b6:	4a0d      	ldr	r2, [pc, #52]	@ (80012ec <MX_SDIO_SD_Init+0x3c>)
 80012b8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <MX_SDIO_SD_Init+0x38>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_SDIO_SD_Init+0x38>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MX_SDIO_SD_Init+0x38>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_SDIO_SD_Init+0x38>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80012d2:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <MX_SDIO_SD_Init+0x38>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <MX_SDIO_SD_Init+0x38>)
 80012da:	220a      	movs	r2, #10
 80012dc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	200009c0 	.word	0x200009c0
 80012ec:	40012c00 	.word	0x40012c00

080012f0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a68      	ldr	r2, [pc, #416]	@ (80014b0 <HAL_SD_MspInit+0x1c0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	f040 80c9 	bne.w	80014a6 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	4b66      	ldr	r3, [pc, #408]	@ (80014b4 <HAL_SD_MspInit+0x1c4>)
 800131a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131c:	4a65      	ldr	r2, [pc, #404]	@ (80014b4 <HAL_SD_MspInit+0x1c4>)
 800131e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001322:	6453      	str	r3, [r2, #68]	@ 0x44
 8001324:	4b63      	ldr	r3, [pc, #396]	@ (80014b4 <HAL_SD_MspInit+0x1c4>)
 8001326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	4b5f      	ldr	r3, [pc, #380]	@ (80014b4 <HAL_SD_MspInit+0x1c4>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	4a5e      	ldr	r2, [pc, #376]	@ (80014b4 <HAL_SD_MspInit+0x1c4>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001340:	4b5c      	ldr	r3, [pc, #368]	@ (80014b4 <HAL_SD_MspInit+0x1c4>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	4b58      	ldr	r3, [pc, #352]	@ (80014b4 <HAL_SD_MspInit+0x1c4>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001354:	4a57      	ldr	r2, [pc, #348]	@ (80014b4 <HAL_SD_MspInit+0x1c4>)
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	6313      	str	r3, [r2, #48]	@ 0x30
 800135c:	4b55      	ldr	r3, [pc, #340]	@ (80014b4 <HAL_SD_MspInit+0x1c4>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PA6     ------> SDIO_CMD
    PB15     ------> SDIO_CK
    PB4     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001368:	2340      	movs	r3, #64	@ 0x40
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001370:	2301      	movs	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001378:	230c      	movs	r3, #12
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	484d      	ldr	r0, [pc, #308]	@ (80014b8 <HAL_SD_MspInit+0x1c8>)
 8001384:	f001 f830 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4;
 8001388:	f248 0310 	movw	r3, #32784	@ 0x8010
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001392:	2301      	movs	r3, #1
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800139a:	230c      	movs	r3, #12
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4845      	ldr	r0, [pc, #276]	@ (80014bc <HAL_SD_MspInit+0x1cc>)
 80013a6:	f001 f81f 	bl	80023e8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80013aa:	4b45      	ldr	r3, [pc, #276]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 80013ac:	4a45      	ldr	r2, [pc, #276]	@ (80014c4 <HAL_SD_MspInit+0x1d4>)
 80013ae:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80013b0:	4b43      	ldr	r3, [pc, #268]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 80013b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80013b6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013b8:	4b41      	ldr	r3, [pc, #260]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013be:	4b40      	ldr	r3, [pc, #256]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013c4:	4b3e      	ldr	r3, [pc, #248]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 80013c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ca:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013cc:	4b3c      	ldr	r3, [pc, #240]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 80013ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013d2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013d4:	4b3a      	ldr	r3, [pc, #232]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 80013d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013da:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80013dc:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 80013de:	2220      	movs	r2, #32
 80013e0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013e2:	4b37      	ldr	r3, [pc, #220]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013e8:	4b35      	ldr	r3, [pc, #212]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 80013ea:	2204      	movs	r2, #4
 80013ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013ee:	4b34      	ldr	r3, [pc, #208]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 80013f0:	2203      	movs	r2, #3
 80013f2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80013f4:	4b32      	ldr	r3, [pc, #200]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 80013f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80013fc:	4b30      	ldr	r3, [pc, #192]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 80013fe:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001402:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001404:	482e      	ldr	r0, [pc, #184]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 8001406:	f000 fc51 	bl	8001cac <HAL_DMA_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8001410:	f7ff ff48 	bl	80012a4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a2a      	ldr	r2, [pc, #168]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
 800141a:	4a29      	ldr	r2, [pc, #164]	@ (80014c0 <HAL_SD_MspInit+0x1d0>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001420:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 8001422:	4a2a      	ldr	r2, [pc, #168]	@ (80014cc <HAL_SD_MspInit+0x1dc>)
 8001424:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001426:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 8001428:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800142c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800142e:	4b26      	ldr	r3, [pc, #152]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 8001430:	2240      	movs	r2, #64	@ 0x40
 8001432:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001434:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800143a:	4b23      	ldr	r3, [pc, #140]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 800143c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001440:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001442:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 8001444:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001448:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800144a:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 800144c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001450:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001452:	4b1d      	ldr	r3, [pc, #116]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 8001454:	2220      	movs	r2, #32
 8001456:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001458:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800145e:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 8001460:	2204      	movs	r2, #4
 8001462:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001464:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 8001466:	2203      	movs	r2, #3
 8001468:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800146a:	4b17      	ldr	r3, [pc, #92]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 800146c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001470:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 8001474:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001478:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800147a:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 800147c:	f000 fc16 	bl	8001cac <HAL_DMA_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001486:	f7ff ff0d 	bl	80012a4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a0e      	ldr	r2, [pc, #56]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 800148e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001490:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <HAL_SD_MspInit+0x1d8>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2031      	movs	r0, #49	@ 0x31
 800149c:	f000 fbcf 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80014a0:	2031      	movs	r0, #49	@ 0x31
 80014a2:	f000 fbe8 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	@ 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40012c00 	.word	0x40012c00
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020400 	.word	0x40020400
 80014c0:	20000a44 	.word	0x20000a44
 80014c4:	40026458 	.word	0x40026458
 80014c8:	20000aa4 	.word	0x20000aa4
 80014cc:	400264a0 	.word	0x400264a0

080014d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80014d4:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <MX_SPI1_Init+0x64>)
 80014d6:	4a18      	ldr	r2, [pc, #96]	@ (8001538 <MX_SPI1_Init+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014da:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <MX_SPI1_Init+0x64>)
 80014dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014e2:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <MX_SPI1_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <MX_SPI1_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_SPI1_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <MX_SPI1_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <MX_SPI1_Init+0x64>)
 80014fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001500:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <MX_SPI1_Init+0x64>)
 8001504:	2220      	movs	r2, #32
 8001506:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001508:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <MX_SPI1_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_SPI1_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <MX_SPI1_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <MX_SPI1_Init+0x64>)
 800151c:	220a      	movs	r2, #10
 800151e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	@ (8001534 <MX_SPI1_Init+0x64>)
 8001522:	f002 feb7 	bl	8004294 <HAL_SPI_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800152c:	f7ff feba 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000b04 	.word	0x20000b04
 8001538:	40013000 	.word	0x40013000

0800153c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a28      	ldr	r2, [pc, #160]	@ (80015fc <HAL_SPI_MspInit+0xc0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d149      	bne.n	80015f2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <HAL_SPI_MspInit+0xc4>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	4a26      	ldr	r2, [pc, #152]	@ (8001600 <HAL_SPI_MspInit+0xc4>)
 8001568:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800156c:	6453      	str	r3, [r2, #68]	@ 0x44
 800156e:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <HAL_SPI_MspInit+0xc4>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <HAL_SPI_MspInit+0xc4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a1f      	ldr	r2, [pc, #124]	@ (8001600 <HAL_SPI_MspInit+0xc4>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <HAL_SPI_MspInit+0xc4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_SPI_MspInit+0xc4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a18      	ldr	r2, [pc, #96]	@ (8001600 <HAL_SPI_MspInit+0xc4>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <HAL_SPI_MspInit+0xc4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015b2:	2320      	movs	r3, #32
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015c2:	2305      	movs	r3, #5
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	480d      	ldr	r0, [pc, #52]	@ (8001604 <HAL_SPI_MspInit+0xc8>)
 80015ce:	f000 ff0b 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015d2:	2320      	movs	r3, #32
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015e2:	2305      	movs	r3, #5
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4806      	ldr	r0, [pc, #24]	@ (8001608 <HAL_SPI_MspInit+0xcc>)
 80015ee:	f000 fefb 	bl	80023e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	@ 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40013000 	.word	0x40013000
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400

0800160c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <HAL_MspInit+0x4c>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	4a0f      	ldr	r2, [pc, #60]	@ (8001658 <HAL_MspInit+0x4c>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001620:	6453      	str	r3, [r2, #68]	@ 0x44
 8001622:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_MspInit+0x4c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	@ (8001658 <HAL_MspInit+0x4c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	@ 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <NMI_Handler+0x4>

08001664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <MemManage_Handler+0x4>

08001674 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <UsageFault_Handler+0x4>

08001684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b2:	f000 f9a5 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}

080016ba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016be:	2001      	movs	r0, #1
 80016c0:	f001 f848 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80016cc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80016d0:	f001 f840 	bl	8002754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <SDIO_IRQHandler+0x10>)
 80016de:	f001 ff21 	bl	8003524 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200009c0 	.word	0x200009c0

080016ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <DMA2_Stream2_IRQHandler+0x10>)
 80016f2:	f000 fc03 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000ba8 	.word	0x20000ba8

08001700 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001704:	4802      	ldr	r0, [pc, #8]	@ (8001710 <DMA2_Stream3_IRQHandler+0x10>)
 8001706:	f000 fbf9 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000a44 	.word	0x20000a44

08001714 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <DMA2_Stream6_IRQHandler+0x10>)
 800171a:	f000 fbef 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000aa4 	.word	0x20000aa4

08001728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001730:	4a14      	ldr	r2, [pc, #80]	@ (8001784 <_sbrk+0x5c>)
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <_sbrk+0x60>)
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800173c:	4b13      	ldr	r3, [pc, #76]	@ (800178c <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <_sbrk+0x64>)
 8001746:	4a12      	ldr	r2, [pc, #72]	@ (8001790 <_sbrk+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	429a      	cmp	r2, r3
 8001756:	d207      	bcs.n	8001768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001758:	f007 fdc8 	bl	80092ec <__errno>
 800175c:	4603      	mov	r3, r0
 800175e:	220c      	movs	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	e009      	b.n	800177c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176e:	4b07      	ldr	r3, [pc, #28]	@ (800178c <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	4a05      	ldr	r2, [pc, #20]	@ (800178c <_sbrk+0x64>)
 8001778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20020000 	.word	0x20020000
 8001788:	00000400 	.word	0x00000400
 800178c:	20000b5c 	.word	0x20000b5c
 8001790:	20001400 	.word	0x20001400

08001794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <SystemInit+0x20>)
 800179a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179e:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <SystemInit+0x20>)
 80017a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017be:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <MX_USART1_UART_Init+0x50>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	@ (8001804 <MX_USART1_UART_Init+0x4c>)
 80017f0:	f003 f806 	bl	8004800 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017fa:	f7ff fd53 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000b60 	.word	0x20000b60
 8001808:	40011000 	.word	0x40011000

0800180c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	@ 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a31      	ldr	r2, [pc, #196]	@ (80018f0 <HAL_UART_MspInit+0xe4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d15b      	bne.n	80018e6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b30      	ldr	r3, [pc, #192]	@ (80018f4 <HAL_UART_MspInit+0xe8>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	4a2f      	ldr	r2, [pc, #188]	@ (80018f4 <HAL_UART_MspInit+0xe8>)
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	6453      	str	r3, [r2, #68]	@ 0x44
 800183e:	4b2d      	ldr	r3, [pc, #180]	@ (80018f4 <HAL_UART_MspInit+0xe8>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b29      	ldr	r3, [pc, #164]	@ (80018f4 <HAL_UART_MspInit+0xe8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a28      	ldr	r2, [pc, #160]	@ (80018f4 <HAL_UART_MspInit+0xe8>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b26      	ldr	r3, [pc, #152]	@ (80018f4 <HAL_UART_MspInit+0xe8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001866:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001878:	2307      	movs	r3, #7
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	481d      	ldr	r0, [pc, #116]	@ (80018f8 <HAL_UART_MspInit+0xec>)
 8001884:	f000 fdb0 	bl	80023e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001888:	4b1c      	ldr	r3, [pc, #112]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 800188a:	4a1d      	ldr	r2, [pc, #116]	@ (8001900 <HAL_UART_MspInit+0xf4>)
 800188c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800188e:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 8001890:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001894:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001896:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 80018a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018aa:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b0:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 80018b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018be:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018c4:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018ca:	480c      	ldr	r0, [pc, #48]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 80018cc:	f000 f9ee 	bl	8001cac <HAL_DMA_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80018d6:	f7ff fce5 	bl	80012a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a07      	ldr	r2, [pc, #28]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 80018de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018e0:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018e6:	bf00      	nop
 80018e8:	3728      	adds	r7, #40	@ 0x28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40011000 	.word	0x40011000
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	20000ba8 	.word	0x20000ba8
 8001900:	40026440 	.word	0x40026440

08001904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001904:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001940 <LoopFillZerobss+0x10>

/* Call the clock system initialization function.*/  bl  SystemInit
 8001908:	f7ff ff44 	bl	8001794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800190c:	480d      	ldr	r0, [pc, #52]	@ (8001944 <LoopFillZerobss+0x14>)
  ldr r1, =_edata
 800190e:	490e      	ldr	r1, [pc, #56]	@ (8001948 <LoopFillZerobss+0x18>)
  ldr r2, =_sidata
 8001910:	4a0e      	ldr	r2, [pc, #56]	@ (800194c <LoopFillZerobss+0x1c>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0b      	ldr	r2, [pc, #44]	@ (8001950 <LoopFillZerobss+0x20>)
  ldr r4, =_ebss
 8001924:	4c0b      	ldr	r4, [pc, #44]	@ (8001954 <LoopFillZerobss+0x24>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  bl LoopFillZerobss
 8001928:	f000 f802 	bl	8001930 <LoopFillZerobss>

0800192c <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192e:	3204      	adds	r2, #4

08001930 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001930:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001932:	d3fb      	bcc.n	800192c <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001934:	f007 fce0 	bl	80092f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001938:	f7ff fb60 	bl	8000ffc <main>
  bx  lr    
 800193c:	4770      	bx	lr
 800193e:	0000      	.short	0x0000
  ldr   sp, =_estack    		 /* set stack pointer */
 8001940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	20000994 	.word	0x20000994
  ldr r2, =_sidata
 800194c:	0800a1e0 	.word	0x0800a1e0
  ldr r2, =_sbss
 8001950:	20000994 	.word	0x20000994
  ldr r4, =_ebss
 8001954:	200013fc 	.word	0x200013fc

08001958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC_IRQHandler>
	...

0800195c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001960:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0d      	ldr	r2, [pc, #52]	@ (800199c <HAL_Init+0x40>)
 8001966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800196a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800196c:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <HAL_Init+0x40>)
 8001972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	@ (800199c <HAL_Init+0x40>)
 800197e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 f94f 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	200f      	movs	r0, #15
 800198c:	f000 f808 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff fe3c 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023c00 	.word	0x40023c00

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f967 	bl	8001c92 <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f000 f92f 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	@ (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000938 	.word	0x20000938
 80019f8:	20000940 	.word	0x20000940
 80019fc:	2000093c 	.word	0x2000093c

08001a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_IncTick+0x20>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_IncTick+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <HAL_IncTick+0x24>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000940 	.word	0x20000940
 8001a24:	20000c08 	.word	0x20000c08

08001a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <HAL_GetTick+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000c08 	.word	0x20000c08

08001a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff ffee 	bl	8001a28 <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d005      	beq.n	8001a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <HAL_Delay+0x44>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a66:	bf00      	nop
 8001a68:	f7ff ffde 	bl	8001a28 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d8f7      	bhi.n	8001a68 <HAL_Delay+0x28>
  {
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000940 	.word	0x20000940

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aba:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0b      	blt.n	8001b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4907      	ldr	r1, [pc, #28]	@ (8001b24 <__NVIC_EnableIRQ+0x38>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	@ (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	@ (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	@ 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf28      	it	cs
 8001b9a:	2304      	movcs	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d902      	bls.n	8001bac <NVIC_EncodePriority+0x30>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	e000      	b.n	8001bae <NVIC_EncodePriority+0x32>
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	4313      	orrs	r3, r2
         );
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	@ 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff8e 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff29 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff3e 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff8e 	bl	8001b7c <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5d 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff31 	bl	8001aec <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff feb6 	bl	8001a28 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e099      	b.n	8001dfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce8:	e00f      	b.n	8001d0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cea:	f7ff fe9d 	bl	8001a28 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	d908      	bls.n	8001d0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2203      	movs	r2, #3
 8001d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e078      	b.n	8001dfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e8      	bne.n	8001cea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4b38      	ldr	r3, [pc, #224]	@ (8001e04 <HAL_DMA_Init+0x158>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d107      	bne.n	8001d74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f023 0307 	bic.w	r3, r3, #7
 8001d8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d117      	bne.n	8001dce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00e      	beq.n	8001dce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fa9d 	bl	80022f0 <DMA_CheckFifoParam>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2240      	movs	r2, #64	@ 0x40
 8001dc0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e016      	b.n	8001dfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fa54 	bl	8002284 <DMA_CalcBaseAndBitshift>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de4:	223f      	movs	r2, #63	@ 0x3f
 8001de6:	409a      	lsls	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	f010803f 	.word	0xf010803f

08001e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_DMA_Start_IT+0x26>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e040      	b.n	8001eb0 <HAL_DMA_Start_IT+0xa8>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d12f      	bne.n	8001ea2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2202      	movs	r2, #2
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f9e6 	bl	8002228 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e60:	223f      	movs	r2, #63	@ 0x3f
 8001e62:	409a      	lsls	r2, r3
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0216 	orr.w	r2, r2, #22
 8001e76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0208 	orr.w	r2, r2, #8
 8001e8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e005      	b.n	8001eae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d004      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2280      	movs	r2, #128	@ 0x80
 8001ed0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00c      	b.n	8001ef0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2205      	movs	r2, #5
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f08:	4b8e      	ldr	r3, [pc, #568]	@ (8002144 <HAL_DMA_IRQHandler+0x248>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a8e      	ldr	r2, [pc, #568]	@ (8002148 <HAL_DMA_IRQHandler+0x24c>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	0a9b      	lsrs	r3, r3, #10
 8001f14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f26:	2208      	movs	r2, #8
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d01a      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0204 	bic.w	r2, r2, #4
 8001f4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f54:	2208      	movs	r2, #8
 8001f56:	409a      	lsls	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d012      	beq.n	8001f9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f96:	f043 0202 	orr.w	r2, r3, #2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d012      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00b      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	f043 0204 	orr.w	r2, r3, #4
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	2210      	movs	r2, #16
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d043      	beq.n	800206c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d03c      	beq.n	800206c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d018      	beq.n	800203e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d108      	bne.n	800202c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	d024      	beq.n	800206c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	4798      	blx	r3
 800202a:	e01f      	b.n	800206c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01b      	beq.n	800206c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
 800203c:	e016      	b.n	800206c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0208 	bic.w	r2, r2, #8
 800205a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	2220      	movs	r2, #32
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 808f 	beq.w	800219c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8087 	beq.w	800219c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002092:	2220      	movs	r2, #32
 8002094:	409a      	lsls	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b05      	cmp	r3, #5
 80020a4:	d136      	bne.n	8002114 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0216 	bic.w	r2, r2, #22
 80020b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d103      	bne.n	80020d6 <HAL_DMA_IRQHandler+0x1da>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0208 	bic.w	r2, r2, #8
 80020e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	223f      	movs	r2, #63	@ 0x3f
 80020ec:	409a      	lsls	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002106:	2b00      	cmp	r3, #0
 8002108:	d07e      	beq.n	8002208 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	4798      	blx	r3
        }
        return;
 8002112:	e079      	b.n	8002208 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d01d      	beq.n	800215e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10d      	bne.n	800214c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002134:	2b00      	cmp	r3, #0
 8002136:	d031      	beq.n	800219c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
 8002140:	e02c      	b.n	800219c <HAL_DMA_IRQHandler+0x2a0>
 8002142:	bf00      	nop
 8002144:	20000938 	.word	0x20000938
 8002148:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d023      	beq.n	800219c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
 800215c:	e01e      	b.n	800219c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10f      	bne.n	800218c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0210 	bic.w	r2, r2, #16
 800217a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d032      	beq.n	800220a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d022      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2205      	movs	r2, #5
 80021b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d307      	bcc.n	80021e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f2      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x2cc>
 80021e2:	e000      	b.n	80021e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
 8002206:	e000      	b.n	800220a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002208:	bf00      	nop
    }
  }
}
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002244:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b40      	cmp	r3, #64	@ 0x40
 8002254:	d108      	bne.n	8002268 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002266:	e007      	b.n	8002278 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	60da      	str	r2, [r3, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	3b10      	subs	r3, #16
 8002294:	4a14      	ldr	r2, [pc, #80]	@ (80022e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800229e:	4a13      	ldr	r2, [pc, #76]	@ (80022ec <DMA_CalcBaseAndBitshift+0x68>)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d909      	bls.n	80022c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	1d1a      	adds	r2, r3, #4
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80022c4:	e007      	b.n	80022d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	aaaaaaab 	.word	0xaaaaaaab
 80022ec:	08009d40 	.word	0x08009d40

080022f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002300:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11f      	bne.n	800234a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d856      	bhi.n	80023be <DMA_CheckFifoParam+0xce>
 8002310:	a201      	add	r2, pc, #4	@ (adr r2, 8002318 <DMA_CheckFifoParam+0x28>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	08002329 	.word	0x08002329
 800231c:	0800233b 	.word	0x0800233b
 8002320:	08002329 	.word	0x08002329
 8002324:	080023bf 	.word	0x080023bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d046      	beq.n	80023c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002338:	e043      	b.n	80023c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002342:	d140      	bne.n	80023c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002348:	e03d      	b.n	80023c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002352:	d121      	bne.n	8002398 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d837      	bhi.n	80023ca <DMA_CheckFifoParam+0xda>
 800235a:	a201      	add	r2, pc, #4	@ (adr r2, 8002360 <DMA_CheckFifoParam+0x70>)
 800235c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002360:	08002371 	.word	0x08002371
 8002364:	08002377 	.word	0x08002377
 8002368:	08002371 	.word	0x08002371
 800236c:	08002389 	.word	0x08002389
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      break;
 8002374:	e030      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d025      	beq.n	80023ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002386:	e022      	b.n	80023ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002390:	d11f      	bne.n	80023d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002396:	e01c      	b.n	80023d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d903      	bls.n	80023a6 <DMA_CheckFifoParam+0xb6>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d003      	beq.n	80023ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023a4:	e018      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
      break;
 80023aa:	e015      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00e      	beq.n	80023d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e00b      	b.n	80023d6 <DMA_CheckFifoParam+0xe6>
      break;
 80023be:	bf00      	nop
 80023c0:	e00a      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023c2:	bf00      	nop
 80023c4:	e008      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023c6:	bf00      	nop
 80023c8:	e006      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ca:	bf00      	nop
 80023cc:	e004      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e002      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023d2:	bf00      	nop
 80023d4:	e000      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
    }
  } 
  
  return status; 
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	@ 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e159      	b.n	80026b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	f040 8148 	bne.w	80026b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d005      	beq.n	800243a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002436:	2b02      	cmp	r3, #2
 8002438:	d130      	bne.n	800249c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 0201 	and.w	r2, r3, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d017      	beq.n	80024d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d123      	bne.n	800252c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a2 	beq.w	80026b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b57      	ldr	r3, [pc, #348]	@ (80026d0 <HAL_GPIO_Init+0x2e8>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	4a56      	ldr	r2, [pc, #344]	@ (80026d0 <HAL_GPIO_Init+0x2e8>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800257c:	6453      	str	r3, [r2, #68]	@ 0x44
 800257e:	4b54      	ldr	r3, [pc, #336]	@ (80026d0 <HAL_GPIO_Init+0x2e8>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258a:	4a52      	ldr	r2, [pc, #328]	@ (80026d4 <HAL_GPIO_Init+0x2ec>)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	3302      	adds	r3, #2
 8002592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	220f      	movs	r2, #15
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a49      	ldr	r2, [pc, #292]	@ (80026d8 <HAL_GPIO_Init+0x2f0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d019      	beq.n	80025ea <HAL_GPIO_Init+0x202>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a48      	ldr	r2, [pc, #288]	@ (80026dc <HAL_GPIO_Init+0x2f4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0x1fe>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a47      	ldr	r2, [pc, #284]	@ (80026e0 <HAL_GPIO_Init+0x2f8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_Init+0x1fa>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a46      	ldr	r2, [pc, #280]	@ (80026e4 <HAL_GPIO_Init+0x2fc>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x1f6>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a45      	ldr	r2, [pc, #276]	@ (80026e8 <HAL_GPIO_Init+0x300>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_Init+0x1f2>
 80025d6:	2304      	movs	r3, #4
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025da:	2307      	movs	r3, #7
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025ea:	2300      	movs	r3, #0
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f002 0203 	and.w	r2, r2, #3
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fc:	4935      	ldr	r1, [pc, #212]	@ (80026d4 <HAL_GPIO_Init+0x2ec>)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260a:	4b38      	ldr	r3, [pc, #224]	@ (80026ec <HAL_GPIO_Init+0x304>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262e:	4a2f      	ldr	r2, [pc, #188]	@ (80026ec <HAL_GPIO_Init+0x304>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002634:	4b2d      	ldr	r3, [pc, #180]	@ (80026ec <HAL_GPIO_Init+0x304>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002658:	4a24      	ldr	r2, [pc, #144]	@ (80026ec <HAL_GPIO_Init+0x304>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265e:	4b23      	ldr	r3, [pc, #140]	@ (80026ec <HAL_GPIO_Init+0x304>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002682:	4a1a      	ldr	r2, [pc, #104]	@ (80026ec <HAL_GPIO_Init+0x304>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002688:	4b18      	ldr	r3, [pc, #96]	@ (80026ec <HAL_GPIO_Init+0x304>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ac:	4a0f      	ldr	r2, [pc, #60]	@ (80026ec <HAL_GPIO_Init+0x304>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	f67f aea2 	bls.w	8002404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40013c00 	.word	0x40013c00

080026f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e001      	b.n	8002712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
 800272c:	4613      	mov	r3, r2
 800272e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002730:	787b      	ldrb	r3, [r7, #1]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800273c:	e003      	b.n	8002746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800273e:	887b      	ldrh	r3, [r7, #2]
 8002740:	041a      	lsls	r2, r3, #16
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	619a      	str	r2, [r3, #24]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800275e:	4b08      	ldr	r3, [pc, #32]	@ (8002780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800276a:	4a05      	ldr	r2, [pc, #20]	@ (8002780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd ffc2 	bl	80006fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40013c00 	.word	0x40013c00

08002784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e267      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d075      	beq.n	800288e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027a2:	4b88      	ldr	r3, [pc, #544]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d00c      	beq.n	80027c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ae:	4b85      	ldr	r3, [pc, #532]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d112      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ba:	4b82      	ldr	r3, [pc, #520]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027c6:	d10b      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c8:	4b7e      	ldr	r3, [pc, #504]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d05b      	beq.n	800288c <HAL_RCC_OscConfig+0x108>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d157      	bne.n	800288c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e242      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e8:	d106      	bne.n	80027f8 <HAL_RCC_OscConfig+0x74>
 80027ea:	4b76      	ldr	r3, [pc, #472]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a75      	ldr	r2, [pc, #468]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e01d      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4b70      	ldr	r3, [pc, #448]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a6f      	ldr	r2, [pc, #444]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b6d      	ldr	r3, [pc, #436]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6c      	ldr	r2, [pc, #432]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e00b      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 800281c:	4b69      	ldr	r3, [pc, #420]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a68      	ldr	r2, [pc, #416]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b66      	ldr	r3, [pc, #408]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a65      	ldr	r2, [pc, #404]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800282e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7ff f8f4 	bl	8001a28 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002844:	f7ff f8f0 	bl	8001a28 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	@ 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e207      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b5b      	ldr	r3, [pc, #364]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0xc0>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7ff f8e0 	bl	8001a28 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800286c:	f7ff f8dc 	bl	8001a28 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	@ 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1f3      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287e:	4b51      	ldr	r3, [pc, #324]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0xe8>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d063      	beq.n	8002962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800289a:	4b4a      	ldr	r3, [pc, #296]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a6:	4b47      	ldr	r3, [pc, #284]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d11c      	bne.n	80028ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b2:	4b44      	ldr	r3, [pc, #272]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d116      	bne.n	80028ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	4b41      	ldr	r3, [pc, #260]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_RCC_OscConfig+0x152>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e1c7      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d6:	4b3b      	ldr	r3, [pc, #236]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4937      	ldr	r1, [pc, #220]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ea:	e03a      	b.n	8002962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f4:	4b34      	ldr	r3, [pc, #208]	@ (80029c8 <HAL_RCC_OscConfig+0x244>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7ff f895 	bl	8001a28 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002902:	f7ff f891 	bl	8001a28 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1a8      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	4b2b      	ldr	r3, [pc, #172]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	4b28      	ldr	r3, [pc, #160]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4925      	ldr	r1, [pc, #148]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
 8002934:	e015      	b.n	8002962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002936:	4b24      	ldr	r3, [pc, #144]	@ (80029c8 <HAL_RCC_OscConfig+0x244>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7ff f874 	bl	8001a28 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002944:	f7ff f870 	bl	8001a28 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e187      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d036      	beq.n	80029dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d016      	beq.n	80029a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_RCC_OscConfig+0x248>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7ff f854 	bl	8001a28 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002984:	f7ff f850 	bl	8001a28 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e167      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x200>
 80029a2:	e01b      	b.n	80029dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a4:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <HAL_RCC_OscConfig+0x248>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029aa:	f7ff f83d 	bl	8001a28 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	e00e      	b.n	80029d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b2:	f7ff f839 	bl	8001a28 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d907      	bls.n	80029d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e150      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
 80029c4:	40023800 	.word	0x40023800
 80029c8:	42470000 	.word	0x42470000
 80029cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	4b88      	ldr	r3, [pc, #544]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ea      	bne.n	80029b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8097 	beq.w	8002b18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ee:	4b81      	ldr	r3, [pc, #516]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	4b7d      	ldr	r3, [pc, #500]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	4a7c      	ldr	r2, [pc, #496]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a0a:	4b7a      	ldr	r3, [pc, #488]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	4b77      	ldr	r3, [pc, #476]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d118      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a26:	4b74      	ldr	r3, [pc, #464]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a73      	ldr	r2, [pc, #460]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a32:	f7fe fff9 	bl	8001a28 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3a:	f7fe fff5 	bl	8001a28 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e10c      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x2ea>
 8002a60:	4b64      	ldr	r3, [pc, #400]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a64:	4a63      	ldr	r2, [pc, #396]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6c:	e01c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x324>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x30c>
 8002a76:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a82:	4b5c      	ldr	r3, [pc, #368]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a86:	4a5b      	ldr	r2, [pc, #364]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0x324>
 8002a90:	4b58      	ldr	r3, [pc, #352]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	4a57      	ldr	r2, [pc, #348]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9c:	4b55      	ldr	r3, [pc, #340]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa0:	4a54      	ldr	r2, [pc, #336]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	f023 0304 	bic.w	r3, r3, #4
 8002aa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fe ffba 	bl	8001a28 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fe ffb6 	bl	8001a28 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0cb      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ace:	4b49      	ldr	r3, [pc, #292]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ee      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x334>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002adc:	f7fe ffa4 	bl	8001a28 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae4:	f7fe ffa0 	bl	8001a28 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e0b5      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afa:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1ee      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0c:	4b39      	ldr	r3, [pc, #228]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	4a38      	ldr	r2, [pc, #224]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a1 	beq.w	8002c64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b22:	4b34      	ldr	r3, [pc, #208]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d05c      	beq.n	8002be8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d141      	bne.n	8002bba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b36:	4b31      	ldr	r3, [pc, #196]	@ (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe ff74 	bl	8001a28 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe ff70 	bl	8001a28 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e087      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	4b27      	ldr	r3, [pc, #156]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	019b      	lsls	r3, r3, #6
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	085b      	lsrs	r3, r3, #1
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	041b      	lsls	r3, r3, #16
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	491b      	ldr	r1, [pc, #108]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fe ff49 	bl	8001a28 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fe ff45 	bl	8001a28 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e05c      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bac:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x416>
 8002bb8:	e054      	b.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7fe ff32 	bl	8001a28 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe ff2e 	bl	8001a28 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e045      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x444>
 8002be6:	e03d      	b.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e038      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	@ (8002c70 <HAL_RCC_OscConfig+0x4ec>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d028      	beq.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d121      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d11a      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d111      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800

08002c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0cc      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c88:	4b68      	ldr	r3, [pc, #416]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d90c      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	4b65      	ldr	r3, [pc, #404]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b63      	ldr	r3, [pc, #396]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0b8      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc8:	4b59      	ldr	r3, [pc, #356]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a58      	ldr	r2, [pc, #352]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce0:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a52      	ldr	r2, [pc, #328]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b50      	ldr	r3, [pc, #320]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	494d      	ldr	r1, [pc, #308]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d044      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b47      	ldr	r3, [pc, #284]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d119      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d32:	4b3f      	ldr	r3, [pc, #252]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d42:	4b3b      	ldr	r3, [pc, #236]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e067      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d52:	4b37      	ldr	r3, [pc, #220]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4934      	ldr	r1, [pc, #208]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d64:	f7fe fe60 	bl	8001a28 <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7fe fe5c 	bl	8001a28 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e04f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	4b2b      	ldr	r3, [pc, #172]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 020c 	and.w	r2, r3, #12
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1eb      	bne.n	8002d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d94:	4b25      	ldr	r3, [pc, #148]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d20c      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b22      	ldr	r3, [pc, #136]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e032      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc8:	4b19      	ldr	r3, [pc, #100]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4916      	ldr	r1, [pc, #88]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de6:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	490e      	ldr	r1, [pc, #56]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dfa:	f000 f821 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	490a      	ldr	r1, [pc, #40]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	5ccb      	ldrb	r3, [r1, r3]
 8002e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e12:	4a09      	ldr	r2, [pc, #36]	@ (8002e38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fdc0 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023c00 	.word	0x40023c00
 8002e30:	40023800 	.word	0x40023800
 8002e34:	08009d28 	.word	0x08009d28
 8002e38:	20000938 	.word	0x20000938
 8002e3c:	2000093c 	.word	0x2000093c

08002e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e44:	b090      	sub	sp, #64	@ 0x40
 8002e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e50:	2300      	movs	r3, #0
 8002e52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e58:	4b59      	ldr	r3, [pc, #356]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d00d      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x40>
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	f200 80a1 	bhi.w	8002fac <HAL_RCC_GetSysClockFreq+0x16c>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x34>
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d003      	beq.n	8002e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e72:	e09b      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b53      	ldr	r3, [pc, #332]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e76:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002e78:	e09b      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e7a:	4b53      	ldr	r3, [pc, #332]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e7e:	e098      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e80:	4b4f      	ldr	r3, [pc, #316]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e88:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e8a:	4b4d      	ldr	r3, [pc, #308]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d028      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e96:	4b4a      	ldr	r3, [pc, #296]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	099b      	lsrs	r3, r3, #6
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4b47      	ldr	r3, [pc, #284]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002eac:	fb03 f201 	mul.w	r2, r3, r1
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	fb00 f303 	mul.w	r3, r0, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a43      	ldr	r2, [pc, #268]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002eba:	fba0 1202 	umull	r1, r2, r0, r2
 8002ebe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ec0:	460a      	mov	r2, r1
 8002ec2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ec6:	4413      	add	r3, r2
 8002ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ecc:	2200      	movs	r2, #0
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	61fa      	str	r2, [r7, #28]
 8002ed2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002eda:	f7fd f9d9 	bl	8000290 <__aeabi_uldivmod>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ee6:	e053      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee8:	4b35      	ldr	r3, [pc, #212]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	099b      	lsrs	r3, r3, #6
 8002eee:	2200      	movs	r2, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	617a      	str	r2, [r7, #20]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002efa:	f04f 0b00 	mov.w	fp, #0
 8002efe:	4652      	mov	r2, sl
 8002f00:	465b      	mov	r3, fp
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	0159      	lsls	r1, r3, #5
 8002f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f10:	0150      	lsls	r0, r2, #5
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	ebb2 080a 	subs.w	r8, r2, sl
 8002f1a:	eb63 090b 	sbc.w	r9, r3, fp
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f32:	ebb2 0408 	subs.w	r4, r2, r8
 8002f36:	eb63 0509 	sbc.w	r5, r3, r9
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	00eb      	lsls	r3, r5, #3
 8002f44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f48:	00e2      	lsls	r2, r4, #3
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	461d      	mov	r5, r3
 8002f4e:	eb14 030a 	adds.w	r3, r4, sl
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	eb45 030b 	adc.w	r3, r5, fp
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f66:	4629      	mov	r1, r5
 8002f68:	028b      	lsls	r3, r1, #10
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f70:	4621      	mov	r1, r4
 8002f72:	028a      	lsls	r2, r1, #10
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	60fa      	str	r2, [r7, #12]
 8002f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f84:	f7fd f984 	bl	8000290 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f90:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002fa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3740      	adds	r7, #64	@ 0x40
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	00f42400 	.word	0x00f42400
 8002fc8:	017d7840 	.word	0x017d7840

08002fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	@ (8002fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000938 	.word	0x20000938

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fe8:	f7ff fff0 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0a9b      	lsrs	r3, r3, #10
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4903      	ldr	r1, [pc, #12]	@ (8003008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	08009d38 	.word	0x08009d38

0800300c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003010:	f7ff ffdc 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	0b5b      	lsrs	r3, r3, #13
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4903      	ldr	r1, [pc, #12]	@ (8003030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40023800 	.word	0x40023800
 8003030:	08009d38 	.word	0x08009d38

08003034 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e022      	b.n	800308c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d105      	bne.n	800305e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7fe f949 	bl	80012f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2203      	movs	r2, #3
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f814 	bl	8003094 <HAL_SD_InitCard>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e00a      	b.n	800308c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003094:	b5b0      	push	{r4, r5, r7, lr}
 8003096:	b08e      	sub	sp, #56	@ 0x38
 8003098:	af04      	add	r7, sp, #16
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80030b0:	2376      	movs	r3, #118	@ 0x76
 80030b2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681d      	ldr	r5, [r3, #0]
 80030b8:	466c      	mov	r4, sp
 80030ba:	f107 0314 	add.w	r3, r7, #20
 80030be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030c6:	f107 0308 	add.w	r3, r7, #8
 80030ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030cc:	4628      	mov	r0, r5
 80030ce:	f002 f9a9 	bl	8005424 <SDIO_Init>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80030d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e04f      	b.n	8003184 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80030e4:	4b29      	ldr	r3, [pc, #164]	@ (800318c <HAL_SD_InitCard+0xf8>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 f9e1 	bl	80054b6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80030f4:	4b25      	ldr	r3, [pc, #148]	@ (800318c <HAL_SD_InitCard+0xf8>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80030fa:	2002      	movs	r0, #2
 80030fc:	f7fe fca0 	bl	8001a40 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 ff6b 	bl	8003fdc <SD_PowerON>
 8003106:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e02e      	b.n	8003184 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fe8a 	bl	8003e40 <SD_InitCard>
 800312c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e01b      	b.n	8003184 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003154:	4618      	mov	r0, r3
 8003156:	f002 fa40 	bl	80055da <SDMMC_CmdBlockLength>
 800315a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00f      	beq.n	8003182 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a0a      	ldr	r2, [pc, #40]	@ (8003190 <HAL_SD_InitCard+0xfc>)
 8003168:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3728      	adds	r7, #40	@ 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bdb0      	pop	{r4, r5, r7, pc}
 800318c:	422580a0 	.word	0x422580a0
 8003190:	004005ff 	.word	0x004005ff

08003194 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08c      	sub	sp, #48	@ 0x30
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0c0      	b.n	800333e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	f040 80b9 	bne.w	800333c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80031d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	441a      	add	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031da:	429a      	cmp	r2, r3
 80031dc:	d907      	bls.n	80031ee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0a7      	b.n	800333e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2203      	movs	r2, #3
 80031f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	4a4c      	ldr	r2, [pc, #304]	@ (8003348 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003218:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	4a4b      	ldr	r2, [pc, #300]	@ (800334c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003220:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	2200      	movs	r2, #0
 8003228:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3380      	adds	r3, #128	@ 0x80
 8003258:	4619      	mov	r1, r3
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	025b      	lsls	r3, r3, #9
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	f7fe fdd1 	bl	8001e08 <HAL_DMA_Start_IT>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d017      	beq.n	800329c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800327a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a33      	ldr	r2, [pc, #204]	@ (8003350 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003282:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e050      	b.n	800333e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800329c:	4b2d      	ldr	r3, [pc, #180]	@ (8003354 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d002      	beq.n	80032b0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80032aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ac:	025b      	lsls	r3, r3, #9
 80032ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032b0:	f04f 33ff 	mov.w	r3, #4294967295
 80032b4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	025b      	lsls	r3, r3, #9
 80032ba:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032bc:	2390      	movs	r3, #144	@ 0x90
 80032be:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80032c0:	2302      	movs	r3, #2
 80032c2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80032c8:	2301      	movs	r3, #1
 80032ca:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f107 0210 	add.w	r2, r7, #16
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 f953 	bl	8005582 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d90a      	bls.n	80032f8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2282      	movs	r2, #130	@ 0x82
 80032e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032ee:	4618      	mov	r0, r3
 80032f0:	f002 f9b7 	bl	8005662 <SDMMC_CmdReadMultiBlock>
 80032f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80032f6:	e009      	b.n	800330c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2281      	movs	r2, #129	@ 0x81
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003304:	4618      	mov	r0, r3
 8003306:	f002 f98a 	bl	800561e <SDMMC_CmdReadSingleBlock>
 800330a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800330c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d012      	beq.n	8003338 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a0e      	ldr	r2, [pc, #56]	@ (8003350 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003318:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800331e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e002      	b.n	800333e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e000      	b.n	800333e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	3730      	adds	r7, #48	@ 0x30
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	08003c4f 	.word	0x08003c4f
 800334c:	08003cc1 	.word	0x08003cc1
 8003350:	004005ff 	.word	0x004005ff
 8003354:	4225858c 	.word	0x4225858c

08003358 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08c      	sub	sp, #48	@ 0x30
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d107      	bne.n	8003380 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003374:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0c5      	b.n	800350c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	f040 80be 	bne.w	800350a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	441a      	add	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339e:	429a      	cmp	r2, r3
 80033a0:	d907      	bls.n	80033b2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0ac      	b.n	800350c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2203      	movs	r2, #3
 80033b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2200      	movs	r2, #0
 80033c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033da:	4a4e      	ldr	r2, [pc, #312]	@ (8003514 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80033dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e2:	4a4d      	ldr	r2, [pc, #308]	@ (8003518 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80033e4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ea:	2200      	movs	r2, #0
 80033ec:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d002      	beq.n	80033fc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80033f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f8:	025b      	lsls	r3, r3, #9
 80033fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d90a      	bls.n	8003418 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	22a0      	movs	r2, #160	@ 0xa0
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800340e:	4618      	mov	r0, r3
 8003410:	f002 f96b 	bl	80056ea <SDMMC_CmdWriteMultiBlock>
 8003414:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003416:	e009      	b.n	800342c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2290      	movs	r2, #144	@ 0x90
 800341c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003424:	4618      	mov	r0, r3
 8003426:	f002 f93e 	bl	80056a6 <SDMMC_CmdWriteSingleBlock>
 800342a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800342c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d012      	beq.n	8003458 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a39      	ldr	r2, [pc, #228]	@ (800351c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003438:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800343e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003440:	431a      	orrs	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e059      	b.n	800350c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003458:	4b31      	ldr	r3, [pc, #196]	@ (8003520 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003462:	2240      	movs	r2, #64	@ 0x40
 8003464:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3380      	adds	r3, #128	@ 0x80
 800348e:	461a      	mov	r2, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	025b      	lsls	r3, r3, #9
 8003494:	089b      	lsrs	r3, r3, #2
 8003496:	f7fe fcb7 	bl	8001e08 <HAL_DMA_Start_IT>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01c      	beq.n	80034da <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 80034ae:	f023 0302 	bic.w	r3, r3, #2
 80034b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a18      	ldr	r2, [pc, #96]	@ (800351c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80034ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e018      	b.n	800350c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	025b      	lsls	r3, r3, #9
 80034e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80034e6:	2390      	movs	r3, #144	@ 0x90
 80034e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80034f2:	2301      	movs	r3, #1
 80034f4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f107 0210 	add.w	r2, r7, #16
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f002 f83e 	bl	8005582 <SDIO_ConfigData>

      return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e000      	b.n	800350c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800350a:	2302      	movs	r3, #2
  }
}
 800350c:	4618      	mov	r0, r3
 800350e:	3730      	adds	r7, #48	@ 0x30
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	08003c25 	.word	0x08003c25
 8003518:	08003cc1 	.word	0x08003cc1
 800351c:	004005ff 	.word	0x004005ff
 8003520:	4225858c 	.word	0x4225858c

08003524 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003530:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_SD_IRQHandler+0x2e>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fdfc 	bl	8004148 <SD_Read_IT>
 8003550:	e165      	b.n	800381e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 808f 	beq.w	8003680 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800356a:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 800357a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800357e:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d039      	beq.n	800360e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d104      	bne.n	80035ae <HAL_SD_IRQHandler+0x8a>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d011      	beq.n	80035d2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 f8bc 	bl	8005730 <SDMMC_CmdStopTransfer>
 80035b8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f92f 	bl	8003830 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80035da:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d104      	bne.n	80035fe <HAL_SD_IRQHandler+0xda>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f002 fcda 	bl	8005fb8 <HAL_SD_RxCpltCallback>
 8003604:	e10b      	b.n	800381e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f002 fccc 	bl	8005fa4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800360c:	e107      	b.n	800381e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8102 	beq.w	800381e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d011      	beq.n	8003648 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f002 f881 	bl	8005730 <SDMMC_CmdStopTransfer>
 800362e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8f4 	bl	8003830 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 80e5 	bne.w	800381e <HAL_SD_IRQHandler+0x2fa>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 80df 	bne.w	800381e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0208 	bic.w	r2, r2, #8
 800366e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f002 fc93 	bl	8005fa4 <HAL_SD_TxCpltCallback>
}
 800367e:	e0ce      	b.n	800381e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_SD_IRQHandler+0x17c>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fda6 	bl	80041ea <SD_Write_IT>
 800369e:	e0be      	b.n	800381e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036a6:	f240 233a 	movw	r3, #570	@ 0x23a
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80b6 	beq.w	800381e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c4:	f043 0202 	orr.w	r2, r3, #2
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036de:	f043 0208 	orr.w	r2, r3, #8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f8:	f043 0220 	orr.w	r2, r3, #32
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	f043 0210 	orr.w	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	f043 0208 	orr.w	r2, r3, #8
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f240 723a 	movw	r2, #1850	@ 0x73a
 800373c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 800374c:	f023 0302 	bic.w	r3, r3, #2
 8003750:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f001 ffea 	bl	8005730 <SDMMC_CmdStopTransfer>
 800375c:	4602      	mov	r2, r0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f855 	bl	8003830 <HAL_SD_ErrorCallback>
}
 8003786:	e04a      	b.n	800381e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378e:	2b00      	cmp	r3, #0
 8003790:	d045      	beq.n	800381e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b00      	cmp	r3, #0
 800379a:	d104      	bne.n	80037a6 <HAL_SD_IRQHandler+0x282>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d011      	beq.n	80037ca <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003828 <HAL_SD_IRQHandler+0x304>)
 80037ac:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fb80 	bl	8001eb8 <HAL_DMA_Abort_IT>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d02f      	beq.n	800381e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 face 	bl	8003d64 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80037c8:	e029      	b.n	800381e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <HAL_SD_IRQHandler+0x2ba>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d011      	beq.n	8003802 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	4a12      	ldr	r2, [pc, #72]	@ (800382c <HAL_SD_IRQHandler+0x308>)
 80037e4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe fb64 	bl	8001eb8 <HAL_DMA_Abort_IT>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d013      	beq.n	800381e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fae9 	bl	8003dd2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003800:	e00d      	b.n	800381e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f002 fbba 	bl	8005f90 <HAL_SD_AbortCallback>
}
 800381c:	e7ff      	b.n	800381e <HAL_SD_IRQHandler+0x2fa>
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	08003d65 	.word	0x08003d65
 800382c:	08003dd3 	.word	0x08003dd3

08003830 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003852:	0f9b      	lsrs	r3, r3, #30
 8003854:	b2da      	uxtb	r2, r3
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800385e:	0e9b      	lsrs	r3, r3, #26
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	b2da      	uxtb	r2, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003870:	0e1b      	lsrs	r3, r3, #24
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	b2da      	uxtb	r2, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003882:	0c1b      	lsrs	r3, r3, #16
 8003884:	b2da      	uxtb	r2, r3
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	b2da      	uxtb	r2, r3
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800389a:	b2da      	uxtb	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038a4:	0d1b      	lsrs	r3, r3, #20
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038c2:	0bdb      	lsrs	r3, r3, #15
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d4:	0b9b      	lsrs	r3, r3, #14
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038e6:	0b5b      	lsrs	r3, r3, #13
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038f8:	0b1b      	lsrs	r3, r3, #12
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	b2da      	uxtb	r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2200      	movs	r2, #0
 800390a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003910:	2b00      	cmp	r3, #0
 8003912:	d163      	bne.n	80039dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003918:	009a      	lsls	r2, r3, #2
 800391a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800391e:	4013      	ands	r3, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003924:	0f92      	lsrs	r2, r2, #30
 8003926:	431a      	orrs	r2, r3
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003930:	0edb      	lsrs	r3, r3, #27
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	b2da      	uxtb	r2, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003942:	0e1b      	lsrs	r3, r3, #24
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	b2da      	uxtb	r2, r3
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003954:	0d5b      	lsrs	r3, r3, #21
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	b2da      	uxtb	r2, r3
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003966:	0c9b      	lsrs	r3, r3, #18
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	b2da      	uxtb	r2, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003978:	0bdb      	lsrs	r3, r3, #15
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	b2da      	uxtb	r2, r3
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	7e1b      	ldrb	r3, [r3, #24]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	3302      	adds	r3, #2
 800399c:	2201      	movs	r2, #1
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80039a6:	fb03 f202 	mul.w	r2, r3, r2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	7a1b      	ldrb	r3, [r3, #8]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	2201      	movs	r2, #1
 80039ba:	409a      	lsls	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80039c8:	0a52      	lsrs	r2, r2, #9
 80039ca:	fb03 f202 	mul.w	r2, r3, r2
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80039da:	e031      	b.n	8003a40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d11d      	bne.n	8003a20 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039f2:	0c1b      	lsrs	r3, r3, #16
 80039f4:	431a      	orrs	r2, r3
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	3301      	adds	r3, #1
 8003a00:	029a      	lsls	r2, r3, #10
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a14:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a1e:	e00f      	b.n	8003a40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a58      	ldr	r2, [pc, #352]	@ (8003b88 <HAL_SD_GetCardCSD+0x344>)
 8003a26:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e09d      	b.n	8003b7c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a44:	0b9b      	lsrs	r3, r3, #14
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a56:	09db      	lsrs	r3, r3, #7
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a78:	0fdb      	lsrs	r3, r3, #31
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a84:	0f5b      	lsrs	r3, r3, #29
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a96:	0e9b      	lsrs	r3, r3, #26
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa8:	0d9b      	lsrs	r3, r3, #22
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aba:	0d5b      	lsrs	r3, r3, #21
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aea:	0bdb      	lsrs	r3, r3, #15
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afe:	0b9b      	lsrs	r3, r3, #14
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b12:	0b5b      	lsrs	r3, r3, #13
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b26:	0b1b      	lsrs	r3, r3, #12
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3a:	0a9b      	lsrs	r3, r3, #10
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	004005ff 	.word	0x004005ff

08003b8c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003bf0:	f107 030c 	add.w	r3, r7, #12
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fa7e 	bl	80040f8 <SD_SendStatus>
 8003bfc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	0a5b      	lsrs	r3, r3, #9
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003c1a:	693b      	ldr	r3, [r7, #16]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c40:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	2b82      	cmp	r3, #130	@ 0x82
 8003c62:	d111      	bne.n	8003c88 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 fd61 	bl	8005730 <SDMMC_CmdStopTransfer>
 8003c6e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f7ff fdd4 	bl	8003830 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0208 	bic.w	r2, r2, #8
 8003c96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003ca0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f002 f981 	bl	8005fb8 <HAL_SD_RxCpltCallback>
#endif
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ccc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fe fa9e 	bl	8002210 <HAL_DMA_GetError>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d03e      	beq.n	8003d58 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d002      	beq.n	8003cf6 <SD_DMAError+0x36>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d12d      	bne.n	8003d52 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a19      	ldr	r2, [pc, #100]	@ (8003d60 <SD_DMAError+0xa0>)
 8003cfc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8003d0c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d12:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003d1a:	6978      	ldr	r0, [r7, #20]
 8003d1c:	f7ff ff62 	bl	8003be4 <HAL_SD_GetCardState>
 8003d20:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b06      	cmp	r3, #6
 8003d26:	d002      	beq.n	8003d2e <SD_DMAError+0x6e>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d10a      	bne.n	8003d44 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 fcfc 	bl	8005730 <SDMMC_CmdStopTransfer>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003d52:	6978      	ldr	r0, [r7, #20]
 8003d54:	f7ff fd6c 	bl	8003830 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	004005ff 	.word	0x004005ff

08003d64 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d70:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003d7a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f7ff ff31 	bl	8003be4 <HAL_SD_GetCardState>
 8003d82:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b06      	cmp	r3, #6
 8003d96:	d002      	beq.n	8003d9e <SD_DMATxAbort+0x3a>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b05      	cmp	r3, #5
 8003d9c:	d10a      	bne.n	8003db4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 fcc4 	bl	8005730 <SDMMC_CmdStopTransfer>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dae:	431a      	orrs	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d103      	bne.n	8003dc4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f002 f8e7 	bl	8005f90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003dc2:	e002      	b.n	8003dca <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7ff fd33 	bl	8003830 <HAL_SD_ErrorCallback>
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dde:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003de8:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff fefa 	bl	8003be4 <HAL_SD_GetCardState>
 8003df0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b06      	cmp	r3, #6
 8003e04:	d002      	beq.n	8003e0c <SD_DMARxAbort+0x3a>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b05      	cmp	r3, #5
 8003e0a:	d10a      	bne.n	8003e22 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 fc8d 	bl	8005730 <SDMMC_CmdStopTransfer>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d103      	bne.n	8003e32 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f002 f8b0 	bl	8005f90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003e30:	e002      	b.n	8003e38 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff fcfc 	bl	8003830 <HAL_SD_ErrorCallback>
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e40:	b5b0      	push	{r4, r5, r7, lr}
 8003e42:	b094      	sub	sp, #80	@ 0x50
 8003e44:	af04      	add	r7, sp, #16
 8003e46:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f001 fb3e 	bl	80054d2 <SDIO_GetPowerState>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e5c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003e60:	e0b8      	b.n	8003fd4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d02f      	beq.n	8003eca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f001 fd25 	bl	80058be <SDMMC_CmdSendCID>
 8003e74:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <SD_InitCard+0x40>
    {
      return errorstate;
 8003e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7e:	e0a9      	b.n	8003fd4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 fb68 	bl	800555c <SDIO_GetResponse>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2104      	movs	r1, #4
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 fb5f 	bl	800555c <SDIO_GetResponse>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2108      	movs	r1, #8
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 fb56 	bl	800555c <SDIO_GetResponse>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	210c      	movs	r1, #12
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f001 fb4d 	bl	800555c <SDIO_GetResponse>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d00d      	beq.n	8003eee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f107 020e 	add.w	r2, r7, #14
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f001 fd2b 	bl	8005938 <SDMMC_CmdSetRelAdd>
 8003ee2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <SD_InitCard+0xae>
    {
      return errorstate;
 8003eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eec:	e072      	b.n	8003fd4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d036      	beq.n	8003f64 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003ef6:	89fb      	ldrh	r3, [r7, #14]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f06:	041b      	lsls	r3, r3, #16
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f001 fcf5 	bl	80058fa <SDMMC_CmdSendCSD>
 8003f10:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f1a:	e05b      	b.n	8003fd4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f001 fb1a 	bl	800555c <SDIO_GetResponse>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2104      	movs	r1, #4
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 fb11 	bl	800555c <SDIO_GetResponse>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2108      	movs	r1, #8
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 fb08 	bl	800555c <SDIO_GetResponse>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	210c      	movs	r1, #12
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 faff 	bl	800555c <SDIO_GetResponse>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2104      	movs	r1, #4
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 faf6 	bl	800555c <SDIO_GetResponse>
 8003f70:	4603      	mov	r3, r0
 8003f72:	0d1a      	lsrs	r2, r3, #20
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003f78:	f107 0310 	add.w	r3, r7, #16
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fc60 	bl	8003844 <HAL_SD_GetCardCSD>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003f8e:	e021      	b.n	8003fd4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6819      	ldr	r1, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	461c      	mov	r4, r3
 8003f9e:	4615      	mov	r5, r2
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	462b      	mov	r3, r5
 8003fa4:	4608      	mov	r0, r1
 8003fa6:	f001 fbe5 	bl	8005774 <SDMMC_CmdSelDesel>
 8003faa:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <SD_InitCard+0x176>
  {
    return errorstate;
 8003fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fb4:	e00e      	b.n	8003fd4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681d      	ldr	r5, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	466c      	mov	r4, sp
 8003fbe:	f103 0210 	add.w	r2, r3, #16
 8003fc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fc8:	3304      	adds	r3, #4
 8003fca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fcc:	4628      	mov	r0, r5
 8003fce:	f001 fa29 	bl	8005424 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3740      	adds	r7, #64	@ 0x40
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bdb0      	pop	{r4, r5, r7, pc}

08003fdc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 fbe0 	bl	80057ba <SDMMC_CmdGoIdleState>
 8003ffa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	e072      	b.n	80040ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f001 fbf3 	bl	80057f6 <SDMMC_CmdOperCond>
 8004010:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f001 fbc9 	bl	80057ba <SDMMC_CmdGoIdleState>
 8004028:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d004      	beq.n	800403a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	e05b      	b.n	80040ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800403e:	2b01      	cmp	r3, #1
 8004040:	d137      	bne.n	80040b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f001 fbf3 	bl	8005834 <SDMMC_CmdAppCommand>
 800404e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d02d      	beq.n	80040b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004056:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800405a:	e047      	b.n	80040ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f001 fbe6 	bl	8005834 <SDMMC_CmdAppCommand>
 8004068:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <SD_PowerON+0x98>
    {
      return errorstate;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	e03b      	b.n	80040ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	491e      	ldr	r1, [pc, #120]	@ (80040f4 <SD_PowerON+0x118>)
 800407a:	4618      	mov	r0, r3
 800407c:	f001 fbfc 	bl	8005878 <SDMMC_CmdAppOperCommand>
 8004080:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004088:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800408c:	e02e      	b.n	80040ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f001 fa61 	bl	800555c <SDIO_GetResponse>
 800409a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	0fdb      	lsrs	r3, r3, #31
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <SD_PowerON+0xcc>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <SD_PowerON+0xce>
 80040a8:	2300      	movs	r3, #0
 80040aa:	613b      	str	r3, [r7, #16]

    count++;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	3301      	adds	r3, #1
 80040b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d802      	bhi.n	80040c2 <SD_PowerON+0xe6>
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0cc      	beq.n	800405c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d902      	bls.n	80040d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80040cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040d0:	e00c      	b.n	80040ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44
 80040e2:	e002      	b.n	80040ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	c1100000 	.word	0xc1100000

080040f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d102      	bne.n	800410e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004108:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800410c:	e018      	b.n	8004140 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f001 fc2d 	bl	800597a <SDMMC_CmdSendStatus>
 8004120:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	e009      	b.n	8004140 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2100      	movs	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f001 fa12 	bl	800555c <SDIO_GetResponse>
 8004138:	4602      	mov	r2, r0
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d03f      	beq.n	80041e2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	e033      	b.n	80041d0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f001 f984 	bl	800547a <SDIO_ReadFIFO>
 8004172:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3301      	adds	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	3b01      	subs	r3, #1
 8004186:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	0a1b      	lsrs	r3, r3, #8
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3301      	adds	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	3b01      	subs	r3, #1
 800419c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3301      	adds	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	0e1b      	lsrs	r3, r3, #24
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3301      	adds	r3, #1
 80041c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	3301      	adds	r3, #1
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b07      	cmp	r3, #7
 80041d4:	d9c8      	bls.n	8004168 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80041e2:	bf00      	nop
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b086      	sub	sp, #24
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d043      	beq.n	800428c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	e037      	b.n	800427a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3301      	adds	r3, #1
 8004214:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	3b01      	subs	r3, #1
 800421a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	021a      	lsls	r2, r3, #8
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4313      	orrs	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3301      	adds	r3, #1
 800422c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3b01      	subs	r3, #1
 8004232:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	041a      	lsls	r2, r3, #16
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4313      	orrs	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3301      	adds	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	3b01      	subs	r3, #1
 800424a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	061a      	lsls	r2, r3, #24
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4313      	orrs	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3301      	adds	r3, #1
 800425c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	3b01      	subs	r3, #1
 8004262:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f107 0208 	add.w	r2, r7, #8
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f001 f910 	bl	8005494 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	3301      	adds	r3, #1
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b07      	cmp	r3, #7
 800427e:	d9c4      	bls.n	800420a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800428c:	bf00      	nop
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07b      	b.n	800439e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d108      	bne.n	80042c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042b6:	d009      	beq.n	80042cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	61da      	str	r2, [r3, #28]
 80042be:	e005      	b.n	80042cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd f928 	bl	800153c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004302:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004350:	ea42 0103 	orr.w	r1, r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	f003 0104 	and.w	r1, r3, #4
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	f003 0210 	and.w	r2, r3, #16
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800438c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b088      	sub	sp, #32
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	603b      	str	r3, [r7, #0]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_SPI_Transmit+0x22>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e12d      	b.n	8004624 <HAL_SPI_Transmit+0x27e>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043d0:	f7fd fb2a 	bl	8001a28 <HAL_GetTick>
 80043d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043d6:	88fb      	ldrh	r3, [r7, #6]
 80043d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d002      	beq.n	80043ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043e6:	2302      	movs	r3, #2
 80043e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043ea:	e116      	b.n	800461a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_SPI_Transmit+0x52>
 80043f2:	88fb      	ldrh	r3, [r7, #6]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043fc:	e10d      	b.n	800461a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2203      	movs	r2, #3
 8004402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	88fa      	ldrh	r2, [r7, #6]
 8004416:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	88fa      	ldrh	r2, [r7, #6]
 800441c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004444:	d10f      	bne.n	8004466 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004454:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004464:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004470:	2b40      	cmp	r3, #64	@ 0x40
 8004472:	d007      	beq.n	8004484 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004482:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800448c:	d14f      	bne.n	800452e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_SPI_Transmit+0xf6>
 8004496:	8afb      	ldrh	r3, [r7, #22]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d142      	bne.n	8004522 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a0:	881a      	ldrh	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ac:	1c9a      	adds	r2, r3, #2
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044c0:	e02f      	b.n	8004522 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d112      	bne.n	80044f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d4:	881a      	ldrh	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e0:	1c9a      	adds	r2, r3, #2
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80044f4:	e015      	b.n	8004522 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044f6:	f7fd fa97 	bl	8001a28 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d803      	bhi.n	800450e <HAL_SPI_Transmit+0x168>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d102      	bne.n	8004514 <HAL_SPI_Transmit+0x16e>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d106      	bne.n	8004522 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004520:	e07b      	b.n	800461a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1ca      	bne.n	80044c2 <HAL_SPI_Transmit+0x11c>
 800452c:	e050      	b.n	80045d0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_SPI_Transmit+0x196>
 8004536:	8afb      	ldrh	r3, [r7, #22]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d144      	bne.n	80045c6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	330c      	adds	r3, #12
 8004546:	7812      	ldrb	r2, [r2, #0]
 8004548:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004562:	e030      	b.n	80045c6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b02      	cmp	r3, #2
 8004570:	d113      	bne.n	800459a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	330c      	adds	r3, #12
 800457c:	7812      	ldrb	r2, [r2, #0]
 800457e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004598:	e015      	b.n	80045c6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800459a:	f7fd fa45 	bl	8001a28 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d803      	bhi.n	80045b2 <HAL_SPI_Transmit+0x20c>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b0:	d102      	bne.n	80045b8 <HAL_SPI_Transmit+0x212>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80045c4:	e029      	b.n	800461a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1c9      	bne.n	8004564 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f8bf 	bl	8004758 <SPI_EndRxTxTransaction>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e003      	b.n	800461a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004622:	7ffb      	ldrb	r3, [r7, #31]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800463a:	b2db      	uxtb	r3, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004658:	f7fd f9e6 	bl	8001a28 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	4413      	add	r3, r2
 8004666:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004668:	f7fd f9de 	bl	8001a28 <HAL_GetTick>
 800466c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800466e:	4b39      	ldr	r3, [pc, #228]	@ (8004754 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	015b      	lsls	r3, r3, #5
 8004674:	0d1b      	lsrs	r3, r3, #20
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	fb02 f303 	mul.w	r3, r2, r3
 800467c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800467e:	e054      	b.n	800472a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004686:	d050      	beq.n	800472a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004688:	f7fd f9ce 	bl	8001a28 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	429a      	cmp	r2, r3
 8004696:	d902      	bls.n	800469e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d13d      	bne.n	800471a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80046ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046b6:	d111      	bne.n	80046dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046c0:	d004      	beq.n	80046cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ca:	d107      	bne.n	80046dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046e4:	d10f      	bne.n	8004706 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004704:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e017      	b.n	800474a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	3b01      	subs	r3, #1
 8004728:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4013      	ands	r3, r2
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	bf0c      	ite	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	2300      	movne	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	429a      	cmp	r2, r3
 8004746:	d19b      	bne.n	8004680 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20000938 	.word	0x20000938

08004758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2201      	movs	r2, #1
 800476c:	2102      	movs	r1, #2
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff ff6a 	bl	8004648 <SPI_WaitFlagStateUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477e:	f043 0220 	orr.w	r2, r3, #32
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e032      	b.n	80047f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800478a:	4b1b      	ldr	r3, [pc, #108]	@ (80047f8 <SPI_EndRxTxTransaction+0xa0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1b      	ldr	r2, [pc, #108]	@ (80047fc <SPI_EndRxTxTransaction+0xa4>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	0d5b      	lsrs	r3, r3, #21
 8004796:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047a8:	d112      	bne.n	80047d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2200      	movs	r2, #0
 80047b2:	2180      	movs	r1, #128	@ 0x80
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7ff ff47 	bl	8004648 <SPI_WaitFlagStateUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d016      	beq.n	80047ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e00f      	b.n	80047f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	3b01      	subs	r3, #1
 80047da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e6:	2b80      	cmp	r3, #128	@ 0x80
 80047e8:	d0f2      	beq.n	80047d0 <SPI_EndRxTxTransaction+0x78>
 80047ea:	e000      	b.n	80047ee <SPI_EndRxTxTransaction+0x96>
        break;
 80047ec:	bf00      	nop
  }

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000938 	.word	0x20000938
 80047fc:	165e9f81 	.word	0x165e9f81

08004800 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e042      	b.n	8004898 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fc fff0 	bl	800180c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2224      	movs	r2, #36	@ 0x24
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004842:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fb79 	bl	8004f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695a      	ldr	r2, [r3, #20]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004868:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004878:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	@ 0x28
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	4613      	mov	r3, r2
 80048ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d175      	bne.n	80049ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <HAL_UART_Transmit+0x2c>
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e06e      	b.n	80049ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2221      	movs	r2, #33	@ 0x21
 80048da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048de:	f7fd f8a3 	bl	8001a28 <HAL_GetTick>
 80048e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f8:	d108      	bne.n	800490c <HAL_UART_Transmit+0x6c>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d104      	bne.n	800490c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004902:	2300      	movs	r3, #0
 8004904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	e003      	b.n	8004914 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004910:	2300      	movs	r3, #0
 8004912:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004914:	e02e      	b.n	8004974 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2200      	movs	r2, #0
 800491e:	2180      	movs	r1, #128	@ 0x80
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f98b 	bl	8004c3c <UART_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e03a      	b.n	80049ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800494c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	3302      	adds	r3, #2
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	e007      	b.n	8004966 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	781a      	ldrb	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	3301      	adds	r3, #1
 8004964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1cb      	bne.n	8004916 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2200      	movs	r2, #0
 8004986:	2140      	movs	r1, #64	@ 0x40
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f957 	bl	8004c3c <UART_WaitOnFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e006      	b.n	80049ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	e000      	b.n	80049ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
  }
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	4613      	mov	r3, r2
 80049c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d112      	bne.n	80049f6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HAL_UART_Receive_DMA+0x26>
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e00b      	b.n	80049f8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	461a      	mov	r2, r3
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f97f 	bl	8004cf0 <UART_Start_Receive_DMA>
 80049f2:	4603      	mov	r3, r0
 80049f4:	e000      	b.n	80049f8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
  }
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b09c      	sub	sp, #112	@ 0x70
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d172      	bne.n	8004b42 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004a5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a5e:	2200      	movs	r2, #0
 8004a60:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	330c      	adds	r3, #12
 8004a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004a82:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a84:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e5      	bne.n	8004a62 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3314      	adds	r3, #20
 8004a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	667b      	str	r3, [r7, #100]	@ 0x64
 8004aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3314      	adds	r3, #20
 8004ab4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004ab6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ab8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e5      	bne.n	8004a96 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3314      	adds	r3, #20
 8004ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	e853 3f00 	ldrex	r3, [r3]
 8004ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ae0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3314      	adds	r3, #20
 8004ae8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004aea:	633a      	str	r2, [r7, #48]	@ 0x30
 8004aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004af2:	e841 2300 	strex	r3, r2, [r1]
 8004af6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1e5      	bne.n	8004aca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004afe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d119      	bne.n	8004b42 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	330c      	adds	r3, #12
 8004b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f023 0310 	bic.w	r3, r3, #16
 8004b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	330c      	adds	r3, #12
 8004b2c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b2e:	61fa      	str	r2, [r7, #28]
 8004b30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	69b9      	ldr	r1, [r7, #24]
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e5      	bne.n	8004b0e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b44:	2200      	movs	r2, #0
 8004b46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d106      	bne.n	8004b5e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b54:	4619      	mov	r1, r3
 8004b56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004b58:	f7ff ff66 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b5c:	e002      	b.n	8004b64 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004b5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004b60:	f7fb fe26 	bl	80007b0 <HAL_UART_RxCpltCallback>
}
 8004b64:	bf00      	nop
 8004b66:	3770      	adds	r7, #112	@ 0x70
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d108      	bne.n	8004b9a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	4619      	mov	r1, r3
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f7ff ff48 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b98:	e002      	b.n	8004ba0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7ff ff30 	bl	8004a00 <HAL_UART_RxHalfCpltCallback>
}
 8004ba0:	bf00      	nop
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc4:	2b80      	cmp	r3, #128	@ 0x80
 8004bc6:	bf0c      	ite	eq
 8004bc8:	2301      	moveq	r3, #1
 8004bca:	2300      	movne	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b21      	cmp	r3, #33	@ 0x21
 8004bda:	d108      	bne.n	8004bee <UART_DMAError+0x46>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2200      	movs	r2, #0
 8004be6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004be8:	68b8      	ldr	r0, [r7, #8]
 8004bea:	f000 f91b 	bl	8004e24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf8:	2b40      	cmp	r3, #64	@ 0x40
 8004bfa:	bf0c      	ite	eq
 8004bfc:	2301      	moveq	r3, #1
 8004bfe:	2300      	movne	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b22      	cmp	r3, #34	@ 0x22
 8004c0e:	d108      	bne.n	8004c22 <UART_DMAError+0x7a>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004c1c:	68b8      	ldr	r0, [r7, #8]
 8004c1e:	f000 f929 	bl	8004e74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c26:	f043 0210 	orr.w	r2, r3, #16
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c2e:	68b8      	ldr	r0, [r7, #8]
 8004c30:	f7ff fef0 	bl	8004a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c4c:	e03b      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d037      	beq.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c56:	f7fc fee7 	bl	8001a28 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	6a3a      	ldr	r2, [r7, #32]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d302      	bcc.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e03a      	b.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d023      	beq.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b80      	cmp	r3, #128	@ 0x80
 8004c82:	d020      	beq.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b40      	cmp	r3, #64	@ 0x40
 8004c88:	d01d      	beq.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d116      	bne.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f8e0 	bl	8004e74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2208      	movs	r2, #8
 8004cb8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e00f      	b.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	bf0c      	ite	eq
 8004cd6:	2301      	moveq	r3, #1
 8004cd8:	2300      	movne	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d0b4      	beq.n	8004c4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b098      	sub	sp, #96	@ 0x60
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	88fa      	ldrh	r2, [r7, #6]
 8004d08:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2222      	movs	r2, #34	@ 0x22
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1c:	4a3e      	ldr	r2, [pc, #248]	@ (8004e18 <UART_Start_Receive_DMA+0x128>)
 8004d1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d24:	4a3d      	ldr	r2, [pc, #244]	@ (8004e1c <UART_Start_Receive_DMA+0x12c>)
 8004d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2c:	4a3c      	ldr	r2, [pc, #240]	@ (8004e20 <UART_Start_Receive_DMA+0x130>)
 8004d2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d34:	2200      	movs	r2, #0
 8004d36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d38:	f107 0308 	add.w	r3, r7, #8
 8004d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	f7fd f85a 	bl	8001e08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d019      	beq.n	8004da6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	330c      	adds	r3, #12
 8004d78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	330c      	adds	r3, #12
 8004d90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d92:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004d94:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004d98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e5      	bne.n	8004d72 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3314      	adds	r3, #20
 8004dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3314      	adds	r3, #20
 8004dc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004dc6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004dc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004dcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e5      	bne.n	8004da6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3314      	adds	r3, #20
 8004de0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	617b      	str	r3, [r7, #20]
   return(result);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004df0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3314      	adds	r3, #20
 8004df8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004dfa:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6a39      	ldr	r1, [r7, #32]
 8004e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e5      	bne.n	8004dda <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3760      	adds	r7, #96	@ 0x60
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	08004a41 	.word	0x08004a41
 8004e1c:	08004b6d 	.word	0x08004b6d
 8004e20:	08004ba9 	.word	0x08004ba9

08004e24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	@ 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004e42:	61fb      	str	r3, [r7, #28]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	61ba      	str	r2, [r7, #24]
 8004e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	6979      	ldr	r1, [r7, #20]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e5      	bne.n	8004e2c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004e68:	bf00      	nop
 8004e6a:	3724      	adds	r7, #36	@ 0x24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b095      	sub	sp, #84	@ 0x54
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	330c      	adds	r3, #12
 8004e82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e86:	e853 3f00 	ldrex	r3, [r3]
 8004e8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ea2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e5      	bne.n	8004e7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3314      	adds	r3, #20
 8004eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3314      	adds	r3, #20
 8004ece:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ed0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e5      	bne.n	8004eb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d119      	bne.n	8004f20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f023 0310 	bic.w	r3, r3, #16
 8004f02:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	330c      	adds	r3, #12
 8004f0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f0c:	61ba      	str	r2, [r7, #24]
 8004f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6979      	ldr	r1, [r7, #20]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e5      	bne.n	8004eec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f2e:	bf00      	nop
 8004f30:	3754      	adds	r7, #84	@ 0x54
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f40:	b0c0      	sub	sp, #256	@ 0x100
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f58:	68d9      	ldr	r1, [r3, #12]
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	ea40 0301 	orr.w	r3, r0, r1
 8004f64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f94:	f021 010c 	bic.w	r1, r1, #12
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb6:	6999      	ldr	r1, [r3, #24]
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	ea40 0301 	orr.w	r3, r0, r1
 8004fc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b8f      	ldr	r3, [pc, #572]	@ (8005208 <UART_SetConfig+0x2cc>)
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d005      	beq.n	8004fdc <UART_SetConfig+0xa0>
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800520c <UART_SetConfig+0x2d0>)
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d104      	bne.n	8004fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7fe f816 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8004fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004fe4:	e003      	b.n	8004fee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fe6:	f7fd fffd 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8004fea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ff8:	f040 810c 	bne.w	8005214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005000:	2200      	movs	r2, #0
 8005002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005006:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800500a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800500e:	4622      	mov	r2, r4
 8005010:	462b      	mov	r3, r5
 8005012:	1891      	adds	r1, r2, r2
 8005014:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005016:	415b      	adcs	r3, r3
 8005018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800501a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800501e:	4621      	mov	r1, r4
 8005020:	eb12 0801 	adds.w	r8, r2, r1
 8005024:	4629      	mov	r1, r5
 8005026:	eb43 0901 	adc.w	r9, r3, r1
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800503a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800503e:	4690      	mov	r8, r2
 8005040:	4699      	mov	r9, r3
 8005042:	4623      	mov	r3, r4
 8005044:	eb18 0303 	adds.w	r3, r8, r3
 8005048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800504c:	462b      	mov	r3, r5
 800504e:	eb49 0303 	adc.w	r3, r9, r3
 8005052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005062:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800506a:	460b      	mov	r3, r1
 800506c:	18db      	adds	r3, r3, r3
 800506e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005070:	4613      	mov	r3, r2
 8005072:	eb42 0303 	adc.w	r3, r2, r3
 8005076:	657b      	str	r3, [r7, #84]	@ 0x54
 8005078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800507c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005080:	f7fb f906 	bl	8000290 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4b61      	ldr	r3, [pc, #388]	@ (8005210 <UART_SetConfig+0x2d4>)
 800508a:	fba3 2302 	umull	r2, r3, r3, r2
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	011c      	lsls	r4, r3, #4
 8005092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005096:	2200      	movs	r2, #0
 8005098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800509c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80050ac:	415b      	adcs	r3, r3
 80050ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050b4:	4641      	mov	r1, r8
 80050b6:	eb12 0a01 	adds.w	sl, r2, r1
 80050ba:	4649      	mov	r1, r9
 80050bc:	eb43 0b01 	adc.w	fp, r3, r1
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050d4:	4692      	mov	sl, r2
 80050d6:	469b      	mov	fp, r3
 80050d8:	4643      	mov	r3, r8
 80050da:	eb1a 0303 	adds.w	r3, sl, r3
 80050de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050e2:	464b      	mov	r3, r9
 80050e4:	eb4b 0303 	adc.w	r3, fp, r3
 80050e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80050fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005100:	460b      	mov	r3, r1
 8005102:	18db      	adds	r3, r3, r3
 8005104:	643b      	str	r3, [r7, #64]	@ 0x40
 8005106:	4613      	mov	r3, r2
 8005108:	eb42 0303 	adc.w	r3, r2, r3
 800510c:	647b      	str	r3, [r7, #68]	@ 0x44
 800510e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005116:	f7fb f8bb 	bl	8000290 <__aeabi_uldivmod>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4611      	mov	r1, r2
 8005120:	4b3b      	ldr	r3, [pc, #236]	@ (8005210 <UART_SetConfig+0x2d4>)
 8005122:	fba3 2301 	umull	r2, r3, r3, r1
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	2264      	movs	r2, #100	@ 0x64
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	1acb      	subs	r3, r1, r3
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005136:	4b36      	ldr	r3, [pc, #216]	@ (8005210 <UART_SetConfig+0x2d4>)
 8005138:	fba3 2302 	umull	r2, r3, r3, r2
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005144:	441c      	add	r4, r3
 8005146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005150:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	1891      	adds	r1, r2, r2
 800515e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005160:	415b      	adcs	r3, r3
 8005162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005168:	4641      	mov	r1, r8
 800516a:	1851      	adds	r1, r2, r1
 800516c:	6339      	str	r1, [r7, #48]	@ 0x30
 800516e:	4649      	mov	r1, r9
 8005170:	414b      	adcs	r3, r1
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005180:	4659      	mov	r1, fp
 8005182:	00cb      	lsls	r3, r1, #3
 8005184:	4651      	mov	r1, sl
 8005186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518a:	4651      	mov	r1, sl
 800518c:	00ca      	lsls	r2, r1, #3
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	4603      	mov	r3, r0
 8005194:	4642      	mov	r2, r8
 8005196:	189b      	adds	r3, r3, r2
 8005198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800519c:	464b      	mov	r3, r9
 800519e:	460a      	mov	r2, r1
 80051a0:	eb42 0303 	adc.w	r3, r2, r3
 80051a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80051b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051bc:	460b      	mov	r3, r1
 80051be:	18db      	adds	r3, r3, r3
 80051c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c2:	4613      	mov	r3, r2
 80051c4:	eb42 0303 	adc.w	r3, r2, r3
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80051d2:	f7fb f85d 	bl	8000290 <__aeabi_uldivmod>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <UART_SetConfig+0x2d4>)
 80051dc:	fba3 1302 	umull	r1, r3, r3, r2
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	2164      	movs	r1, #100	@ 0x64
 80051e4:	fb01 f303 	mul.w	r3, r1, r3
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	3332      	adds	r3, #50	@ 0x32
 80051ee:	4a08      	ldr	r2, [pc, #32]	@ (8005210 <UART_SetConfig+0x2d4>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	f003 0207 	and.w	r2, r3, #7
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4422      	add	r2, r4
 8005202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005204:	e106      	b.n	8005414 <UART_SetConfig+0x4d8>
 8005206:	bf00      	nop
 8005208:	40011000 	.word	0x40011000
 800520c:	40011400 	.word	0x40011400
 8005210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005218:	2200      	movs	r2, #0
 800521a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800521e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005226:	4642      	mov	r2, r8
 8005228:	464b      	mov	r3, r9
 800522a:	1891      	adds	r1, r2, r2
 800522c:	6239      	str	r1, [r7, #32]
 800522e:	415b      	adcs	r3, r3
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
 8005232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005236:	4641      	mov	r1, r8
 8005238:	1854      	adds	r4, r2, r1
 800523a:	4649      	mov	r1, r9
 800523c:	eb43 0501 	adc.w	r5, r3, r1
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	00eb      	lsls	r3, r5, #3
 800524a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800524e:	00e2      	lsls	r2, r4, #3
 8005250:	4614      	mov	r4, r2
 8005252:	461d      	mov	r5, r3
 8005254:	4643      	mov	r3, r8
 8005256:	18e3      	adds	r3, r4, r3
 8005258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800525c:	464b      	mov	r3, r9
 800525e:	eb45 0303 	adc.w	r3, r5, r3
 8005262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005272:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005282:	4629      	mov	r1, r5
 8005284:	008b      	lsls	r3, r1, #2
 8005286:	4621      	mov	r1, r4
 8005288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800528c:	4621      	mov	r1, r4
 800528e:	008a      	lsls	r2, r1, #2
 8005290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005294:	f7fa fffc 	bl	8000290 <__aeabi_uldivmod>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4b60      	ldr	r3, [pc, #384]	@ (8005420 <UART_SetConfig+0x4e4>)
 800529e:	fba3 2302 	umull	r2, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	011c      	lsls	r4, r3, #4
 80052a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	1891      	adds	r1, r2, r2
 80052be:	61b9      	str	r1, [r7, #24]
 80052c0:	415b      	adcs	r3, r3
 80052c2:	61fb      	str	r3, [r7, #28]
 80052c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c8:	4641      	mov	r1, r8
 80052ca:	1851      	adds	r1, r2, r1
 80052cc:	6139      	str	r1, [r7, #16]
 80052ce:	4649      	mov	r1, r9
 80052d0:	414b      	adcs	r3, r1
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052e0:	4659      	mov	r1, fp
 80052e2:	00cb      	lsls	r3, r1, #3
 80052e4:	4651      	mov	r1, sl
 80052e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ea:	4651      	mov	r1, sl
 80052ec:	00ca      	lsls	r2, r1, #3
 80052ee:	4610      	mov	r0, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	4642      	mov	r2, r8
 80052f6:	189b      	adds	r3, r3, r2
 80052f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052fc:	464b      	mov	r3, r9
 80052fe:	460a      	mov	r2, r1
 8005300:	eb42 0303 	adc.w	r3, r2, r3
 8005304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005312:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005320:	4649      	mov	r1, r9
 8005322:	008b      	lsls	r3, r1, #2
 8005324:	4641      	mov	r1, r8
 8005326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800532a:	4641      	mov	r1, r8
 800532c:	008a      	lsls	r2, r1, #2
 800532e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005332:	f7fa ffad 	bl	8000290 <__aeabi_uldivmod>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4611      	mov	r1, r2
 800533c:	4b38      	ldr	r3, [pc, #224]	@ (8005420 <UART_SetConfig+0x4e4>)
 800533e:	fba3 2301 	umull	r2, r3, r3, r1
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2264      	movs	r2, #100	@ 0x64
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	1acb      	subs	r3, r1, r3
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	3332      	adds	r3, #50	@ 0x32
 8005350:	4a33      	ldr	r2, [pc, #204]	@ (8005420 <UART_SetConfig+0x4e4>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800535c:	441c      	add	r4, r3
 800535e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005362:	2200      	movs	r2, #0
 8005364:	673b      	str	r3, [r7, #112]	@ 0x70
 8005366:	677a      	str	r2, [r7, #116]	@ 0x74
 8005368:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	1891      	adds	r1, r2, r2
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	415b      	adcs	r3, r3
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800537c:	4641      	mov	r1, r8
 800537e:	1851      	adds	r1, r2, r1
 8005380:	6039      	str	r1, [r7, #0]
 8005382:	4649      	mov	r1, r9
 8005384:	414b      	adcs	r3, r1
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005394:	4659      	mov	r1, fp
 8005396:	00cb      	lsls	r3, r1, #3
 8005398:	4651      	mov	r1, sl
 800539a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539e:	4651      	mov	r1, sl
 80053a0:	00ca      	lsls	r2, r1, #3
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	4642      	mov	r2, r8
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053ae:	464b      	mov	r3, r9
 80053b0:	460a      	mov	r2, r1
 80053b2:	eb42 0303 	adc.w	r3, r2, r3
 80053b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80053c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80053d0:	4649      	mov	r1, r9
 80053d2:	008b      	lsls	r3, r1, #2
 80053d4:	4641      	mov	r1, r8
 80053d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053da:	4641      	mov	r1, r8
 80053dc:	008a      	lsls	r2, r1, #2
 80053de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80053e2:	f7fa ff55 	bl	8000290 <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005420 <UART_SetConfig+0x4e4>)
 80053ec:	fba3 1302 	umull	r1, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	2164      	movs	r1, #100	@ 0x64
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	3332      	adds	r3, #50	@ 0x32
 80053fe:	4a08      	ldr	r2, [pc, #32]	@ (8005420 <UART_SetConfig+0x4e4>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 020f 	and.w	r2, r3, #15
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4422      	add	r2, r4
 8005412:	609a      	str	r2, [r3, #8]
}
 8005414:	bf00      	nop
 8005416:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800541a:	46bd      	mov	sp, r7
 800541c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005420:	51eb851f 	.word	0x51eb851f

08005424 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005424:	b084      	sub	sp, #16
 8005426:	b480      	push	{r7}
 8005428:	b085      	sub	sp, #20
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	f107 001c 	add.w	r0, r7, #28
 8005432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800543a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800543c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800543e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005442:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005446:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800544a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800544c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800544e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800545e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	b004      	add	sp, #16
 8005478:	4770      	bx	lr

0800547a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2203      	movs	r2, #3
 80054c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0303 	and.w	r3, r3, #3
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800550c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005512:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005518:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005528:	f023 030f 	bic.w	r3, r3, #15
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	b2db      	uxtb	r3, r3
}
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3314      	adds	r3, #20
 800556a:	461a      	mov	r2, r3
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	4413      	add	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
}  
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80055a8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80055ae:	431a      	orrs	r2, r3
                       Data->DPSM);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80055b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0

}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b088      	sub	sp, #32
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80055e8:	2310      	movs	r3, #16
 80055ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055ec:	2340      	movs	r3, #64	@ 0x40
 80055ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055fa:	f107 0308 	add.w	r3, r7, #8
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff ff74 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800560a:	2110      	movs	r1, #16
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f9d7 	bl	80059c0 <SDMMC_GetCmdResp1>
 8005612:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005614:	69fb      	ldr	r3, [r7, #28]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b088      	sub	sp, #32
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800562c:	2311      	movs	r3, #17
 800562e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005630:	2340      	movs	r3, #64	@ 0x40
 8005632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005638:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800563c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800563e:	f107 0308 	add.w	r3, r7, #8
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff ff52 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800564a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800564e:	2111      	movs	r1, #17
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f9b5 	bl	80059c0 <SDMMC_GetCmdResp1>
 8005656:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005658:	69fb      	ldr	r3, [r7, #28]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3720      	adds	r7, #32
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b088      	sub	sp, #32
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005670:	2312      	movs	r3, #18
 8005672:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005674:	2340      	movs	r3, #64	@ 0x40
 8005676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800567c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005680:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005682:	f107 0308 	add.w	r3, r7, #8
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff ff30 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800568e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005692:	2112      	movs	r1, #18
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f993 	bl	80059c0 <SDMMC_GetCmdResp1>
 800569a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800569c:	69fb      	ldr	r3, [r7, #28]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b088      	sub	sp, #32
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80056b4:	2318      	movs	r3, #24
 80056b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056b8:	2340      	movs	r3, #64	@ 0x40
 80056ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056c6:	f107 0308 	add.w	r3, r7, #8
 80056ca:	4619      	mov	r1, r3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7ff ff0e 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80056d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d6:	2118      	movs	r1, #24
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f971 	bl	80059c0 <SDMMC_GetCmdResp1>
 80056de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056e0:	69fb      	ldr	r3, [r7, #28]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3720      	adds	r7, #32
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b088      	sub	sp, #32
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80056f8:	2319      	movs	r3, #25
 80056fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056fc:	2340      	movs	r3, #64	@ 0x40
 80056fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005708:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800570a:	f107 0308 	add.w	r3, r7, #8
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff feec 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800571a:	2119      	movs	r1, #25
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f94f 	bl	80059c0 <SDMMC_GetCmdResp1>
 8005722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005724:	69fb      	ldr	r3, [r7, #28]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800573c:	230c      	movs	r3, #12
 800573e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005740:	2340      	movs	r3, #64	@ 0x40
 8005742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005748:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800574c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800574e:	f107 0308 	add.w	r3, r7, #8
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff feca 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800575a:	4a05      	ldr	r2, [pc, #20]	@ (8005770 <SDMMC_CmdStopTransfer+0x40>)
 800575c:	210c      	movs	r1, #12
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f92e 	bl	80059c0 <SDMMC_GetCmdResp1>
 8005764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005766:	69fb      	ldr	r3, [r7, #28]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	05f5e100 	.word	0x05f5e100

08005774 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	@ 0x28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005784:	2307      	movs	r3, #7
 8005786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005788:	2340      	movs	r3, #64	@ 0x40
 800578a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800578c:	2300      	movs	r3, #0
 800578e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005790:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005794:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005796:	f107 0310 	add.w	r3, r7, #16
 800579a:	4619      	mov	r1, r3
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7ff fea6 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80057a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a6:	2107      	movs	r1, #7
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f909 	bl	80059c0 <SDMMC_GetCmdResp1>
 80057ae:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3728      	adds	r7, #40	@ 0x28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b088      	sub	sp, #32
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80057ca:	2300      	movs	r3, #0
 80057cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057ce:	2300      	movs	r3, #0
 80057d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057d8:	f107 0308 	add.w	r3, r7, #8
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff fe85 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fb23 	bl	8005e30 <SDMMC_GetCmdError>
 80057ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057ec:	69fb      	ldr	r3, [r7, #28]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3720      	adds	r7, #32
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b088      	sub	sp, #32
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80057fe:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005804:	2308      	movs	r3, #8
 8005806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005808:	2340      	movs	r3, #64	@ 0x40
 800580a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005810:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005814:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005816:	f107 0308 	add.w	r3, r7, #8
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff fe66 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fab6 	bl	8005d94 <SDMMC_GetCmdResp7>
 8005828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800582a:	69fb      	ldr	r3, [r7, #28]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3720      	adds	r7, #32
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005842:	2337      	movs	r3, #55	@ 0x37
 8005844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005846:	2340      	movs	r3, #64	@ 0x40
 8005848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800584e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005854:	f107 0308 	add.w	r3, r7, #8
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff fe47 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005864:	2137      	movs	r1, #55	@ 0x37
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f8aa 	bl	80059c0 <SDMMC_GetCmdResp1>
 800586c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800586e:	69fb      	ldr	r3, [r7, #28]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005888:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800588c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800588e:	2329      	movs	r3, #41	@ 0x29
 8005890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005892:	2340      	movs	r3, #64	@ 0x40
 8005894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800589a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800589e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058a0:	f107 0308 	add.w	r3, r7, #8
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff fe21 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f9bd 	bl	8005c2c <SDMMC_GetCmdResp3>
 80058b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058b4:	69fb      	ldr	r3, [r7, #28]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3720      	adds	r7, #32
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b088      	sub	sp, #32
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80058ca:	2302      	movs	r3, #2
 80058cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80058ce:	23c0      	movs	r3, #192	@ 0xc0
 80058d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058dc:	f107 0308 	add.w	r3, r7, #8
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fe03 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f957 	bl	8005b9c <SDMMC_GetCmdResp2>
 80058ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058f0:	69fb      	ldr	r3, [r7, #28]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b088      	sub	sp, #32
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005908:	2309      	movs	r3, #9
 800590a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800590c:	23c0      	movs	r3, #192	@ 0xc0
 800590e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005914:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005918:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800591a:	f107 0308 	add.w	r3, r7, #8
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff fde4 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f938 	bl	8005b9c <SDMMC_GetCmdResp2>
 800592c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800592e:	69fb      	ldr	r3, [r7, #28]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3720      	adds	r7, #32
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005946:	2303      	movs	r3, #3
 8005948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800594a:	2340      	movs	r3, #64	@ 0x40
 800594c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005956:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005958:	f107 0308 	add.w	r3, r7, #8
 800595c:	4619      	mov	r1, r3
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff fdc5 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	2103      	movs	r1, #3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f99d 	bl	8005ca8 <SDMMC_GetCmdResp6>
 800596e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005970:	69fb      	ldr	r3, [r7, #28]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b088      	sub	sp, #32
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005988:	230d      	movs	r3, #13
 800598a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800598c:	2340      	movs	r3, #64	@ 0x40
 800598e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005994:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005998:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800599a:	f107 0308 	add.w	r3, r7, #8
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff fda4 	bl	80054ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80059a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059aa:	210d      	movs	r1, #13
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f807 	bl	80059c0 <SDMMC_GetCmdResp1>
 80059b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059b4:	69fb      	ldr	r3, [r7, #28]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3720      	adds	r7, #32
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	460b      	mov	r3, r1
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80059ce:	4b70      	ldr	r3, [pc, #448]	@ (8005b90 <SDMMC_GetCmdResp1+0x1d0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a70      	ldr	r2, [pc, #448]	@ (8005b94 <SDMMC_GetCmdResp1+0x1d4>)
 80059d4:	fba2 2303 	umull	r2, r3, r2, r3
 80059d8:	0a5a      	lsrs	r2, r3, #9
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	fb02 f303 	mul.w	r3, r2, r3
 80059e0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	1e5a      	subs	r2, r3, #1
 80059e6:	61fa      	str	r2, [r7, #28]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80059f0:	e0c9      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059f6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0ef      	beq.n	80059e2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1ea      	bne.n	80059e2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a1e:	2304      	movs	r3, #4
 8005a20:	e0b1      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d004      	beq.n	8005a38 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0a6      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	22c5      	movs	r2, #197	@ 0xc5
 8005a3c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f7ff fd7f 	bl	8005542 <SDIO_GetCommandResponse>
 8005a44:	4603      	mov	r3, r0
 8005a46:	461a      	mov	r2, r3
 8005a48:	7afb      	ldrb	r3, [r7, #11]
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d001      	beq.n	8005a52 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e099      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005a52:	2100      	movs	r1, #0
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f7ff fd81 	bl	800555c <SDIO_GetResponse>
 8005a5a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4b4e      	ldr	r3, [pc, #312]	@ (8005b98 <SDMMC_GetCmdResp1+0x1d8>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e08d      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	da02      	bge.n	8005a76 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005a70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a74:	e087      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005a80:	2340      	movs	r3, #64	@ 0x40
 8005a82:	e080      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a8e:	2380      	movs	r3, #128	@ 0x80
 8005a90:	e079      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005aa0:	e071      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005aac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ab0:	e069      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ac0:	e061      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005acc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ad0:	e059      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ae0:	e051      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005aec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005af0:	e049      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005afc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005b00:	e041      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005b0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b10:	e039      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005b1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b20:	e031      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005b2c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005b30:	e029      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005b3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005b40:	e021      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005b4c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005b50:	e019      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005b5c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005b60:	e011      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005b6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005b70:	e009      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005b7c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005b80:	e001      	b.n	8005b86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000938 	.word	0x20000938
 8005b94:	10624dd3 	.word	0x10624dd3
 8005b98:	fdffe008 	.word	0xfdffe008

08005b9c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8005c24 <SDMMC_GetCmdResp2+0x88>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c28 <SDMMC_GetCmdResp2+0x8c>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	0a5b      	lsrs	r3, r3, #9
 8005bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bb4:	fb02 f303 	mul.w	r3, r2, r3
 8005bb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1e5a      	subs	r2, r3, #1
 8005bbe:	60fa      	str	r2, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d102      	bne.n	8005bca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bc4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005bc8:	e026      	b.n	8005c18 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0ef      	beq.n	8005bba <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1ea      	bne.n	8005bba <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2204      	movs	r2, #4
 8005bf4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bf6:	2304      	movs	r3, #4
 8005bf8:	e00e      	b.n	8005c18 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d004      	beq.n	8005c10 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e003      	b.n	8005c18 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	22c5      	movs	r2, #197	@ 0xc5
 8005c14:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	20000938 	.word	0x20000938
 8005c28:	10624dd3 	.word	0x10624dd3

08005c2c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c34:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca0 <SDMMC_GetCmdResp3+0x74>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a1a      	ldr	r2, [pc, #104]	@ (8005ca4 <SDMMC_GetCmdResp3+0x78>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	0a5b      	lsrs	r3, r3, #9
 8005c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c44:	fb02 f303 	mul.w	r3, r2, r3
 8005c48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	1e5a      	subs	r2, r3, #1
 8005c4e:	60fa      	str	r2, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c58:	e01b      	b.n	8005c92 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c5e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0ef      	beq.n	8005c4a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1ea      	bne.n	8005c4a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d004      	beq.n	8005c8a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2204      	movs	r2, #4
 8005c84:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c86:	2304      	movs	r3, #4
 8005c88:	e003      	b.n	8005c92 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	22c5      	movs	r2, #197	@ 0xc5
 8005c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	20000938 	.word	0x20000938
 8005ca4:	10624dd3 	.word	0x10624dd3

08005ca8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005cb6:	4b35      	ldr	r3, [pc, #212]	@ (8005d8c <SDMMC_GetCmdResp6+0xe4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a35      	ldr	r2, [pc, #212]	@ (8005d90 <SDMMC_GetCmdResp6+0xe8>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	0a5b      	lsrs	r3, r3, #9
 8005cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc6:	fb02 f303 	mul.w	r3, r2, r3
 8005cca:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	1e5a      	subs	r2, r3, #1
 8005cd0:	61fa      	str	r2, [r7, #28]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005cd6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005cda:	e052      	b.n	8005d82 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0ef      	beq.n	8005ccc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1ea      	bne.n	8005ccc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2204      	movs	r2, #4
 8005d06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d08:	2304      	movs	r3, #4
 8005d0a:	e03a      	b.n	8005d82 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d004      	beq.n	8005d22 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e02f      	b.n	8005d82 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f7ff fc0d 	bl	8005542 <SDIO_GetCommandResponse>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	7afb      	ldrb	r3, [r7, #11]
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d001      	beq.n	8005d36 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e025      	b.n	8005d82 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	22c5      	movs	r2, #197	@ 0xc5
 8005d3a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f7ff fc0c 	bl	800555c <SDIO_GetResponse>
 8005d44:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	0c1b      	lsrs	r3, r3, #16
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e011      	b.n	8005d82 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d6c:	e009      	b.n	8005d82 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d7c:	e001      	b.n	8005d82 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3720      	adds	r7, #32
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000938 	.word	0x20000938
 8005d90:	10624dd3 	.word	0x10624dd3

08005d94 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d9c:	4b22      	ldr	r3, [pc, #136]	@ (8005e28 <SDMMC_GetCmdResp7+0x94>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a22      	ldr	r2, [pc, #136]	@ (8005e2c <SDMMC_GetCmdResp7+0x98>)
 8005da2:	fba2 2303 	umull	r2, r3, r2, r3
 8005da6:	0a5b      	lsrs	r3, r3, #9
 8005da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dac:	fb02 f303 	mul.w	r3, r2, r3
 8005db0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1e5a      	subs	r2, r3, #1
 8005db6:	60fa      	str	r2, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005dbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005dc0:	e02c      	b.n	8005e1c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dc6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0ef      	beq.n	8005db2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1ea      	bne.n	8005db2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2204      	movs	r2, #4
 8005dec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005dee:	2304      	movs	r3, #4
 8005df0:	e014      	b.n	8005e1c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d004      	beq.n	8005e08 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e009      	b.n	8005e1c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2240      	movs	r2, #64	@ 0x40
 8005e18:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005e1a:	2300      	movs	r3, #0
  
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	20000938 	.word	0x20000938
 8005e2c:	10624dd3 	.word	0x10624dd3

08005e30 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e38:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <SDMMC_GetCmdError+0x50>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a11      	ldr	r2, [pc, #68]	@ (8005e84 <SDMMC_GetCmdError+0x54>)
 8005e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e42:	0a5b      	lsrs	r3, r3, #9
 8005e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e48:	fb02 f303 	mul.w	r3, r2, r3
 8005e4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1e5a      	subs	r2, r3, #1
 8005e52:	60fa      	str	r2, [r7, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d102      	bne.n	8005e5e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e5c:	e009      	b.n	8005e72 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0f1      	beq.n	8005e4e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	22c5      	movs	r2, #197	@ 0xc5
 8005e6e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	20000938 	.word	0x20000938
 8005e84:	10624dd3 	.word	0x10624dd3

08005e88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005e8c:	4904      	ldr	r1, [pc, #16]	@ (8005ea0 <MX_FATFS_Init+0x18>)
 8005e8e:	4805      	ldr	r0, [pc, #20]	@ (8005ea4 <MX_FATFS_Init+0x1c>)
 8005e90:	f003 f914 	bl	80090bc <FATFS_LinkDriver>
 8005e94:	4603      	mov	r3, r0
 8005e96:	461a      	mov	r2, r3
 8005e98:	4b03      	ldr	r3, [pc, #12]	@ (8005ea8 <MX_FATFS_Init+0x20>)
 8005e9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e9c:	bf00      	nop
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20000c10 	.word	0x20000c10
 8005ea4:	08009d48 	.word	0x08009d48
 8005ea8:	20000c0c 	.word	0x20000c0c

08005eac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005eb0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005ec6:	f000 f888 	bl	8005fda <BSP_SD_IsDetected>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d001      	beq.n	8005ed4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e005      	b.n	8005ee0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005ed4:	4804      	ldr	r0, [pc, #16]	@ (8005ee8 <BSP_SD_Init+0x2c>)
 8005ed6:	f7fd f8ad 	bl	8003034 <HAL_SD_Init>
 8005eda:	4603      	mov	r3, r0
 8005edc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005ede:	79fb      	ldrb	r3, [r7, #7]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	200009c0 	.word	0x200009c0

08005eec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	68f9      	ldr	r1, [r7, #12]
 8005f02:	4806      	ldr	r0, [pc, #24]	@ (8005f1c <BSP_SD_ReadBlocks_DMA+0x30>)
 8005f04:	f7fd f946 	bl	8003194 <HAL_SD_ReadBlocks_DMA>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	200009c0 	.word	0x200009c0

08005f20 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	68f9      	ldr	r1, [r7, #12]
 8005f36:	4806      	ldr	r0, [pc, #24]	@ (8005f50 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005f38:	f7fd fa0e 	bl	8003358 <HAL_SD_WriteBlocks_DMA>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	200009c0 	.word	0x200009c0

08005f54 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005f58:	4805      	ldr	r0, [pc, #20]	@ (8005f70 <BSP_SD_GetCardState+0x1c>)
 8005f5a:	f7fd fe43 	bl	8003be4 <HAL_SD_GetCardState>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	bf14      	ite	ne
 8005f64:	2301      	movne	r3, #1
 8005f66:	2300      	moveq	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	200009c0 	.word	0x200009c0

08005f74 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	4803      	ldr	r0, [pc, #12]	@ (8005f8c <BSP_SD_GetCardInfo+0x18>)
 8005f80:	f7fd fe04 	bl	8003b8c <HAL_SD_GetCardInfo>
}
 8005f84:	bf00      	nop
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	200009c0 	.word	0x200009c0

08005f90 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005f98:	f000 f818 	bl	8005fcc <BSP_SD_AbortCallback>
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005fac:	f000 f9a8 	bl	8006300 <BSP_SD_WriteCpltCallback>
}
 8005fb0:	bf00      	nop
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005fc0:	f000 f9aa 	bl	8006318 <BSP_SD_ReadCpltCallback>
}
 8005fc4:	bf00      	nop
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0

}
 8005fd0:	bf00      	nop
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005fe4:	f000 f80c 	bl	8006000 <BSP_PlatformIsDetected>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	b2db      	uxtb	r3, r3
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006006:	2301      	movs	r3, #1
 8006008:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800600a:	2180      	movs	r1, #128	@ 0x80
 800600c:	4806      	ldr	r0, [pc, #24]	@ (8006028 <BSP_PlatformIsDetected+0x28>)
 800600e:	f7fc fb6f 	bl	80026f0 <HAL_GPIO_ReadPin>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006018:	2300      	movs	r3, #0
 800601a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800601c:	79fb      	ldrb	r3, [r7, #7]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40020000 	.word	0x40020000

0800602c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006034:	f7fb fcf8 	bl	8001a28 <HAL_GetTick>
 8006038:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800603a:	e006      	b.n	800604a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800603c:	f7ff ff8a 	bl	8005f54 <BSP_SD_GetCardState>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006046:	2300      	movs	r3, #0
 8006048:	e009      	b.n	800605e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800604a:	f7fb fced 	bl	8001a28 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	429a      	cmp	r2, r3
 8006058:	d8f0      	bhi.n	800603c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800605a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006072:	4b0b      	ldr	r3, [pc, #44]	@ (80060a0 <SD_CheckStatus+0x38>)
 8006074:	2201      	movs	r2, #1
 8006076:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006078:	f7ff ff6c 	bl	8005f54 <BSP_SD_GetCardState>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d107      	bne.n	8006092 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006082:	4b07      	ldr	r3, [pc, #28]	@ (80060a0 <SD_CheckStatus+0x38>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	f023 0301 	bic.w	r3, r3, #1
 800608c:	b2da      	uxtb	r2, r3
 800608e:	4b04      	ldr	r3, [pc, #16]	@ (80060a0 <SD_CheckStatus+0x38>)
 8006090:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006092:	4b03      	ldr	r3, [pc, #12]	@ (80060a0 <SD_CheckStatus+0x38>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	b2db      	uxtb	r3, r3
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20000941 	.word	0x20000941

080060a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80060ae:	f7ff ff05 	bl	8005ebc <BSP_SD_Init>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d107      	bne.n	80060c8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff ffd4 	bl	8006068 <SD_CheckStatus>
 80060c0:	4603      	mov	r3, r0
 80060c2:	461a      	mov	r2, r3
 80060c4:	4b04      	ldr	r3, [pc, #16]	@ (80060d8 <SD_initialize+0x34>)
 80060c6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80060c8:	4b03      	ldr	r3, [pc, #12]	@ (80060d8 <SD_initialize+0x34>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	b2db      	uxtb	r3, r3
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000941 	.word	0x20000941

080060dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80060e6:	79fb      	ldrb	r3, [r7, #7]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff ffbd 	bl	8006068 <SD_CheckStatus>
 80060ee:	4603      	mov	r3, r0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	607a      	str	r2, [r7, #4]
 8006102:	603b      	str	r3, [r7, #0]
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800610c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006110:	f7ff ff8c 	bl	800602c <SD_CheckStatusWithTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	da01      	bge.n	800611e <SD_read+0x26>
  {
    return res;
 800611a:	7dfb      	ldrb	r3, [r7, #23]
 800611c:	e03b      	b.n	8006196 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	68b8      	ldr	r0, [r7, #8]
 8006124:	f7ff fee2 	bl	8005eec <BSP_SD_ReadBlocks_DMA>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d132      	bne.n	8006194 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800612e:	4b1c      	ldr	r3, [pc, #112]	@ (80061a0 <SD_read+0xa8>)
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006134:	f7fb fc78 	bl	8001a28 <HAL_GetTick>
 8006138:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800613a:	bf00      	nop
 800613c:	4b18      	ldr	r3, [pc, #96]	@ (80061a0 <SD_read+0xa8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d108      	bne.n	8006156 <SD_read+0x5e>
 8006144:	f7fb fc70 	bl	8001a28 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006152:	4293      	cmp	r3, r2
 8006154:	d9f2      	bls.n	800613c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006156:	4b12      	ldr	r3, [pc, #72]	@ (80061a0 <SD_read+0xa8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d102      	bne.n	8006164 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	75fb      	strb	r3, [r7, #23]
 8006162:	e017      	b.n	8006194 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006164:	4b0e      	ldr	r3, [pc, #56]	@ (80061a0 <SD_read+0xa8>)
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800616a:	f7fb fc5d 	bl	8001a28 <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006170:	e007      	b.n	8006182 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006172:	f7ff feef 	bl	8005f54 <BSP_SD_GetCardState>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <SD_read+0x8a>
          {
            res = RES_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006180:	e008      	b.n	8006194 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006182:	f7fb fc51 	bl	8001a28 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006190:	4293      	cmp	r3, r2
 8006192:	d9ee      	bls.n	8006172 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006194:	7dfb      	ldrb	r3, [r7, #23]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	2000107c 	.word	0x2000107c

080061a4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	4603      	mov	r3, r0
 80061b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80061b8:	4b24      	ldr	r3, [pc, #144]	@ (800624c <SD_write+0xa8>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80061be:	f247 5030 	movw	r0, #30000	@ 0x7530
 80061c2:	f7ff ff33 	bl	800602c <SD_CheckStatusWithTimeout>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	da01      	bge.n	80061d0 <SD_write+0x2c>
  {
    return res;
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	e038      	b.n	8006242 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	6879      	ldr	r1, [r7, #4]
 80061d4:	68b8      	ldr	r0, [r7, #8]
 80061d6:	f7ff fea3 	bl	8005f20 <BSP_SD_WriteBlocks_DMA>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d12f      	bne.n	8006240 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80061e0:	f7fb fc22 	bl	8001a28 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80061e6:	bf00      	nop
 80061e8:	4b18      	ldr	r3, [pc, #96]	@ (800624c <SD_write+0xa8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d108      	bne.n	8006202 <SD_write+0x5e>
 80061f0:	f7fb fc1a 	bl	8001a28 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	f247 522f 	movw	r2, #29999	@ 0x752f
 80061fe:	4293      	cmp	r3, r2
 8006200:	d9f2      	bls.n	80061e8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006202:	4b12      	ldr	r3, [pc, #72]	@ (800624c <SD_write+0xa8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
 800620e:	e017      	b.n	8006240 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006210:	4b0e      	ldr	r3, [pc, #56]	@ (800624c <SD_write+0xa8>)
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006216:	f7fb fc07 	bl	8001a28 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800621c:	e007      	b.n	800622e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800621e:	f7ff fe99 	bl	8005f54 <BSP_SD_GetCardState>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <SD_write+0x8a>
          {
            res = RES_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	75fb      	strb	r3, [r7, #23]
            break;
 800622c:	e008      	b.n	8006240 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800622e:	f7fb fbfb 	bl	8001a28 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	f247 522f 	movw	r2, #29999	@ 0x752f
 800623c:	4293      	cmp	r3, r2
 800623e:	d9ee      	bls.n	800621e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006240:	7dfb      	ldrb	r3, [r7, #23]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20001078 	.word	0x20001078

08006250 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08c      	sub	sp, #48	@ 0x30
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	603a      	str	r2, [r7, #0]
 800625a:	71fb      	strb	r3, [r7, #7]
 800625c:	460b      	mov	r3, r1
 800625e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006266:	4b25      	ldr	r3, [pc, #148]	@ (80062fc <SD_ioctl+0xac>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <SD_ioctl+0x28>
 8006274:	2303      	movs	r3, #3
 8006276:	e03c      	b.n	80062f2 <SD_ioctl+0xa2>

  switch (cmd)
 8006278:	79bb      	ldrb	r3, [r7, #6]
 800627a:	2b03      	cmp	r3, #3
 800627c:	d834      	bhi.n	80062e8 <SD_ioctl+0x98>
 800627e:	a201      	add	r2, pc, #4	@ (adr r2, 8006284 <SD_ioctl+0x34>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	08006295 	.word	0x08006295
 8006288:	0800629d 	.word	0x0800629d
 800628c:	080062b5 	.word	0x080062b5
 8006290:	080062cf 	.word	0x080062cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800629a:	e028      	b.n	80062ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800629c:	f107 030c 	add.w	r3, r7, #12
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff fe67 	bl	8005f74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80062a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80062b2:	e01c      	b.n	80062ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80062b4:	f107 030c 	add.w	r3, r7, #12
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fe5b 	bl	8005f74 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80062be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80062cc:	e00f      	b.n	80062ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80062ce:	f107 030c 	add.w	r3, r7, #12
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fe4e 	bl	8005f74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80062d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062da:	0a5a      	lsrs	r2, r3, #9
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80062e6:	e002      	b.n	80062ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80062e8:	2304      	movs	r3, #4
 80062ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80062ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3730      	adds	r7, #48	@ 0x30
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20000941 	.word	0x20000941

08006300 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006304:	4b03      	ldr	r3, [pc, #12]	@ (8006314 <BSP_SD_WriteCpltCallback+0x14>)
 8006306:	2201      	movs	r2, #1
 8006308:	601a      	str	r2, [r3, #0]
}
 800630a:	bf00      	nop
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	20001078 	.word	0x20001078

08006318 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800631c:	4b03      	ldr	r3, [pc, #12]	@ (800632c <BSP_SD_ReadCpltCallback+0x14>)
 800631e:	2201      	movs	r2, #1
 8006320:	601a      	str	r2, [r3, #0]
}
 8006322:	bf00      	nop
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	2000107c 	.word	0x2000107c

08006330 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	4603      	mov	r3, r0
 8006338:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	4a08      	ldr	r2, [pc, #32]	@ (8006360 <disk_status+0x30>)
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	79fa      	ldrb	r2, [r7, #7]
 8006348:	4905      	ldr	r1, [pc, #20]	@ (8006360 <disk_status+0x30>)
 800634a:	440a      	add	r2, r1
 800634c:	7a12      	ldrb	r2, [r2, #8]
 800634e:	4610      	mov	r0, r2
 8006350:	4798      	blx	r3
 8006352:	4603      	mov	r3, r0
 8006354:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006356:	7bfb      	ldrb	r3, [r7, #15]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	200012a8 	.word	0x200012a8

08006364 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	4a0e      	ldr	r2, [pc, #56]	@ (80063b0 <disk_initialize+0x4c>)
 8006376:	5cd3      	ldrb	r3, [r2, r3]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d114      	bne.n	80063a6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	4a0c      	ldr	r2, [pc, #48]	@ (80063b0 <disk_initialize+0x4c>)
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	79fa      	ldrb	r2, [r7, #7]
 800638a:	4909      	ldr	r1, [pc, #36]	@ (80063b0 <disk_initialize+0x4c>)
 800638c:	440a      	add	r2, r1
 800638e:	7a12      	ldrb	r2, [r2, #8]
 8006390:	4610      	mov	r0, r2
 8006392:	4798      	blx	r3
 8006394:	4603      	mov	r3, r0
 8006396:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d103      	bne.n	80063a6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	4a03      	ldr	r2, [pc, #12]	@ (80063b0 <disk_initialize+0x4c>)
 80063a2:	2101      	movs	r1, #1
 80063a4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	200012a8 	.word	0x200012a8

080063b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80063b4:	b590      	push	{r4, r7, lr}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	4603      	mov	r3, r0
 80063c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	4a0a      	ldr	r2, [pc, #40]	@ (80063f0 <disk_read+0x3c>)
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	689c      	ldr	r4, [r3, #8]
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	4a07      	ldr	r2, [pc, #28]	@ (80063f0 <disk_read+0x3c>)
 80063d4:	4413      	add	r3, r2
 80063d6:	7a18      	ldrb	r0, [r3, #8]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	47a0      	blx	r4
 80063e0:	4603      	mov	r3, r0
 80063e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd90      	pop	{r4, r7, pc}
 80063ee:	bf00      	nop
 80063f0:	200012a8 	.word	0x200012a8

080063f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80063f4:	b590      	push	{r4, r7, lr}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60b9      	str	r1, [r7, #8]
 80063fc:	607a      	str	r2, [r7, #4]
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	4a0a      	ldr	r2, [pc, #40]	@ (8006430 <disk_write+0x3c>)
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	68dc      	ldr	r4, [r3, #12]
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	4a07      	ldr	r2, [pc, #28]	@ (8006430 <disk_write+0x3c>)
 8006414:	4413      	add	r3, r2
 8006416:	7a18      	ldrb	r0, [r3, #8]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	47a0      	blx	r4
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]
  return res;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
}
 8006426:	4618      	mov	r0, r3
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	bd90      	pop	{r4, r7, pc}
 800642e:	bf00      	nop
 8006430:	200012a8 	.word	0x200012a8

08006434 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	4603      	mov	r3, r0
 800643c:	603a      	str	r2, [r7, #0]
 800643e:	71fb      	strb	r3, [r7, #7]
 8006440:	460b      	mov	r3, r1
 8006442:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006444:	79fb      	ldrb	r3, [r7, #7]
 8006446:	4a09      	ldr	r2, [pc, #36]	@ (800646c <disk_ioctl+0x38>)
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	79fa      	ldrb	r2, [r7, #7]
 8006452:	4906      	ldr	r1, [pc, #24]	@ (800646c <disk_ioctl+0x38>)
 8006454:	440a      	add	r2, r1
 8006456:	7a10      	ldrb	r0, [r2, #8]
 8006458:	79b9      	ldrb	r1, [r7, #6]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	4798      	blx	r3
 800645e:	4603      	mov	r3, r0
 8006460:	73fb      	strb	r3, [r7, #15]
  return res;
 8006462:	7bfb      	ldrb	r3, [r7, #15]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	200012a8 	.word	0x200012a8

08006470 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3301      	adds	r3, #1
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006480:	89fb      	ldrh	r3, [r7, #14]
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	b21a      	sxth	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	b21b      	sxth	r3, r3
 800648c:	4313      	orrs	r3, r2
 800648e:	b21b      	sxth	r3, r3
 8006490:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006492:	89fb      	ldrh	r3, [r7, #14]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3303      	adds	r3, #3
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	3202      	adds	r2, #2
 80064b8:	7812      	ldrb	r2, [r2, #0]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	021b      	lsls	r3, r3, #8
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	3201      	adds	r2, #1
 80064c6:	7812      	ldrb	r2, [r2, #0]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	021b      	lsls	r3, r3, #8
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	7812      	ldrb	r2, [r2, #0]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80064d8:	68fb      	ldr	r3, [r7, #12]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	460b      	mov	r3, r1
 80064f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	887a      	ldrh	r2, [r7, #2]
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	887b      	ldrh	r3, [r7, #2]
 8006500:	0a1b      	lsrs	r3, r3, #8
 8006502:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	607a      	str	r2, [r7, #4]
 800650a:	887a      	ldrh	r2, [r7, #2]
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	0a1b      	lsrs	r3, r3, #8
 8006536:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	607a      	str	r2, [r7, #4]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	0a1b      	lsrs	r3, r3, #8
 8006548:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	0a1b      	lsrs	r3, r3, #8
 800655a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	607a      	str	r2, [r7, #4]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00d      	beq.n	80065aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	1c53      	adds	r3, r2, #1
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	6179      	str	r1, [r7, #20]
 800659a:	7812      	ldrb	r2, [r2, #0]
 800659c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	607b      	str	r3, [r7, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f1      	bne.n	800658e <mem_cpy+0x1a>
	}
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80065b6:	b480      	push	{r7}
 80065b8:	b087      	sub	sp, #28
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	60f8      	str	r0, [r7, #12]
 80065be:	60b9      	str	r1, [r7, #8]
 80065c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	617a      	str	r2, [r7, #20]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	607b      	str	r3, [r7, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f3      	bne.n	80065c6 <mem_set+0x10>
}
 80065de:	bf00      	nop
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80065ec:	b480      	push	{r7}
 80065ee:	b089      	sub	sp, #36	@ 0x24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	61fb      	str	r3, [r7, #28]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	61fa      	str	r2, [r7, #28]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	4619      	mov	r1, r3
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	61ba      	str	r2, [r7, #24]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	1acb      	subs	r3, r1, r3
 8006618:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3b01      	subs	r3, #1
 800661e:	607b      	str	r3, [r7, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <mem_cmp+0x40>
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0eb      	beq.n	8006604 <mem_cmp+0x18>

	return r;
 800662c:	697b      	ldr	r3, [r7, #20]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3724      	adds	r7, #36	@ 0x24
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006644:	e002      	b.n	800664c <chk_chr+0x12>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3301      	adds	r3, #1
 800664a:	607b      	str	r3, [r7, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d005      	beq.n	8006660 <chk_chr+0x26>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	4293      	cmp	r3, r2
 800665e:	d1f2      	bne.n	8006646 <chk_chr+0xc>
	return *str;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	781b      	ldrb	r3, [r3, #0]
}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800667a:	2300      	movs	r3, #0
 800667c:	60bb      	str	r3, [r7, #8]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	e029      	b.n	80066d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006684:	4a27      	ldr	r2, [pc, #156]	@ (8006724 <chk_lock+0xb4>)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	011b      	lsls	r3, r3, #4
 800668a:	4413      	add	r3, r2
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d01d      	beq.n	80066ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006692:	4a24      	ldr	r2, [pc, #144]	@ (8006724 <chk_lock+0xb4>)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	4413      	add	r3, r2
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d116      	bne.n	80066d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80066a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006724 <chk_lock+0xb4>)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	4413      	add	r3, r2
 80066ac:	3304      	adds	r3, #4
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d10c      	bne.n	80066d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80066b8:	4a1a      	ldr	r2, [pc, #104]	@ (8006724 <chk_lock+0xb4>)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	4413      	add	r3, r2
 80066c0:	3308      	adds	r3, #8
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d102      	bne.n	80066d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80066cc:	e007      	b.n	80066de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80066ce:	2301      	movs	r3, #1
 80066d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3301      	adds	r3, #1
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d9d2      	bls.n	8006684 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d109      	bne.n	80066f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d102      	bne.n	80066f0 <chk_lock+0x80>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d101      	bne.n	80066f4 <chk_lock+0x84>
 80066f0:	2300      	movs	r3, #0
 80066f2:	e010      	b.n	8006716 <chk_lock+0xa6>
 80066f4:	2312      	movs	r3, #18
 80066f6:	e00e      	b.n	8006716 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d108      	bne.n	8006710 <chk_lock+0xa0>
 80066fe:	4a09      	ldr	r2, [pc, #36]	@ (8006724 <chk_lock+0xb4>)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	4413      	add	r3, r2
 8006706:	330c      	adds	r3, #12
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800670e:	d101      	bne.n	8006714 <chk_lock+0xa4>
 8006710:	2310      	movs	r3, #16
 8006712:	e000      	b.n	8006716 <chk_lock+0xa6>
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20001088 	.word	0x20001088

08006728 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800672e:	2300      	movs	r3, #0
 8006730:	607b      	str	r3, [r7, #4]
 8006732:	e002      	b.n	800673a <enq_lock+0x12>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3301      	adds	r3, #1
 8006738:	607b      	str	r3, [r7, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d806      	bhi.n	800674e <enq_lock+0x26>
 8006740:	4a09      	ldr	r2, [pc, #36]	@ (8006768 <enq_lock+0x40>)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	4413      	add	r3, r2
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f2      	bne.n	8006734 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b02      	cmp	r3, #2
 8006752:	bf14      	ite	ne
 8006754:	2301      	movne	r3, #1
 8006756:	2300      	moveq	r3, #0
 8006758:	b2db      	uxtb	r3, r3
}
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20001088 	.word	0x20001088

0800676c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	e01f      	b.n	80067bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800677c:	4a41      	ldr	r2, [pc, #260]	@ (8006884 <inc_lock+0x118>)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	4413      	add	r3, r2
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d113      	bne.n	80067b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800678e:	4a3d      	ldr	r2, [pc, #244]	@ (8006884 <inc_lock+0x118>)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	4413      	add	r3, r2
 8006796:	3304      	adds	r3, #4
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800679e:	429a      	cmp	r2, r3
 80067a0:	d109      	bne.n	80067b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80067a2:	4a38      	ldr	r2, [pc, #224]	@ (8006884 <inc_lock+0x118>)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	4413      	add	r3, r2
 80067aa:	3308      	adds	r3, #8
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d006      	beq.n	80067c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3301      	adds	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d9dc      	bls.n	800677c <inc_lock+0x10>
 80067c2:	e000      	b.n	80067c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80067c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d132      	bne.n	8006832 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	e002      	b.n	80067d8 <inc_lock+0x6c>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d806      	bhi.n	80067ec <inc_lock+0x80>
 80067de:	4a29      	ldr	r2, [pc, #164]	@ (8006884 <inc_lock+0x118>)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	4413      	add	r3, r2
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f2      	bne.n	80067d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d101      	bne.n	80067f6 <inc_lock+0x8a>
 80067f2:	2300      	movs	r3, #0
 80067f4:	e040      	b.n	8006878 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4922      	ldr	r1, [pc, #136]	@ (8006884 <inc_lock+0x118>)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	440b      	add	r3, r1
 8006802:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	491e      	ldr	r1, [pc, #120]	@ (8006884 <inc_lock+0x118>)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	440b      	add	r3, r1
 8006810:	3304      	adds	r3, #4
 8006812:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	695a      	ldr	r2, [r3, #20]
 8006818:	491a      	ldr	r1, [pc, #104]	@ (8006884 <inc_lock+0x118>)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	440b      	add	r3, r1
 8006820:	3308      	adds	r3, #8
 8006822:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006824:	4a17      	ldr	r2, [pc, #92]	@ (8006884 <inc_lock+0x118>)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	4413      	add	r3, r2
 800682c:	330c      	adds	r3, #12
 800682e:	2200      	movs	r2, #0
 8006830:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d009      	beq.n	800684c <inc_lock+0xe0>
 8006838:	4a12      	ldr	r2, [pc, #72]	@ (8006884 <inc_lock+0x118>)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	4413      	add	r3, r2
 8006840:	330c      	adds	r3, #12
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <inc_lock+0xe0>
 8006848:	2300      	movs	r3, #0
 800684a:	e015      	b.n	8006878 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d108      	bne.n	8006864 <inc_lock+0xf8>
 8006852:	4a0c      	ldr	r2, [pc, #48]	@ (8006884 <inc_lock+0x118>)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	4413      	add	r3, r2
 800685a:	330c      	adds	r3, #12
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	3301      	adds	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	e001      	b.n	8006868 <inc_lock+0xfc>
 8006864:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006868:	4906      	ldr	r1, [pc, #24]	@ (8006884 <inc_lock+0x118>)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	440b      	add	r3, r1
 8006870:	330c      	adds	r3, #12
 8006872:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3301      	adds	r3, #1
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	20001088 	.word	0x20001088

08006888 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3b01      	subs	r3, #1
 8006894:	607b      	str	r3, [r7, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d825      	bhi.n	80068e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800689c:	4a17      	ldr	r2, [pc, #92]	@ (80068fc <dec_lock+0x74>)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	4413      	add	r3, r2
 80068a4:	330c      	adds	r3, #12
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80068aa:	89fb      	ldrh	r3, [r7, #14]
 80068ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068b0:	d101      	bne.n	80068b6 <dec_lock+0x2e>
 80068b2:	2300      	movs	r3, #0
 80068b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80068b6:	89fb      	ldrh	r3, [r7, #14]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <dec_lock+0x3a>
 80068bc:	89fb      	ldrh	r3, [r7, #14]
 80068be:	3b01      	subs	r3, #1
 80068c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80068c2:	4a0e      	ldr	r2, [pc, #56]	@ (80068fc <dec_lock+0x74>)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	4413      	add	r3, r2
 80068ca:	330c      	adds	r3, #12
 80068cc:	89fa      	ldrh	r2, [r7, #14]
 80068ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80068d0:	89fb      	ldrh	r3, [r7, #14]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d105      	bne.n	80068e2 <dec_lock+0x5a>
 80068d6:	4a09      	ldr	r2, [pc, #36]	@ (80068fc <dec_lock+0x74>)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	4413      	add	r3, r2
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	737b      	strb	r3, [r7, #13]
 80068e6:	e001      	b.n	80068ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80068e8:	2302      	movs	r3, #2
 80068ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80068ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	20001088 	.word	0x20001088

08006900 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	e010      	b.n	8006930 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800690e:	4a0d      	ldr	r2, [pc, #52]	@ (8006944 <clear_lock+0x44>)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	4413      	add	r3, r2
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	429a      	cmp	r2, r3
 800691c:	d105      	bne.n	800692a <clear_lock+0x2a>
 800691e:	4a09      	ldr	r2, [pc, #36]	@ (8006944 <clear_lock+0x44>)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	011b      	lsls	r3, r3, #4
 8006924:	4413      	add	r3, r2
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3301      	adds	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d9eb      	bls.n	800690e <clear_lock+0xe>
	}
}
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	20001088 	.word	0x20001088

08006948 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	78db      	ldrb	r3, [r3, #3]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d034      	beq.n	80069c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006960:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	7858      	ldrb	r0, [r3, #1]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800696c:	2301      	movs	r3, #1
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	f7ff fd40 	bl	80063f4 <disk_write>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <sync_window+0x38>
			res = FR_DISK_ERR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
 800697e:	e022      	b.n	80069c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	1ad2      	subs	r2, r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	429a      	cmp	r2, r3
 8006994:	d217      	bcs.n	80069c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	789b      	ldrb	r3, [r3, #2]
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	e010      	b.n	80069c0 <sync_window+0x78>
					wsect += fs->fsize;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4413      	add	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	7858      	ldrb	r0, [r3, #1]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80069b2:	2301      	movs	r3, #1
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	f7ff fd1d 	bl	80063f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	3b01      	subs	r3, #1
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d8eb      	bhi.n	800699e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d01b      	beq.n	8006a20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff ffad 	bl	8006948 <sync_window>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d113      	bne.n	8006a20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	7858      	ldrb	r0, [r3, #1]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006a02:	2301      	movs	r3, #1
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	f7ff fcd5 	bl	80063b4 <disk_read>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d004      	beq.n	8006a1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006a10:	f04f 33ff 	mov.w	r3, #4294967295
 8006a14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff ff87 	bl	8006948 <sync_window>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d158      	bne.n	8006af6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d148      	bne.n	8006ade <sync_fs+0xb2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	791b      	ldrb	r3, [r3, #4]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d144      	bne.n	8006ade <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3334      	adds	r3, #52	@ 0x34
 8006a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7ff fda9 	bl	80065b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3334      	adds	r3, #52	@ 0x34
 8006a68:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006a6c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff fd38 	bl	80064e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3334      	adds	r3, #52	@ 0x34
 8006a7a:	4921      	ldr	r1, [pc, #132]	@ (8006b00 <sync_fs+0xd4>)
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff fd4d 	bl	800651c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3334      	adds	r3, #52	@ 0x34
 8006a86:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006a8a:	491e      	ldr	r1, [pc, #120]	@ (8006b04 <sync_fs+0xd8>)
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff fd45 	bl	800651c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3334      	adds	r3, #52	@ 0x34
 8006a96:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	f7ff fd3b 	bl	800651c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3334      	adds	r3, #52	@ 0x34
 8006aaa:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f7ff fd31 	bl	800651c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	7858      	ldrb	r0, [r3, #1]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f7ff fc8e 	bl	80063f4 <disk_write>
			fs->fsi_flag = 0;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	785b      	ldrb	r3, [r3, #1]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7ff fca4 	bl	8006434 <disk_ioctl>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <sync_fs+0xca>
 8006af2:	2301      	movs	r3, #1
 8006af4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	41615252 	.word	0x41615252
 8006b04:	61417272 	.word	0x61417272

08006b08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	3b02      	subs	r3, #2
 8006b16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	3b02      	subs	r3, #2
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d301      	bcc.n	8006b28 <clust2sect+0x20>
 8006b24:	2300      	movs	r3, #0
 8006b26:	e008      	b.n	8006b3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	895b      	ldrh	r3, [r3, #10]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	fb03 f202 	mul.w	r2, r3, r2
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b38:	4413      	add	r3, r2
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b086      	sub	sp, #24
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d904      	bls.n	8006b66 <get_fat+0x20>
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d302      	bcc.n	8006b6c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006b66:	2301      	movs	r3, #1
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	e08e      	b.n	8006c8a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d061      	beq.n	8006c3e <get_fat+0xf8>
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	dc7b      	bgt.n	8006c76 <get_fat+0x130>
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d002      	beq.n	8006b88 <get_fat+0x42>
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d041      	beq.n	8006c0a <get_fat+0xc4>
 8006b86:	e076      	b.n	8006c76 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	0a5b      	lsrs	r3, r3, #9
 8006b9e:	4413      	add	r3, r2
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6938      	ldr	r0, [r7, #16]
 8006ba4:	f7ff ff14 	bl	80069d0 <move_window>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d166      	bne.n	8006c7c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	60fa      	str	r2, [r7, #12]
 8006bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006bc0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	0a5b      	lsrs	r3, r3, #9
 8006bca:	4413      	add	r3, r2
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6938      	ldr	r0, [r7, #16]
 8006bd0:	f7ff fefe 	bl	80069d0 <move_window>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d152      	bne.n	8006c80 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4413      	add	r3, r2
 8006be4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <get_fat+0xba>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	091b      	lsrs	r3, r3, #4
 8006bfe:	e002      	b.n	8006c06 <get_fat+0xc0>
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c06:	617b      	str	r3, [r7, #20]
			break;
 8006c08:	e03f      	b.n	8006c8a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	0a1b      	lsrs	r3, r3, #8
 8006c12:	4413      	add	r3, r2
 8006c14:	4619      	mov	r1, r3
 8006c16:	6938      	ldr	r0, [r7, #16]
 8006c18:	f7ff feda 	bl	80069d0 <move_window>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d130      	bne.n	8006c84 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006c30:	4413      	add	r3, r2
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7ff fc1c 	bl	8006470 <ld_word>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	617b      	str	r3, [r7, #20]
			break;
 8006c3c:	e025      	b.n	8006c8a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	09db      	lsrs	r3, r3, #7
 8006c46:	4413      	add	r3, r2
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6938      	ldr	r0, [r7, #16]
 8006c4c:	f7ff fec0 	bl	80069d0 <move_window>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d118      	bne.n	8006c88 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006c64:	4413      	add	r3, r2
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff fc1a 	bl	80064a0 <ld_dword>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006c72:	617b      	str	r3, [r7, #20]
			break;
 8006c74:	e009      	b.n	8006c8a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006c76:	2301      	movs	r3, #1
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	e006      	b.n	8006c8a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c7c:	bf00      	nop
 8006c7e:	e004      	b.n	8006c8a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c80:	bf00      	nop
 8006c82:	e002      	b.n	8006c8a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c84:	bf00      	nop
 8006c86:	e000      	b.n	8006c8a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c88:	bf00      	nop
		}
	}

	return val;
 8006c8a:	697b      	ldr	r3, [r7, #20]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006c94:	b590      	push	{r4, r7, lr}
 8006c96:	b089      	sub	sp, #36	@ 0x24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	f240 80d9 	bls.w	8006e5e <put_fat+0x1ca>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	f080 80d3 	bcs.w	8006e5e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	f000 8096 	beq.w	8006dee <put_fat+0x15a>
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	f300 80cb 	bgt.w	8006e5e <put_fat+0x1ca>
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d002      	beq.n	8006cd2 <put_fat+0x3e>
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d06e      	beq.n	8006dae <put_fat+0x11a>
 8006cd0:	e0c5      	b.n	8006e5e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	61bb      	str	r3, [r7, #24]
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	085b      	lsrs	r3, r3, #1
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	4413      	add	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	0a5b      	lsrs	r3, r3, #9
 8006ce8:	4413      	add	r3, r2
 8006cea:	4619      	mov	r1, r3
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff fe6f 	bl	80069d0 <move_window>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cf6:	7ffb      	ldrb	r3, [r7, #31]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f040 80a9 	bne.w	8006e50 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	1c59      	adds	r1, r3, #1
 8006d08:	61b9      	str	r1, [r7, #24]
 8006d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d0e:	4413      	add	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00d      	beq.n	8006d38 <put_fat+0xa4>
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	b25b      	sxtb	r3, r3
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	b25a      	sxtb	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	b25b      	sxtb	r3, r3
 8006d30:	4313      	orrs	r3, r2
 8006d32:	b25b      	sxtb	r3, r3
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	e001      	b.n	8006d3c <put_fat+0xa8>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	0a5b      	lsrs	r3, r3, #9
 8006d4e:	4413      	add	r3, r2
 8006d50:	4619      	mov	r1, r3
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7ff fe3c 	bl	80069d0 <move_window>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d5c:	7ffb      	ldrb	r3, [r7, #31]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d178      	bne.n	8006e54 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6e:	4413      	add	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <put_fat+0xf0>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	091b      	lsrs	r3, r3, #4
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	e00e      	b.n	8006da2 <put_fat+0x10e>
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	b25b      	sxtb	r3, r3
 8006d8a:	f023 030f 	bic.w	r3, r3, #15
 8006d8e:	b25a      	sxtb	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	0a1b      	lsrs	r3, r3, #8
 8006d94:	b25b      	sxtb	r3, r3
 8006d96:	f003 030f 	and.w	r3, r3, #15
 8006d9a:	b25b      	sxtb	r3, r3
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	b25b      	sxtb	r3, r3
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	70da      	strb	r2, [r3, #3]
			break;
 8006dac:	e057      	b.n	8006e5e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	0a1b      	lsrs	r3, r3, #8
 8006db6:	4413      	add	r3, r2
 8006db8:	4619      	mov	r1, r3
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7ff fe08 	bl	80069d0 <move_window>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006dc4:	7ffb      	ldrb	r3, [r7, #31]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d146      	bne.n	8006e58 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006dd8:	4413      	add	r3, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	b292      	uxth	r2, r2
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff fb80 	bl	80064e6 <st_word>
			fs->wflag = 1;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	70da      	strb	r2, [r3, #3]
			break;
 8006dec:	e037      	b.n	8006e5e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	09db      	lsrs	r3, r3, #7
 8006df6:	4413      	add	r3, r2
 8006df8:	4619      	mov	r1, r3
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7ff fde8 	bl	80069d0 <move_window>
 8006e00:	4603      	mov	r3, r0
 8006e02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e04:	7ffb      	ldrb	r3, [r7, #31]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d128      	bne.n	8006e5c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006e1e:	4413      	add	r3, r2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff fb3d 	bl	80064a0 <ld_dword>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006e2c:	4323      	orrs	r3, r4
 8006e2e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006e3e:	4413      	add	r3, r2
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff fb6a 	bl	800651c <st_dword>
			fs->wflag = 1;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	70da      	strb	r2, [r3, #3]
			break;
 8006e4e:	e006      	b.n	8006e5e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006e50:	bf00      	nop
 8006e52:	e004      	b.n	8006e5e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006e54:	bf00      	nop
 8006e56:	e002      	b.n	8006e5e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006e58:	bf00      	nop
 8006e5a:	e000      	b.n	8006e5e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006e5c:	bf00      	nop
		}
	}
	return res;
 8006e5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3724      	adds	r7, #36	@ 0x24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd90      	pop	{r4, r7, pc}

08006e68 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d904      	bls.n	8006e8e <remove_chain+0x26>
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d301      	bcc.n	8006e92 <remove_chain+0x2a>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e04b      	b.n	8006f2a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00c      	beq.n	8006eb2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006e98:	f04f 32ff 	mov.w	r2, #4294967295
 8006e9c:	6879      	ldr	r1, [r7, #4]
 8006e9e:	69b8      	ldr	r0, [r7, #24]
 8006ea0:	f7ff fef8 	bl	8006c94 <put_fat>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ea8:	7ffb      	ldrb	r3, [r7, #31]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <remove_chain+0x4a>
 8006eae:	7ffb      	ldrb	r3, [r7, #31]
 8006eb0:	e03b      	b.n	8006f2a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f7ff fe46 	bl	8006b46 <get_fat>
 8006eba:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d031      	beq.n	8006f26 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <remove_chain+0x64>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e02e      	b.n	8006f2a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed2:	d101      	bne.n	8006ed8 <remove_chain+0x70>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e028      	b.n	8006f2a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006ed8:	2200      	movs	r2, #0
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	69b8      	ldr	r0, [r7, #24]
 8006ede:	f7ff fed9 	bl	8006c94 <put_fat>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006ee6:	7ffb      	ldrb	r3, [r7, #31]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <remove_chain+0x88>
 8006eec:	7ffb      	ldrb	r3, [r7, #31]
 8006eee:	e01c      	b.n	8006f2a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	695a      	ldr	r2, [r3, #20]
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	3b02      	subs	r3, #2
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d20b      	bcs.n	8006f16 <remove_chain+0xae>
			fs->free_clst++;
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	791b      	ldrb	r3, [r3, #4]
 8006f0c:	f043 0301 	orr.w	r3, r3, #1
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d3c6      	bcc.n	8006eb2 <remove_chain+0x4a>
 8006f24:	e000      	b.n	8006f28 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006f26:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3720      	adds	r7, #32
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b088      	sub	sp, #32
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10d      	bne.n	8006f64 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d004      	beq.n	8006f5e <create_chain+0x2c>
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d31b      	bcc.n	8006f96 <create_chain+0x64>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	e018      	b.n	8006f96 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff fded 	bl	8006b46 <get_fat>
 8006f6c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d801      	bhi.n	8006f78 <create_chain+0x46>
 8006f74:	2301      	movs	r3, #1
 8006f76:	e070      	b.n	800705a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7e:	d101      	bne.n	8006f84 <create_chain+0x52>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	e06a      	b.n	800705a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d201      	bcs.n	8006f92 <create_chain+0x60>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	e063      	b.n	800705a <create_chain+0x128>
		scl = clst;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	69fa      	ldr	r2, [r7, #28]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d307      	bcc.n	8006fba <create_chain+0x88>
				ncl = 2;
 8006faa:	2302      	movs	r3, #2
 8006fac:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d901      	bls.n	8006fba <create_chain+0x88>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e04f      	b.n	800705a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006fba:	69f9      	ldr	r1, [r7, #28]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7ff fdc2 	bl	8006b46 <get_fat>
 8006fc2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00e      	beq.n	8006fe8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d003      	beq.n	8006fd8 <create_chain+0xa6>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd6:	d101      	bne.n	8006fdc <create_chain+0xaa>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	e03e      	b.n	800705a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006fdc:	69fa      	ldr	r2, [r7, #28]
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d1da      	bne.n	8006f9a <create_chain+0x68>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	e038      	b.n	800705a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006fe8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006fea:	f04f 32ff 	mov.w	r2, #4294967295
 8006fee:	69f9      	ldr	r1, [r7, #28]
 8006ff0:	6938      	ldr	r0, [r7, #16]
 8006ff2:	f7ff fe4f 	bl	8006c94 <put_fat>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <create_chain+0xe2>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d006      	beq.n	8007014 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6938      	ldr	r0, [r7, #16]
 800700c:	f7ff fe42 	bl	8006c94 <put_fat>
 8007010:	4603      	mov	r3, r0
 8007012:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d116      	bne.n	8007048 <create_chain+0x116>
		fs->last_clst = ncl;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	695a      	ldr	r2, [r3, #20]
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	3b02      	subs	r3, #2
 800702a:	429a      	cmp	r2, r3
 800702c:	d804      	bhi.n	8007038 <create_chain+0x106>
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	1e5a      	subs	r2, r3, #1
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	791b      	ldrb	r3, [r3, #4]
 800703c:	f043 0301 	orr.w	r3, r3, #1
 8007040:	b2da      	uxtb	r2, r3
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	711a      	strb	r2, [r3, #4]
 8007046:	e007      	b.n	8007058 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d102      	bne.n	8007054 <create_chain+0x122>
 800704e:	f04f 33ff 	mov.w	r3, #4294967295
 8007052:	e000      	b.n	8007056 <create_chain+0x124>
 8007054:	2301      	movs	r3, #1
 8007056:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007058:	69fb      	ldr	r3, [r7, #28]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007062:	b480      	push	{r7}
 8007064:	b087      	sub	sp, #28
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	3304      	adds	r3, #4
 8007078:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	0a5b      	lsrs	r3, r3, #9
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	8952      	ldrh	r2, [r2, #10]
 8007082:	fbb3 f3f2 	udiv	r3, r3, r2
 8007086:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	1d1a      	adds	r2, r3, #4
 800708c:	613a      	str	r2, [r7, #16]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <clmt_clust+0x3a>
 8007098:	2300      	movs	r3, #0
 800709a:	e010      	b.n	80070be <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d307      	bcc.n	80070b4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	3304      	adds	r3, #4
 80070b0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070b2:	e7e9      	b.n	8007088 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80070b4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	4413      	add	r3, r2
}
 80070be:	4618      	mov	r0, r3
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b086      	sub	sp, #24
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070e0:	d204      	bcs.n	80070ec <dir_sdi+0x22>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	f003 031f 	and.w	r3, r3, #31
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80070ec:	2302      	movs	r3, #2
 80070ee:	e063      	b.n	80071b8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d106      	bne.n	8007110 <dir_sdi+0x46>
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	2b02      	cmp	r3, #2
 8007108:	d902      	bls.n	8007110 <dir_sdi+0x46>
		clst = fs->dirbase;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10c      	bne.n	8007130 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	8912      	ldrh	r2, [r2, #8]
 800711e:	4293      	cmp	r3, r2
 8007120:	d301      	bcc.n	8007126 <dir_sdi+0x5c>
 8007122:	2302      	movs	r3, #2
 8007124:	e048      	b.n	80071b8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	61da      	str	r2, [r3, #28]
 800712e:	e029      	b.n	8007184 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	895b      	ldrh	r3, [r3, #10]
 8007134:	025b      	lsls	r3, r3, #9
 8007136:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007138:	e019      	b.n	800716e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6979      	ldr	r1, [r7, #20]
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff fd01 	bl	8006b46 <get_fat>
 8007144:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714c:	d101      	bne.n	8007152 <dir_sdi+0x88>
 800714e:	2301      	movs	r3, #1
 8007150:	e032      	b.n	80071b8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d904      	bls.n	8007162 <dir_sdi+0x98>
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	429a      	cmp	r2, r3
 8007160:	d301      	bcc.n	8007166 <dir_sdi+0x9c>
 8007162:	2302      	movs	r3, #2
 8007164:	e028      	b.n	80071b8 <dir_sdi+0xee>
			ofs -= csz;
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	429a      	cmp	r2, r3
 8007174:	d2e1      	bcs.n	800713a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007176:	6979      	ldr	r1, [r7, #20]
 8007178:	6938      	ldr	r0, [r7, #16]
 800717a:	f7ff fcc5 	bl	8006b08 <clust2sect>
 800717e:	4602      	mov	r2, r0
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <dir_sdi+0xcc>
 8007192:	2302      	movs	r3, #2
 8007194:	e010      	b.n	80071b8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69da      	ldr	r2, [r3, #28]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	0a5b      	lsrs	r3, r3, #9
 800719e:	441a      	add	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b0:	441a      	add	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	3320      	adds	r3, #32
 80071d6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <dir_next+0x28>
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071e6:	d301      	bcc.n	80071ec <dir_next+0x2c>
 80071e8:	2304      	movs	r3, #4
 80071ea:	e0aa      	b.n	8007342 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f040 8098 	bne.w	8007328 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	1c5a      	adds	r2, r3, #1
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10b      	bne.n	8007222 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	8912      	ldrh	r2, [r2, #8]
 8007212:	4293      	cmp	r3, r2
 8007214:	f0c0 8088 	bcc.w	8007328 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	61da      	str	r2, [r3, #28]
 800721e:	2304      	movs	r3, #4
 8007220:	e08f      	b.n	8007342 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	0a5b      	lsrs	r3, r3, #9
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	8952      	ldrh	r2, [r2, #10]
 800722a:	3a01      	subs	r2, #1
 800722c:	4013      	ands	r3, r2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d17a      	bne.n	8007328 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f7ff fc83 	bl	8006b46 <get_fat>
 8007240:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d801      	bhi.n	800724c <dir_next+0x8c>
 8007248:	2302      	movs	r3, #2
 800724a:	e07a      	b.n	8007342 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007252:	d101      	bne.n	8007258 <dir_next+0x98>
 8007254:	2301      	movs	r3, #1
 8007256:	e074      	b.n	8007342 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	429a      	cmp	r2, r3
 8007260:	d358      	bcc.n	8007314 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d104      	bne.n	8007272 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	61da      	str	r2, [r3, #28]
 800726e:	2304      	movs	r3, #4
 8007270:	e067      	b.n	8007342 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	4619      	mov	r1, r3
 800727a:	4610      	mov	r0, r2
 800727c:	f7ff fe59 	bl	8006f32 <create_chain>
 8007280:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <dir_next+0xcc>
 8007288:	2307      	movs	r3, #7
 800728a:	e05a      	b.n	8007342 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d101      	bne.n	8007296 <dir_next+0xd6>
 8007292:	2302      	movs	r3, #2
 8007294:	e055      	b.n	8007342 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729c:	d101      	bne.n	80072a2 <dir_next+0xe2>
 800729e:	2301      	movs	r3, #1
 80072a0:	e04f      	b.n	8007342 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f7ff fb50 	bl	8006948 <sync_window>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <dir_next+0xf2>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e047      	b.n	8007342 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3334      	adds	r3, #52	@ 0x34
 80072b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072ba:	2100      	movs	r1, #0
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff f97a 	bl	80065b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80072c2:	2300      	movs	r3, #0
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	6979      	ldr	r1, [r7, #20]
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f7ff fc1d 	bl	8006b08 <clust2sect>
 80072ce:	4602      	mov	r2, r0
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80072d4:	e012      	b.n	80072fc <dir_next+0x13c>
						fs->wflag = 1;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2201      	movs	r2, #1
 80072da:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff fb33 	bl	8006948 <sync_window>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <dir_next+0x12c>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e02a      	b.n	8007342 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	3301      	adds	r3, #1
 80072f0:	613b      	str	r3, [r7, #16]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	895b      	ldrh	r3, [r3, #10]
 8007300:	461a      	mov	r2, r3
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	4293      	cmp	r3, r2
 8007306:	d3e6      	bcc.n	80072d6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800731a:	6979      	ldr	r1, [r7, #20]
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff fbf3 	bl	8006b08 <clust2sect>
 8007322:	4602      	mov	r2, r0
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733a:	441a      	add	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b086      	sub	sp, #24
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800735a:	2100      	movs	r1, #0
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff feb4 	bl	80070ca <dir_sdi>
 8007362:	4603      	mov	r3, r0
 8007364:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d12b      	bne.n	80073c4 <dir_alloc+0x7a>
		n = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	4619      	mov	r1, r3
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff fb2a 	bl	80069d0 <move_window>
 800737c:	4603      	mov	r3, r0
 800737e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d11d      	bne.n	80073c2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2be5      	cmp	r3, #229	@ 0xe5
 800738e:	d004      	beq.n	800739a <dir_alloc+0x50>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d107      	bne.n	80073aa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	3301      	adds	r3, #1
 800739e:	613b      	str	r3, [r7, #16]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d102      	bne.n	80073ae <dir_alloc+0x64>
 80073a8:	e00c      	b.n	80073c4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80073aa:	2300      	movs	r3, #0
 80073ac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80073ae:	2101      	movs	r1, #1
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff ff05 	bl	80071c0 <dir_next>
 80073b6:	4603      	mov	r3, r0
 80073b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0d7      	beq.n	8007370 <dir_alloc+0x26>
 80073c0:	e000      	b.n	80073c4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80073c2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d101      	bne.n	80073ce <dir_alloc+0x84>
 80073ca:	2307      	movs	r3, #7
 80073cc:	75fb      	strb	r3, [r7, #23]
	return res;
 80073ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	331a      	adds	r3, #26
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff f842 	bl	8006470 <ld_word>
 80073ec:	4603      	mov	r3, r0
 80073ee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d109      	bne.n	800740c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	3314      	adds	r3, #20
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff f837 	bl	8006470 <ld_word>
 8007402:	4603      	mov	r3, r0
 8007404:	041b      	lsls	r3, r3, #16
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800740c:	68fb      	ldr	r3, [r7, #12]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	331a      	adds	r3, #26
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	b292      	uxth	r2, r2
 800742a:	4611      	mov	r1, r2
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff f85a 	bl	80064e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b03      	cmp	r3, #3
 8007438:	d109      	bne.n	800744e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f103 0214 	add.w	r2, r3, #20
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	0c1b      	lsrs	r3, r3, #16
 8007444:	b29b      	uxth	r3, r3
 8007446:	4619      	mov	r1, r3
 8007448:	4610      	mov	r0, r2
 800744a:	f7ff f84c 	bl	80064e6 <st_word>
	}
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
	...

08007458 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007458:	b590      	push	{r4, r7, lr}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	331a      	adds	r3, #26
 8007466:	4618      	mov	r0, r3
 8007468:	f7ff f802 	bl	8006470 <ld_word>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <cmp_lfn+0x1e>
 8007472:	2300      	movs	r3, #0
 8007474:	e059      	b.n	800752a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800747e:	1e5a      	subs	r2, r3, #1
 8007480:	4613      	mov	r3, r2
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800748c:	2301      	movs	r3, #1
 800748e:	81fb      	strh	r3, [r7, #14]
 8007490:	2300      	movs	r3, #0
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	e033      	b.n	80074fe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007496:	4a27      	ldr	r2, [pc, #156]	@ (8007534 <cmp_lfn+0xdc>)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	4413      	add	r3, r2
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	4413      	add	r3, r2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fe ffe3 	bl	8006470 <ld_word>
 80074aa:	4603      	mov	r3, r0
 80074ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80074ae:	89fb      	ldrh	r3, [r7, #14]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d01a      	beq.n	80074ea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2bfe      	cmp	r3, #254	@ 0xfe
 80074b8:	d812      	bhi.n	80074e0 <cmp_lfn+0x88>
 80074ba:	89bb      	ldrh	r3, [r7, #12]
 80074bc:	4618      	mov	r0, r3
 80074be:	f001 fe49 	bl	8009154 <ff_wtoupper>
 80074c2:	4603      	mov	r3, r0
 80074c4:	461c      	mov	r4, r3
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	617a      	str	r2, [r7, #20]
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	4413      	add	r3, r2
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f001 fe3d 	bl	8009154 <ff_wtoupper>
 80074da:	4603      	mov	r3, r0
 80074dc:	429c      	cmp	r4, r3
 80074de:	d001      	beq.n	80074e4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80074e0:	2300      	movs	r3, #0
 80074e2:	e022      	b.n	800752a <cmp_lfn+0xd2>
			}
			wc = uc;
 80074e4:	89bb      	ldrh	r3, [r7, #12]
 80074e6:	81fb      	strh	r3, [r7, #14]
 80074e8:	e006      	b.n	80074f8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80074ea:	89bb      	ldrh	r3, [r7, #12]
 80074ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d001      	beq.n	80074f8 <cmp_lfn+0xa0>
 80074f4:	2300      	movs	r3, #0
 80074f6:	e018      	b.n	800752a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	3301      	adds	r3, #1
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2b0c      	cmp	r3, #12
 8007502:	d9c8      	bls.n	8007496 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <cmp_lfn+0xd0>
 8007510:	89fb      	ldrh	r3, [r7, #14]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d008      	beq.n	8007528 <cmp_lfn+0xd0>
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	4413      	add	r3, r2
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <cmp_lfn+0xd0>
 8007524:	2300      	movs	r3, #0
 8007526:	e000      	b.n	800752a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007528:	2301      	movs	r3, #1
}
 800752a:	4618      	mov	r0, r3
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	bd90      	pop	{r4, r7, pc}
 8007532:	bf00      	nop
 8007534:	08009ddc 	.word	0x08009ddc

08007538 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	4611      	mov	r1, r2
 8007544:	461a      	mov	r2, r3
 8007546:	460b      	mov	r3, r1
 8007548:	71fb      	strb	r3, [r7, #7]
 800754a:	4613      	mov	r3, r2
 800754c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	330d      	adds	r3, #13
 8007552:	79ba      	ldrb	r2, [r7, #6]
 8007554:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	330b      	adds	r3, #11
 800755a:	220f      	movs	r2, #15
 800755c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	330c      	adds	r3, #12
 8007562:	2200      	movs	r2, #0
 8007564:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	331a      	adds	r3, #26
 800756a:	2100      	movs	r1, #0
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe ffba 	bl	80064e6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	1e5a      	subs	r2, r3, #1
 8007576:	4613      	mov	r3, r2
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	82fb      	strh	r3, [r7, #22]
 8007586:	2300      	movs	r3, #0
 8007588:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800758a:	8afb      	ldrh	r3, [r7, #22]
 800758c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007590:	4293      	cmp	r3, r2
 8007592:	d007      	beq.n	80075a4 <put_lfn+0x6c>
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	61fa      	str	r2, [r7, #28]
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80075a4:	4a17      	ldr	r2, [pc, #92]	@ (8007604 <put_lfn+0xcc>)
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	4413      	add	r3, r2
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	4413      	add	r3, r2
 80075b2:	8afa      	ldrh	r2, [r7, #22]
 80075b4:	4611      	mov	r1, r2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe ff95 	bl	80064e6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80075bc:	8afb      	ldrh	r3, [r7, #22]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d102      	bne.n	80075c8 <put_lfn+0x90>
 80075c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075c6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	3301      	adds	r3, #1
 80075cc:	61bb      	str	r3, [r7, #24]
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b0c      	cmp	r3, #12
 80075d2:	d9da      	bls.n	800758a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80075d4:	8afb      	ldrh	r3, [r7, #22]
 80075d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80075da:	4293      	cmp	r3, r2
 80075dc:	d006      	beq.n	80075ec <put_lfn+0xb4>
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	4413      	add	r3, r2
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d103      	bne.n	80075f4 <put_lfn+0xbc>
 80075ec:	79fb      	ldrb	r3, [r7, #7]
 80075ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075f2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	79fa      	ldrb	r2, [r7, #7]
 80075f8:	701a      	strb	r2, [r3, #0]
}
 80075fa:	bf00      	nop
 80075fc:	3720      	adds	r7, #32
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	08009ddc 	.word	0x08009ddc

08007608 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08c      	sub	sp, #48	@ 0x30
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007616:	220b      	movs	r2, #11
 8007618:	68b9      	ldr	r1, [r7, #8]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f7fe ffaa 	bl	8006574 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	2b05      	cmp	r3, #5
 8007624:	d92b      	bls.n	800767e <gen_numname+0x76>
		sr = seq;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800762a:	e022      	b.n	8007672 <gen_numname+0x6a>
			wc = *lfn++;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	1c9a      	adds	r2, r3, #2
 8007630:	607a      	str	r2, [r7, #4]
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007636:	2300      	movs	r3, #0
 8007638:	62bb      	str	r3, [r7, #40]	@ 0x28
 800763a:	e017      	b.n	800766c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	005a      	lsls	r2, r3, #1
 8007640:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	4413      	add	r3, r2
 8007648:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800764a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800764c:	085b      	lsrs	r3, r3, #1
 800764e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <gen_numname+0x5e>
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007660:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007664:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007668:	3301      	adds	r3, #1
 800766a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800766c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766e:	2b0f      	cmp	r3, #15
 8007670:	d9e4      	bls.n	800763c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1d8      	bne.n	800762c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800767e:	2307      	movs	r3, #7
 8007680:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	b2db      	uxtb	r3, r3
 800768c:	3330      	adds	r3, #48	@ 0x30
 800768e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007692:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007696:	2b39      	cmp	r3, #57	@ 0x39
 8007698:	d904      	bls.n	80076a4 <gen_numname+0x9c>
 800769a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800769e:	3307      	adds	r3, #7
 80076a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80076a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a6:	1e5a      	subs	r2, r3, #1
 80076a8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80076aa:	3330      	adds	r3, #48	@ 0x30
 80076ac:	443b      	add	r3, r7
 80076ae:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80076b2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	091b      	lsrs	r3, r3, #4
 80076ba:	603b      	str	r3, [r7, #0]
	} while (seq);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1df      	bne.n	8007682 <gen_numname+0x7a>
	ns[i] = '~';
 80076c2:	f107 0214 	add.w	r2, r7, #20
 80076c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c8:	4413      	add	r3, r2
 80076ca:	227e      	movs	r2, #126	@ 0x7e
 80076cc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80076ce:	2300      	movs	r3, #0
 80076d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076d2:	e002      	b.n	80076da <gen_numname+0xd2>
 80076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d6:	3301      	adds	r3, #1
 80076d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80076da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076de:	429a      	cmp	r2, r3
 80076e0:	d205      	bcs.n	80076ee <gen_numname+0xe6>
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e6:	4413      	add	r3, r2
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d1f2      	bne.n	80076d4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80076ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f0:	2b07      	cmp	r3, #7
 80076f2:	d807      	bhi.n	8007704 <gen_numname+0xfc>
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80076fa:	3330      	adds	r3, #48	@ 0x30
 80076fc:	443b      	add	r3, r7
 80076fe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007702:	e000      	b.n	8007706 <gen_numname+0xfe>
 8007704:	2120      	movs	r1, #32
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	627a      	str	r2, [r7, #36]	@ 0x24
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	460a      	mov	r2, r1
 8007712:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007716:	2b07      	cmp	r3, #7
 8007718:	d9e9      	bls.n	80076ee <gen_numname+0xe6>
}
 800771a:	bf00      	nop
 800771c:	bf00      	nop
 800771e:	3730      	adds	r7, #48	@ 0x30
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007730:	230b      	movs	r3, #11
 8007732:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	b2da      	uxtb	r2, r3
 8007738:	0852      	lsrs	r2, r2, #1
 800773a:	01db      	lsls	r3, r3, #7
 800773c:	4313      	orrs	r3, r2
 800773e:	b2da      	uxtb	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	1c59      	adds	r1, r3, #1
 8007744:	6079      	str	r1, [r7, #4]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	4413      	add	r3, r2
 800774a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	3b01      	subs	r3, #1
 8007750:	60bb      	str	r3, [r7, #8]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1ed      	bne.n	8007734 <sum_sfn+0x10>
	return sum;
 8007758:	7bfb      	ldrb	r3, [r7, #15]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b086      	sub	sp, #24
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007774:	2100      	movs	r1, #0
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff fca7 	bl	80070ca <dir_sdi>
 800777c:	4603      	mov	r3, r0
 800777e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007780:	7dfb      	ldrb	r3, [r7, #23]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <dir_find+0x24>
 8007786:	7dfb      	ldrb	r3, [r7, #23]
 8007788:	e0a9      	b.n	80078de <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800778a:	23ff      	movs	r3, #255	@ 0xff
 800778c:	753b      	strb	r3, [r7, #20]
 800778e:	7d3b      	ldrb	r3, [r7, #20]
 8007790:	757b      	strb	r3, [r7, #21]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f04f 32ff 	mov.w	r2, #4294967295
 8007798:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	4619      	mov	r1, r3
 80077a0:	6938      	ldr	r0, [r7, #16]
 80077a2:	f7ff f915 	bl	80069d0 <move_window>
 80077a6:	4603      	mov	r3, r0
 80077a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f040 8090 	bne.w	80078d2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80077ba:	7dbb      	ldrb	r3, [r7, #22]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <dir_find+0x60>
 80077c0:	2304      	movs	r3, #4
 80077c2:	75fb      	strb	r3, [r7, #23]
 80077c4:	e08a      	b.n	80078dc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	330b      	adds	r3, #11
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077d2:	73fb      	strb	r3, [r7, #15]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7bfa      	ldrb	r2, [r7, #15]
 80077d8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80077da:	7dbb      	ldrb	r3, [r7, #22]
 80077dc:	2be5      	cmp	r3, #229	@ 0xe5
 80077de:	d007      	beq.n	80077f0 <dir_find+0x8a>
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	f003 0308 	and.w	r3, r3, #8
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d009      	beq.n	80077fe <dir_find+0x98>
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	2b0f      	cmp	r3, #15
 80077ee:	d006      	beq.n	80077fe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80077f0:	23ff      	movs	r3, #255	@ 0xff
 80077f2:	757b      	strb	r3, [r7, #21]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f04f 32ff 	mov.w	r2, #4294967295
 80077fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80077fc:	e05e      	b.n	80078bc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	2b0f      	cmp	r3, #15
 8007802:	d136      	bne.n	8007872 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800780a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	d154      	bne.n	80078bc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007812:	7dbb      	ldrb	r3, [r7, #22]
 8007814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00d      	beq.n	8007838 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	7b5b      	ldrb	r3, [r3, #13]
 8007822:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007824:	7dbb      	ldrb	r3, [r7, #22]
 8007826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800782a:	75bb      	strb	r3, [r7, #22]
 800782c:	7dbb      	ldrb	r3, [r7, #22]
 800782e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	695a      	ldr	r2, [r3, #20]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007838:	7dba      	ldrb	r2, [r7, #22]
 800783a:	7d7b      	ldrb	r3, [r7, #21]
 800783c:	429a      	cmp	r2, r3
 800783e:	d115      	bne.n	800786c <dir_find+0x106>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	330d      	adds	r3, #13
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	7d3a      	ldrb	r2, [r7, #20]
 800784a:	429a      	cmp	r2, r3
 800784c:	d10e      	bne.n	800786c <dir_find+0x106>
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	4619      	mov	r1, r3
 8007858:	4610      	mov	r0, r2
 800785a:	f7ff fdfd 	bl	8007458 <cmp_lfn>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <dir_find+0x106>
 8007864:	7d7b      	ldrb	r3, [r7, #21]
 8007866:	3b01      	subs	r3, #1
 8007868:	b2db      	uxtb	r3, r3
 800786a:	e000      	b.n	800786e <dir_find+0x108>
 800786c:	23ff      	movs	r3, #255	@ 0xff
 800786e:	757b      	strb	r3, [r7, #21]
 8007870:	e024      	b.n	80078bc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007872:	7d7b      	ldrb	r3, [r7, #21]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d109      	bne.n	800788c <dir_find+0x126>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	4618      	mov	r0, r3
 800787e:	f7ff ff51 	bl	8007724 <sum_sfn>
 8007882:	4603      	mov	r3, r0
 8007884:	461a      	mov	r2, r3
 8007886:	7d3b      	ldrb	r3, [r7, #20]
 8007888:	4293      	cmp	r3, r2
 800788a:	d024      	beq.n	80078d6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10a      	bne.n	80078b0 <dir_find+0x14a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a18      	ldr	r0, [r3, #32]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3324      	adds	r3, #36	@ 0x24
 80078a2:	220b      	movs	r2, #11
 80078a4:	4619      	mov	r1, r3
 80078a6:	f7fe fea1 	bl	80065ec <mem_cmp>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d014      	beq.n	80078da <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80078b0:	23ff      	movs	r3, #255	@ 0xff
 80078b2:	757b      	strb	r3, [r7, #21]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ba:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80078bc:	2100      	movs	r1, #0
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fc7e 	bl	80071c0 <dir_next>
 80078c4:	4603      	mov	r3, r0
 80078c6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f43f af65 	beq.w	800779a <dir_find+0x34>
 80078d0:	e004      	b.n	80078dc <dir_find+0x176>
		if (res != FR_OK) break;
 80078d2:	bf00      	nop
 80078d4:	e002      	b.n	80078dc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80078d6:	bf00      	nop
 80078d8:	e000      	b.n	80078dc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80078da:	bf00      	nop

	return res;
 80078dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
	...

080078e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08c      	sub	sp, #48	@ 0x30
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80078fc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <dir_register+0x20>
 8007904:	2306      	movs	r3, #6
 8007906:	e0e0      	b.n	8007aca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007908:	2300      	movs	r3, #0
 800790a:	627b      	str	r3, [r7, #36]	@ 0x24
 800790c:	e002      	b.n	8007914 <dir_register+0x2c>
 800790e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007910:	3301      	adds	r3, #1
 8007912:	627b      	str	r3, [r7, #36]	@ 0x24
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	4413      	add	r3, r2
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1f4      	bne.n	800790e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800792a:	f107 030c 	add.w	r3, r7, #12
 800792e:	220c      	movs	r2, #12
 8007930:	4618      	mov	r0, r3
 8007932:	f7fe fe1f 	bl	8006574 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007936:	7dfb      	ldrb	r3, [r7, #23]
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	d032      	beq.n	80079a6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2240      	movs	r2, #64	@ 0x40
 8007944:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007948:	2301      	movs	r3, #1
 800794a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800794c:	e016      	b.n	800797c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	f107 010c 	add.w	r1, r7, #12
 800795c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795e:	f7ff fe53 	bl	8007608 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff feff 	bl	8007766 <dir_find>
 8007968:	4603      	mov	r3, r0
 800796a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800796e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007978:	3301      	adds	r3, #1
 800797a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800797c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797e:	2b63      	cmp	r3, #99	@ 0x63
 8007980:	d9e5      	bls.n	800794e <dir_register+0x66>
 8007982:	e000      	b.n	8007986 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007984:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007988:	2b64      	cmp	r3, #100	@ 0x64
 800798a:	d101      	bne.n	8007990 <dir_register+0xa8>
 800798c:	2307      	movs	r3, #7
 800798e:	e09c      	b.n	8007aca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007990:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007994:	2b04      	cmp	r3, #4
 8007996:	d002      	beq.n	800799e <dir_register+0xb6>
 8007998:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800799c:	e095      	b.n	8007aca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800799e:	7dfa      	ldrb	r2, [r7, #23]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d007      	beq.n	80079c0 <dir_register+0xd8>
 80079b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b2:	330c      	adds	r3, #12
 80079b4:	4a47      	ldr	r2, [pc, #284]	@ (8007ad4 <dir_register+0x1ec>)
 80079b6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ba:	089b      	lsrs	r3, r3, #2
 80079bc:	3301      	adds	r3, #1
 80079be:	e000      	b.n	80079c2 <dir_register+0xda>
 80079c0:	2301      	movs	r3, #1
 80079c2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80079c4:	6a39      	ldr	r1, [r7, #32]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7ff fcbf 	bl	800734a <dir_alloc>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80079d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d148      	bne.n	8007a6c <dir_register+0x184>
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	3b01      	subs	r3, #1
 80079de:	623b      	str	r3, [r7, #32]
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d042      	beq.n	8007a6c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	695a      	ldr	r2, [r3, #20]
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	015b      	lsls	r3, r3, #5
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff fb69 	bl	80070ca <dir_sdi>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80079fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d132      	bne.n	8007a6c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3324      	adds	r3, #36	@ 0x24
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff fe8a 	bl	8007724 <sum_sfn>
 8007a10:	4603      	mov	r3, r0
 8007a12:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	69f8      	ldr	r0, [r7, #28]
 8007a1c:	f7fe ffd8 	bl	80069d0 <move_window>
 8007a20:	4603      	mov	r3, r0
 8007a22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8007a26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d11d      	bne.n	8007a6a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	68d8      	ldr	r0, [r3, #12]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a19      	ldr	r1, [r3, #32]
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	7efb      	ldrb	r3, [r7, #27]
 8007a3c:	f7ff fd7c 	bl	8007538 <put_lfn>
				fs->wflag = 1;
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	2201      	movs	r2, #1
 8007a44:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007a46:	2100      	movs	r1, #0
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff fbb9 	bl	80071c0 <dir_next>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007a54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d107      	bne.n	8007a6c <dir_register+0x184>
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	623b      	str	r3, [r7, #32]
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1d5      	bne.n	8007a14 <dir_register+0x12c>
 8007a68:	e000      	b.n	8007a6c <dir_register+0x184>
				if (res != FR_OK) break;
 8007a6a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d128      	bne.n	8007ac6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	69f8      	ldr	r0, [r7, #28]
 8007a7c:	f7fe ffa8 	bl	80069d0 <move_window>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007a86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d11b      	bne.n	8007ac6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	2220      	movs	r2, #32
 8007a94:	2100      	movs	r1, #0
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fd8d 	bl	80065b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a18      	ldr	r0, [r3, #32]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3324      	adds	r3, #36	@ 0x24
 8007aa4:	220b      	movs	r2, #11
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	f7fe fd64 	bl	8006574 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	330c      	adds	r3, #12
 8007ab8:	f002 0218 	and.w	r2, r2, #24
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3730      	adds	r7, #48	@ 0x30
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	4ec4ec4f 	.word	0x4ec4ec4f

08007ad8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	@ 0x28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	613b      	str	r3, [r7, #16]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	2300      	movs	r3, #0
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	61ba      	str	r2, [r7, #24]
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	4413      	add	r3, r2
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007b06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b08:	2b1f      	cmp	r3, #31
 8007b0a:	d940      	bls.n	8007b8e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007b0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b0e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007b10:	d006      	beq.n	8007b20 <create_name+0x48>
 8007b12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b14:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b16:	d110      	bne.n	8007b3a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007b18:	e002      	b.n	8007b20 <create_name+0x48>
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	61bb      	str	r3, [r7, #24]
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	4413      	add	r3, r2
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b2f      	cmp	r3, #47	@ 0x2f
 8007b2a:	d0f6      	beq.n	8007b1a <create_name+0x42>
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	4413      	add	r3, r2
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b36:	d0f0      	beq.n	8007b1a <create_name+0x42>
			break;
 8007b38:	e02a      	b.n	8007b90 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2bfe      	cmp	r3, #254	@ 0xfe
 8007b3e:	d901      	bls.n	8007b44 <create_name+0x6c>
 8007b40:	2306      	movs	r3, #6
 8007b42:	e17d      	b.n	8007e40 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007b44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007b4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 fac4 	bl	80090dc <ff_convert>
 8007b54:	4603      	mov	r3, r0
 8007b56:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007b58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <create_name+0x8a>
 8007b5e:	2306      	movs	r3, #6
 8007b60:	e16e      	b.n	8007e40 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007b62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b64:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b66:	d809      	bhi.n	8007b7c <create_name+0xa4>
 8007b68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	488d      	ldr	r0, [pc, #564]	@ (8007da4 <create_name+0x2cc>)
 8007b6e:	f7fe fd64 	bl	800663a <chk_chr>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <create_name+0xa4>
 8007b78:	2306      	movs	r3, #6
 8007b7a:	e161      	b.n	8007e40 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	617a      	str	r2, [r7, #20]
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4413      	add	r3, r2
 8007b88:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007b8a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007b8c:	e7b4      	b.n	8007af8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007b8e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	441a      	add	r2, r3
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007b9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b9c:	2b1f      	cmp	r3, #31
 8007b9e:	d801      	bhi.n	8007ba4 <create_name+0xcc>
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	e000      	b.n	8007ba6 <create_name+0xce>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007baa:	e011      	b.n	8007bd0 <create_name+0xf8>
		w = lfn[di - 1];
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	005b      	lsls	r3, r3, #1
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4413      	add	r3, r2
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007bbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bc0:	2b20      	cmp	r3, #32
 8007bc2:	d002      	beq.n	8007bca <create_name+0xf2>
 8007bc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bc8:	d106      	bne.n	8007bd8 <create_name+0x100>
		di--;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1ea      	bne.n	8007bac <create_name+0xd4>
 8007bd6:	e000      	b.n	8007bda <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007bd8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4413      	add	r3, r2
 8007be2:	2200      	movs	r2, #0
 8007be4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <create_name+0x118>
 8007bec:	2306      	movs	r3, #6
 8007bee:	e127      	b.n	8007e40 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3324      	adds	r3, #36	@ 0x24
 8007bf4:	220b      	movs	r2, #11
 8007bf6:	2120      	movs	r1, #32
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe fcdc 	bl	80065b6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61bb      	str	r3, [r7, #24]
 8007c02:	e002      	b.n	8007c0a <create_name+0x132>
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	3301      	adds	r3, #1
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4413      	add	r3, r2
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d0f5      	beq.n	8007c04 <create_name+0x12c>
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c24:	d0ee      	beq.n	8007c04 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d009      	beq.n	8007c40 <create_name+0x168>
 8007c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c30:	f043 0303 	orr.w	r3, r3, #3
 8007c34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007c38:	e002      	b.n	8007c40 <create_name+0x168>
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <create_name+0x182>
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	005b      	lsls	r3, r3, #1
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4413      	add	r3, r2
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c58:	d1ef      	bne.n	8007c3a <create_name+0x162>

	i = b = 0; ni = 8;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007c60:	2300      	movs	r3, #0
 8007c62:	623b      	str	r3, [r7, #32]
 8007c64:	2308      	movs	r3, #8
 8007c66:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	61ba      	str	r2, [r7, #24]
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	4413      	add	r3, r2
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007c78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 8090 	beq.w	8007da0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007c80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c82:	2b20      	cmp	r3, #32
 8007c84:	d006      	beq.n	8007c94 <create_name+0x1bc>
 8007c86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c88:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c8a:	d10a      	bne.n	8007ca2 <create_name+0x1ca>
 8007c8c:	69ba      	ldr	r2, [r7, #24]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d006      	beq.n	8007ca2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c98:	f043 0303 	orr.w	r3, r3, #3
 8007c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007ca0:	e07d      	b.n	8007d9e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007ca2:	6a3a      	ldr	r2, [r7, #32]
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d203      	bcs.n	8007cb2 <create_name+0x1da>
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d123      	bne.n	8007cfa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	2b0b      	cmp	r3, #11
 8007cb6:	d106      	bne.n	8007cc6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cbc:	f043 0303 	orr.w	r3, r3, #3
 8007cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007cc4:	e075      	b.n	8007db2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d005      	beq.n	8007cda <create_name+0x202>
 8007cce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cd2:	f043 0303 	orr.w	r3, r3, #3
 8007cd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d866      	bhi.n	8007db0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	61bb      	str	r3, [r7, #24]
 8007ce6:	2308      	movs	r3, #8
 8007ce8:	623b      	str	r3, [r7, #32]
 8007cea:	230b      	movs	r3, #11
 8007cec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007cee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007cf8:	e051      	b.n	8007d9e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007cfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8007cfe:	d914      	bls.n	8007d2a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007d00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d02:	2100      	movs	r1, #0
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 f9e9 	bl	80090dc <ff_convert>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007d0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d004      	beq.n	8007d1e <create_name+0x246>
 8007d14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d16:	3b80      	subs	r3, #128	@ 0x80
 8007d18:	4a23      	ldr	r2, [pc, #140]	@ (8007da8 <create_name+0x2d0>)
 8007d1a:	5cd3      	ldrb	r3, [r2, r3]
 8007d1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d22:	f043 0302 	orr.w	r3, r3, #2
 8007d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007d2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d007      	beq.n	8007d40 <create_name+0x268>
 8007d30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d32:	4619      	mov	r1, r3
 8007d34:	481d      	ldr	r0, [pc, #116]	@ (8007dac <create_name+0x2d4>)
 8007d36:	f7fe fc80 	bl	800663a <chk_chr>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d008      	beq.n	8007d52 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007d40:	235f      	movs	r3, #95	@ 0x5f
 8007d42:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d48:	f043 0303 	orr.w	r3, r3, #3
 8007d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007d50:	e01b      	b.n	8007d8a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007d52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d54:	2b40      	cmp	r3, #64	@ 0x40
 8007d56:	d909      	bls.n	8007d6c <create_name+0x294>
 8007d58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d5a:	2b5a      	cmp	r3, #90	@ 0x5a
 8007d5c:	d806      	bhi.n	8007d6c <create_name+0x294>
					b |= 2;
 8007d5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d62:	f043 0302 	orr.w	r3, r3, #2
 8007d66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007d6a:	e00e      	b.n	8007d8a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007d6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d6e:	2b60      	cmp	r3, #96	@ 0x60
 8007d70:	d90b      	bls.n	8007d8a <create_name+0x2b2>
 8007d72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d74:	2b7a      	cmp	r3, #122	@ 0x7a
 8007d76:	d808      	bhi.n	8007d8a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007d78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d7c:	f043 0301 	orr.w	r3, r3, #1
 8007d80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007d84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d86:	3b20      	subs	r3, #32
 8007d88:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	623a      	str	r2, [r7, #32]
 8007d90:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007d92:	b2d1      	uxtb	r1, r2
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	4413      	add	r3, r2
 8007d98:	460a      	mov	r2, r1
 8007d9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007d9e:	e763      	b.n	8007c68 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007da0:	bf00      	nop
 8007da2:	e006      	b.n	8007db2 <create_name+0x2da>
 8007da4:	08009ce0 	.word	0x08009ce0
 8007da8:	08009d5c 	.word	0x08009d5c
 8007dac:	08009cec 	.word	0x08009cec
			if (si > di) break;			/* No extension */
 8007db0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007db8:	2be5      	cmp	r3, #229	@ 0xe5
 8007dba:	d103      	bne.n	8007dc4 <create_name+0x2ec>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2205      	movs	r2, #5
 8007dc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	2b08      	cmp	r3, #8
 8007dc8:	d104      	bne.n	8007dd4 <create_name+0x2fc>
 8007dca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007dd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007dd8:	f003 030c 	and.w	r3, r3, #12
 8007ddc:	2b0c      	cmp	r3, #12
 8007dde:	d005      	beq.n	8007dec <create_name+0x314>
 8007de0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d105      	bne.n	8007df8 <create_name+0x320>
 8007dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007df0:	f043 0302 	orr.w	r3, r3, #2
 8007df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d117      	bne.n	8007e34 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007e04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e08:	f003 0303 	and.w	r3, r3, #3
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d105      	bne.n	8007e1c <create_name+0x344>
 8007e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e14:	f043 0310 	orr.w	r3, r3, #16
 8007e18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007e1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e20:	f003 030c 	and.w	r3, r3, #12
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d105      	bne.n	8007e34 <create_name+0x35c>
 8007e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e2c:	f043 0308 	orr.w	r3, r3, #8
 8007e30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007e3a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007e3e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3728      	adds	r7, #40	@ 0x28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007e5c:	e002      	b.n	8007e64 <follow_path+0x1c>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	3301      	adds	r3, #1
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b2f      	cmp	r3, #47	@ 0x2f
 8007e6a:	d0f8      	beq.n	8007e5e <follow_path+0x16>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b5c      	cmp	r3, #92	@ 0x5c
 8007e72:	d0f4      	beq.n	8007e5e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	2200      	movs	r2, #0
 8007e78:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b1f      	cmp	r3, #31
 8007e80:	d80a      	bhi.n	8007e98 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2280      	movs	r2, #128	@ 0x80
 8007e86:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7ff f91c 	bl	80070ca <dir_sdi>
 8007e92:	4603      	mov	r3, r0
 8007e94:	75fb      	strb	r3, [r7, #23]
 8007e96:	e043      	b.n	8007f20 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e98:	463b      	mov	r3, r7
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff fe1b 	bl	8007ad8 <create_name>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d134      	bne.n	8007f16 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff fc5a 	bl	8007766 <dir_find>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007ebc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d127      	bne.n	8007f1a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007eca:	7afb      	ldrb	r3, [r7, #11]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d122      	bne.n	8007f1a <follow_path+0xd2>
 8007ed4:	2305      	movs	r3, #5
 8007ed6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007ed8:	e01f      	b.n	8007f1a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007eda:	7afb      	ldrb	r3, [r7, #11]
 8007edc:	f003 0304 	and.w	r3, r3, #4
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d11c      	bne.n	8007f1e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	799b      	ldrb	r3, [r3, #6]
 8007ee8:	f003 0310 	and.w	r3, r3, #16
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007ef0:	2305      	movs	r3, #5
 8007ef2:	75fb      	strb	r3, [r7, #23]
 8007ef4:	e014      	b.n	8007f20 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f04:	4413      	add	r3, r2
 8007f06:	4619      	mov	r1, r3
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f7ff fa65 	bl	80073d8 <ld_clust>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f14:	e7c0      	b.n	8007e98 <follow_path+0x50>
			if (res != FR_OK) break;
 8007f16:	bf00      	nop
 8007f18:	e002      	b.n	8007f20 <follow_path+0xd8>
				break;
 8007f1a:	bf00      	nop
 8007f1c:	e000      	b.n	8007f20 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f1e:	bf00      	nop
			}
		}
	}

	return res;
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b087      	sub	sp, #28
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295
 8007f36:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d031      	beq.n	8007fa4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	e002      	b.n	8007f4e <get_ldnumber+0x24>
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b1f      	cmp	r3, #31
 8007f54:	d903      	bls.n	8007f5e <get_ldnumber+0x34>
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	2b3a      	cmp	r3, #58	@ 0x3a
 8007f5c:	d1f4      	bne.n	8007f48 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b3a      	cmp	r3, #58	@ 0x3a
 8007f64:	d11c      	bne.n	8007fa0 <get_ldnumber+0x76>
			tp = *path;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	60fa      	str	r2, [r7, #12]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	3b30      	subs	r3, #48	@ 0x30
 8007f76:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b09      	cmp	r3, #9
 8007f7c:	d80e      	bhi.n	8007f9c <get_ldnumber+0x72>
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d10a      	bne.n	8007f9c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d107      	bne.n	8007f9c <get_ldnumber+0x72>
					vol = (int)i;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	3301      	adds	r3, #1
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	e002      	b.n	8007fa6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007fa4:	693b      	ldr	r3, [r7, #16]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
	...

08007fb4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	70da      	strb	r2, [r3, #3]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fca:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7fe fcfe 	bl	80069d0 <move_window>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <check_fs+0x2a>
 8007fda:	2304      	movs	r3, #4
 8007fdc:	e038      	b.n	8008050 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3334      	adds	r3, #52	@ 0x34
 8007fe2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe fa42 	bl	8006470 <ld_word>
 8007fec:	4603      	mov	r3, r0
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d001      	beq.n	8007ffc <check_fs+0x48>
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e029      	b.n	8008050 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008002:	2be9      	cmp	r3, #233	@ 0xe9
 8008004:	d009      	beq.n	800801a <check_fs+0x66>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800800c:	2beb      	cmp	r3, #235	@ 0xeb
 800800e:	d11e      	bne.n	800804e <check_fs+0x9a>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008016:	2b90      	cmp	r3, #144	@ 0x90
 8008018:	d119      	bne.n	800804e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	3334      	adds	r3, #52	@ 0x34
 800801e:	3336      	adds	r3, #54	@ 0x36
 8008020:	4618      	mov	r0, r3
 8008022:	f7fe fa3d 	bl	80064a0 <ld_dword>
 8008026:	4603      	mov	r3, r0
 8008028:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800802c:	4a0a      	ldr	r2, [pc, #40]	@ (8008058 <check_fs+0xa4>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d101      	bne.n	8008036 <check_fs+0x82>
 8008032:	2300      	movs	r3, #0
 8008034:	e00c      	b.n	8008050 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	3334      	adds	r3, #52	@ 0x34
 800803a:	3352      	adds	r3, #82	@ 0x52
 800803c:	4618      	mov	r0, r3
 800803e:	f7fe fa2f 	bl	80064a0 <ld_dword>
 8008042:	4603      	mov	r3, r0
 8008044:	4a05      	ldr	r2, [pc, #20]	@ (800805c <check_fs+0xa8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d101      	bne.n	800804e <check_fs+0x9a>
 800804a:	2300      	movs	r3, #0
 800804c:	e000      	b.n	8008050 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800804e:	2302      	movs	r3, #2
}
 8008050:	4618      	mov	r0, r3
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	00544146 	.word	0x00544146
 800805c:	33544146 	.word	0x33544146

08008060 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b096      	sub	sp, #88	@ 0x58
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4613      	mov	r3, r2
 800806c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f7ff ff58 	bl	8007f2a <get_ldnumber>
 800807a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800807c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800807e:	2b00      	cmp	r3, #0
 8008080:	da01      	bge.n	8008086 <find_volume+0x26>
 8008082:	230b      	movs	r3, #11
 8008084:	e230      	b.n	80084e8 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008086:	4aa1      	ldr	r2, [pc, #644]	@ (800830c <find_volume+0x2ac>)
 8008088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800808a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800808e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <find_volume+0x3a>
 8008096:	230c      	movs	r3, #12
 8008098:	e226      	b.n	80084e8 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800809e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	f023 0301 	bic.w	r3, r3, #1
 80080a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80080a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01a      	beq.n	80080e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80080b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b2:	785b      	ldrb	r3, [r3, #1]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fe f93b 	bl	8006330 <disk_status>
 80080ba:	4603      	mov	r3, r0
 80080bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80080c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10c      	bne.n	80080e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80080cc:	79fb      	ldrb	r3, [r7, #7]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d007      	beq.n	80080e2 <find_volume+0x82>
 80080d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80080de:	230a      	movs	r3, #10
 80080e0:	e202      	b.n	80084e8 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80080e2:	2300      	movs	r3, #0
 80080e4:	e200      	b.n	80084e8 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80080e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e8:	2200      	movs	r2, #0
 80080ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80080ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80080f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f6:	785b      	ldrb	r3, [r3, #1]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fe f933 	bl	8006364 <disk_initialize>
 80080fe:	4603      	mov	r3, r0
 8008100:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008104:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008110:	2303      	movs	r3, #3
 8008112:	e1e9      	b.n	80084e8 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d007      	beq.n	800812a <find_volume+0xca>
 800811a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800811e:	f003 0304 	and.w	r3, r3, #4
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008126:	230a      	movs	r3, #10
 8008128:	e1de      	b.n	80084e8 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800812e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008130:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008132:	f7ff ff3f 	bl	8007fb4 <check_fs>
 8008136:	4603      	mov	r3, r0
 8008138:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800813c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008140:	2b02      	cmp	r3, #2
 8008142:	d149      	bne.n	80081d8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008144:	2300      	movs	r3, #0
 8008146:	643b      	str	r3, [r7, #64]	@ 0x40
 8008148:	e01e      	b.n	8008188 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008152:	011b      	lsls	r3, r3, #4
 8008154:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008158:	4413      	add	r3, r2
 800815a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800815c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815e:	3304      	adds	r3, #4
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d006      	beq.n	8008174 <find_volume+0x114>
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	3308      	adds	r3, #8
 800816a:	4618      	mov	r0, r3
 800816c:	f7fe f998 	bl	80064a0 <ld_dword>
 8008170:	4602      	mov	r2, r0
 8008172:	e000      	b.n	8008176 <find_volume+0x116>
 8008174:	2200      	movs	r2, #0
 8008176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	3358      	adds	r3, #88	@ 0x58
 800817c:	443b      	add	r3, r7
 800817e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008184:	3301      	adds	r3, #1
 8008186:	643b      	str	r3, [r7, #64]	@ 0x40
 8008188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800818a:	2b03      	cmp	r3, #3
 800818c:	d9dd      	bls.n	800814a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800818e:	2300      	movs	r3, #0
 8008190:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <find_volume+0x13e>
 8008198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800819a:	3b01      	subs	r3, #1
 800819c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800819e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	3358      	adds	r3, #88	@ 0x58
 80081a4:	443b      	add	r3, r7
 80081a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80081aa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80081ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d005      	beq.n	80081be <find_volume+0x15e>
 80081b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80081b6:	f7ff fefd 	bl	8007fb4 <check_fs>
 80081ba:	4603      	mov	r3, r0
 80081bc:	e000      	b.n	80081c0 <find_volume+0x160>
 80081be:	2303      	movs	r3, #3
 80081c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80081c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d905      	bls.n	80081d8 <find_volume+0x178>
 80081cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081ce:	3301      	adds	r3, #1
 80081d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80081d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d9e2      	bls.n	800819e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80081d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80081dc:	2b04      	cmp	r3, #4
 80081de:	d101      	bne.n	80081e4 <find_volume+0x184>
 80081e0:	2301      	movs	r3, #1
 80081e2:	e181      	b.n	80084e8 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80081e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d901      	bls.n	80081f0 <find_volume+0x190>
 80081ec:	230d      	movs	r3, #13
 80081ee:	e17b      	b.n	80084e8 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80081f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f2:	3334      	adds	r3, #52	@ 0x34
 80081f4:	330b      	adds	r3, #11
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe f93a 	bl	8006470 <ld_word>
 80081fc:	4603      	mov	r3, r0
 80081fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008202:	d001      	beq.n	8008208 <find_volume+0x1a8>
 8008204:	230d      	movs	r3, #13
 8008206:	e16f      	b.n	80084e8 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820a:	3334      	adds	r3, #52	@ 0x34
 800820c:	3316      	adds	r3, #22
 800820e:	4618      	mov	r0, r3
 8008210:	f7fe f92e 	bl	8006470 <ld_word>
 8008214:	4603      	mov	r3, r0
 8008216:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <find_volume+0x1cc>
 800821e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008220:	3334      	adds	r3, #52	@ 0x34
 8008222:	3324      	adds	r3, #36	@ 0x24
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe f93b 	bl	80064a0 <ld_dword>
 800822a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800822c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008230:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008234:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800823c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823e:	789b      	ldrb	r3, [r3, #2]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d005      	beq.n	8008250 <find_volume+0x1f0>
 8008244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008246:	789b      	ldrb	r3, [r3, #2]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d001      	beq.n	8008250 <find_volume+0x1f0>
 800824c:	230d      	movs	r3, #13
 800824e:	e14b      	b.n	80084e8 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008252:	789b      	ldrb	r3, [r3, #2]
 8008254:	461a      	mov	r2, r3
 8008256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008258:	fb02 f303 	mul.w	r3, r2, r3
 800825c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800825e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008264:	461a      	mov	r2, r3
 8008266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008268:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800826a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826c:	895b      	ldrh	r3, [r3, #10]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d008      	beq.n	8008284 <find_volume+0x224>
 8008272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008274:	895b      	ldrh	r3, [r3, #10]
 8008276:	461a      	mov	r2, r3
 8008278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827a:	895b      	ldrh	r3, [r3, #10]
 800827c:	3b01      	subs	r3, #1
 800827e:	4013      	ands	r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <find_volume+0x228>
 8008284:	230d      	movs	r3, #13
 8008286:	e12f      	b.n	80084e8 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828a:	3334      	adds	r3, #52	@ 0x34
 800828c:	3311      	adds	r3, #17
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe f8ee 	bl	8006470 <ld_word>
 8008294:	4603      	mov	r3, r0
 8008296:	461a      	mov	r2, r3
 8008298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800829c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829e:	891b      	ldrh	r3, [r3, #8]
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <find_volume+0x24e>
 80082aa:	230d      	movs	r3, #13
 80082ac:	e11c      	b.n	80084e8 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80082ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b0:	3334      	adds	r3, #52	@ 0x34
 80082b2:	3313      	adds	r3, #19
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe f8db 	bl	8006470 <ld_word>
 80082ba:	4603      	mov	r3, r0
 80082bc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80082be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d106      	bne.n	80082d2 <find_volume+0x272>
 80082c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c6:	3334      	adds	r3, #52	@ 0x34
 80082c8:	3320      	adds	r3, #32
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe f8e8 	bl	80064a0 <ld_dword>
 80082d0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80082d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d4:	3334      	adds	r3, #52	@ 0x34
 80082d6:	330e      	adds	r3, #14
 80082d8:	4618      	mov	r0, r3
 80082da:	f7fe f8c9 	bl	8006470 <ld_word>
 80082de:	4603      	mov	r3, r0
 80082e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80082e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <find_volume+0x28c>
 80082e8:	230d      	movs	r3, #13
 80082ea:	e0fd      	b.n	80084e8 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80082ec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80082ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082f0:	4413      	add	r3, r2
 80082f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082f4:	8912      	ldrh	r2, [r2, #8]
 80082f6:	0912      	lsrs	r2, r2, #4
 80082f8:	b292      	uxth	r2, r2
 80082fa:	4413      	add	r3, r2
 80082fc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80082fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008302:	429a      	cmp	r2, r3
 8008304:	d204      	bcs.n	8008310 <find_volume+0x2b0>
 8008306:	230d      	movs	r3, #13
 8008308:	e0ee      	b.n	80084e8 <find_volume+0x488>
 800830a:	bf00      	nop
 800830c:	20001080 	.word	0x20001080
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008310:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008318:	8952      	ldrh	r2, [r2, #10]
 800831a:	fbb3 f3f2 	udiv	r3, r3, r2
 800831e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <find_volume+0x2ca>
 8008326:	230d      	movs	r3, #13
 8008328:	e0de      	b.n	80084e8 <find_volume+0x488>
		fmt = FS_FAT32;
 800832a:	2303      	movs	r3, #3
 800832c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008332:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008336:	4293      	cmp	r3, r2
 8008338:	d802      	bhi.n	8008340 <find_volume+0x2e0>
 800833a:	2302      	movs	r3, #2
 800833c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008342:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008346:	4293      	cmp	r3, r2
 8008348:	d802      	bhi.n	8008350 <find_volume+0x2f0>
 800834a:	2301      	movs	r3, #1
 800834c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008352:	1c9a      	adds	r2, r3, #2
 8008354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008356:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800835c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800835e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008362:	441a      	add	r2, r3
 8008364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008366:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008368:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	441a      	add	r2, r3
 800836e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008370:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008372:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008376:	2b03      	cmp	r3, #3
 8008378:	d11e      	bne.n	80083b8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800837a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837c:	3334      	adds	r3, #52	@ 0x34
 800837e:	332a      	adds	r3, #42	@ 0x2a
 8008380:	4618      	mov	r0, r3
 8008382:	f7fe f875 	bl	8006470 <ld_word>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <find_volume+0x330>
 800838c:	230d      	movs	r3, #13
 800838e:	e0ab      	b.n	80084e8 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008392:	891b      	ldrh	r3, [r3, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <find_volume+0x33c>
 8008398:	230d      	movs	r3, #13
 800839a:	e0a5      	b.n	80084e8 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800839c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839e:	3334      	adds	r3, #52	@ 0x34
 80083a0:	332c      	adds	r3, #44	@ 0x2c
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe f87c 	bl	80064a0 <ld_dword>
 80083a8:	4602      	mov	r2, r0
 80083aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ac:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80083ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80083b6:	e01f      	b.n	80083f8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80083b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ba:	891b      	ldrh	r3, [r3, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <find_volume+0x364>
 80083c0:	230d      	movs	r3, #13
 80083c2:	e091      	b.n	80084e8 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80083c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ca:	441a      	add	r2, r3
 80083cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ce:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80083d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d103      	bne.n	80083e0 <find_volume+0x380>
 80083d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	e00a      	b.n	80083f6 <find_volume+0x396>
 80083e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e2:	699a      	ldr	r2, [r3, #24]
 80083e4:	4613      	mov	r3, r2
 80083e6:	005b      	lsls	r3, r3, #1
 80083e8:	4413      	add	r3, r2
 80083ea:	085a      	lsrs	r2, r3, #1
 80083ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80083f6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80083f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fa:	69da      	ldr	r2, [r3, #28]
 80083fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083fe:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008402:	0a5b      	lsrs	r3, r3, #9
 8008404:	429a      	cmp	r2, r3
 8008406:	d201      	bcs.n	800840c <find_volume+0x3ac>
 8008408:	230d      	movs	r3, #13
 800840a:	e06d      	b.n	80084e8 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800840c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840e:	f04f 32ff 	mov.w	r2, #4294967295
 8008412:	615a      	str	r2, [r3, #20]
 8008414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008416:	695a      	ldr	r2, [r3, #20]
 8008418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800841c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841e:	2280      	movs	r2, #128	@ 0x80
 8008420:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008422:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008426:	2b03      	cmp	r3, #3
 8008428:	d149      	bne.n	80084be <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800842a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842c:	3334      	adds	r3, #52	@ 0x34
 800842e:	3330      	adds	r3, #48	@ 0x30
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe f81d 	bl	8006470 <ld_word>
 8008436:	4603      	mov	r3, r0
 8008438:	2b01      	cmp	r3, #1
 800843a:	d140      	bne.n	80084be <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800843c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800843e:	3301      	adds	r3, #1
 8008440:	4619      	mov	r1, r3
 8008442:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008444:	f7fe fac4 	bl	80069d0 <move_window>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d137      	bne.n	80084be <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800844e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008450:	2200      	movs	r2, #0
 8008452:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008456:	3334      	adds	r3, #52	@ 0x34
 8008458:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe f807 	bl	8006470 <ld_word>
 8008462:	4603      	mov	r3, r0
 8008464:	461a      	mov	r2, r3
 8008466:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800846a:	429a      	cmp	r2, r3
 800846c:	d127      	bne.n	80084be <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800846e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008470:	3334      	adds	r3, #52	@ 0x34
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe f814 	bl	80064a0 <ld_dword>
 8008478:	4603      	mov	r3, r0
 800847a:	4a1d      	ldr	r2, [pc, #116]	@ (80084f0 <find_volume+0x490>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d11e      	bne.n	80084be <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008482:	3334      	adds	r3, #52	@ 0x34
 8008484:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe f809 	bl	80064a0 <ld_dword>
 800848e:	4603      	mov	r3, r0
 8008490:	4a18      	ldr	r2, [pc, #96]	@ (80084f4 <find_volume+0x494>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d113      	bne.n	80084be <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008498:	3334      	adds	r3, #52	@ 0x34
 800849a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fd fffe 	bl	80064a0 <ld_dword>
 80084a4:	4602      	mov	r2, r0
 80084a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80084aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ac:	3334      	adds	r3, #52	@ 0x34
 80084ae:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fd fff4 	bl	80064a0 <ld_dword>
 80084b8:	4602      	mov	r2, r0
 80084ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084bc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80084be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80084c4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80084c6:	4b0c      	ldr	r3, [pc, #48]	@ (80084f8 <find_volume+0x498>)
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	3301      	adds	r3, #1
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	4b0a      	ldr	r3, [pc, #40]	@ (80084f8 <find_volume+0x498>)
 80084d0:	801a      	strh	r2, [r3, #0]
 80084d2:	4b09      	ldr	r3, [pc, #36]	@ (80084f8 <find_volume+0x498>)
 80084d4:	881a      	ldrh	r2, [r3, #0]
 80084d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80084da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084dc:	4a07      	ldr	r2, [pc, #28]	@ (80084fc <find_volume+0x49c>)
 80084de:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80084e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80084e2:	f7fe fa0d 	bl	8006900 <clear_lock>
#endif
	return FR_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3758      	adds	r7, #88	@ 0x58
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	41615252 	.word	0x41615252
 80084f4:	61417272 	.word	0x61417272
 80084f8:	20001084 	.word	0x20001084
 80084fc:	200010a8 	.word	0x200010a8

08008500 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800850a:	2309      	movs	r3, #9
 800850c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d01c      	beq.n	800854e <validate+0x4e>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d018      	beq.n	800854e <validate+0x4e>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d013      	beq.n	800854e <validate+0x4e>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	889a      	ldrh	r2, [r3, #4]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	88db      	ldrh	r3, [r3, #6]
 8008530:	429a      	cmp	r2, r3
 8008532:	d10c      	bne.n	800854e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	785b      	ldrb	r3, [r3, #1]
 800853a:	4618      	mov	r0, r3
 800853c:	f7fd fef8 	bl	8006330 <disk_status>
 8008540:	4603      	mov	r3, r0
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <validate+0x4e>
			res = FR_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d102      	bne.n	800855a <validate+0x5a>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	e000      	b.n	800855c <validate+0x5c>
 800855a:	2300      	movs	r3, #0
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	6013      	str	r3, [r2, #0]
	return res;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800857e:	f107 0310 	add.w	r3, r7, #16
 8008582:	4618      	mov	r0, r3
 8008584:	f7ff fcd1 	bl	8007f2a <get_ldnumber>
 8008588:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	2b00      	cmp	r3, #0
 800858e:	da01      	bge.n	8008594 <f_mount+0x28>
 8008590:	230b      	movs	r3, #11
 8008592:	e02b      	b.n	80085ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008594:	4a17      	ldr	r2, [pc, #92]	@ (80085f4 <f_mount+0x88>)
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800859c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80085a4:	69b8      	ldr	r0, [r7, #24]
 80085a6:	f7fe f9ab 	bl	8006900 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	2200      	movs	r2, #0
 80085ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	490d      	ldr	r1, [pc, #52]	@ (80085f4 <f_mount+0x88>)
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <f_mount+0x66>
 80085cc:	79fb      	ldrb	r3, [r7, #7]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d001      	beq.n	80085d6 <f_mount+0x6a>
 80085d2:	2300      	movs	r3, #0
 80085d4:	e00a      	b.n	80085ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80085d6:	f107 010c 	add.w	r1, r7, #12
 80085da:	f107 0308 	add.w	r3, r7, #8
 80085de:	2200      	movs	r2, #0
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7ff fd3d 	bl	8008060 <find_volume>
 80085e6:	4603      	mov	r3, r0
 80085e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3720      	adds	r7, #32
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20001080 	.word	0x20001080

080085f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b09a      	sub	sp, #104	@ 0x68
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	4613      	mov	r3, r2
 8008604:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <f_open+0x18>
 800860c:	2309      	movs	r3, #9
 800860e:	e1a9      	b.n	8008964 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008616:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008618:	79fa      	ldrb	r2, [r7, #7]
 800861a:	f107 0114 	add.w	r1, r7, #20
 800861e:	f107 0308 	add.w	r3, r7, #8
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fd1c 	bl	8008060 <find_volume>
 8008628:	4603      	mov	r3, r0
 800862a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800862e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008632:	2b00      	cmp	r3, #0
 8008634:	f040 818d 	bne.w	8008952 <f_open+0x35a>
		dj.obj.fs = fs;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	f107 0318 	add.w	r3, r7, #24
 8008642:	4611      	mov	r1, r2
 8008644:	4618      	mov	r0, r3
 8008646:	f7ff fbff 	bl	8007e48 <follow_path>
 800864a:	4603      	mov	r3, r0
 800864c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008650:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008654:	2b00      	cmp	r3, #0
 8008656:	d118      	bne.n	800868a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008658:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800865c:	b25b      	sxtb	r3, r3
 800865e:	2b00      	cmp	r3, #0
 8008660:	da03      	bge.n	800866a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008662:	2306      	movs	r3, #6
 8008664:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008668:	e00f      	b.n	800868a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800866a:	79fb      	ldrb	r3, [r7, #7]
 800866c:	2b01      	cmp	r3, #1
 800866e:	bf8c      	ite	hi
 8008670:	2301      	movhi	r3, #1
 8008672:	2300      	movls	r3, #0
 8008674:	b2db      	uxtb	r3, r3
 8008676:	461a      	mov	r2, r3
 8008678:	f107 0318 	add.w	r3, r7, #24
 800867c:	4611      	mov	r1, r2
 800867e:	4618      	mov	r0, r3
 8008680:	f7fd fff6 	bl	8006670 <chk_lock>
 8008684:	4603      	mov	r3, r0
 8008686:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800868a:	79fb      	ldrb	r3, [r7, #7]
 800868c:	f003 031c 	and.w	r3, r3, #28
 8008690:	2b00      	cmp	r3, #0
 8008692:	d07f      	beq.n	8008794 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008694:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008698:	2b00      	cmp	r3, #0
 800869a:	d017      	beq.n	80086cc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800869c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d10e      	bne.n	80086c2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80086a4:	f7fe f840 	bl	8006728 <enq_lock>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d006      	beq.n	80086bc <f_open+0xc4>
 80086ae:	f107 0318 	add.w	r3, r7, #24
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff f918 	bl	80078e8 <dir_register>
 80086b8:	4603      	mov	r3, r0
 80086ba:	e000      	b.n	80086be <f_open+0xc6>
 80086bc:	2312      	movs	r3, #18
 80086be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	f043 0308 	orr.w	r3, r3, #8
 80086c8:	71fb      	strb	r3, [r7, #7]
 80086ca:	e010      	b.n	80086ee <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80086cc:	7fbb      	ldrb	r3, [r7, #30]
 80086ce:	f003 0311 	and.w	r3, r3, #17
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <f_open+0xe6>
					res = FR_DENIED;
 80086d6:	2307      	movs	r3, #7
 80086d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80086dc:	e007      	b.n	80086ee <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	f003 0304 	and.w	r3, r3, #4
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <f_open+0xf6>
 80086e8:	2308      	movs	r3, #8
 80086ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80086ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d168      	bne.n	80087c8 <f_open+0x1d0>
 80086f6:	79fb      	ldrb	r3, [r7, #7]
 80086f8:	f003 0308 	and.w	r3, r3, #8
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d063      	beq.n	80087c8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008700:	f7fd fbd4 	bl	8005eac <get_fattime>
 8008704:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008708:	330e      	adds	r3, #14
 800870a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800870c:	4618      	mov	r0, r3
 800870e:	f7fd ff05 	bl	800651c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008714:	3316      	adds	r3, #22
 8008716:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008718:	4618      	mov	r0, r3
 800871a:	f7fd feff 	bl	800651c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800871e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008720:	330b      	adds	r3, #11
 8008722:	2220      	movs	r2, #32
 8008724:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800872a:	4611      	mov	r1, r2
 800872c:	4618      	mov	r0, r3
 800872e:	f7fe fe53 	bl	80073d8 <ld_clust>
 8008732:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008738:	2200      	movs	r2, #0
 800873a:	4618      	mov	r0, r3
 800873c:	f7fe fe6b 	bl	8007416 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008742:	331c      	adds	r3, #28
 8008744:	2100      	movs	r1, #0
 8008746:	4618      	mov	r0, r3
 8008748:	f7fd fee8 	bl	800651c <st_dword>
					fs->wflag = 1;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2201      	movs	r2, #1
 8008750:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008754:	2b00      	cmp	r3, #0
 8008756:	d037      	beq.n	80087c8 <f_open+0x1d0>
						dw = fs->winsect;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800875c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800875e:	f107 0318 	add.w	r3, r7, #24
 8008762:	2200      	movs	r2, #0
 8008764:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe fb7e 	bl	8006e68 <remove_chain>
 800876c:	4603      	mov	r3, r0
 800876e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8008772:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008776:	2b00      	cmp	r3, #0
 8008778:	d126      	bne.n	80087c8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe f926 	bl	80069d0 <move_window>
 8008784:	4603      	mov	r3, r0
 8008786:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800878e:	3a01      	subs	r2, #1
 8008790:	611a      	str	r2, [r3, #16]
 8008792:	e019      	b.n	80087c8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008794:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008798:	2b00      	cmp	r3, #0
 800879a:	d115      	bne.n	80087c8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800879c:	7fbb      	ldrb	r3, [r7, #30]
 800879e:	f003 0310 	and.w	r3, r3, #16
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <f_open+0x1b6>
					res = FR_NO_FILE;
 80087a6:	2304      	movs	r3, #4
 80087a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80087ac:	e00c      	b.n	80087c8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80087ae:	79fb      	ldrb	r3, [r7, #7]
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d007      	beq.n	80087c8 <f_open+0x1d0>
 80087b8:	7fbb      	ldrb	r3, [r7, #30]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d002      	beq.n	80087c8 <f_open+0x1d0>
						res = FR_DENIED;
 80087c2:	2307      	movs	r3, #7
 80087c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80087c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d126      	bne.n	800881e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80087d0:	79fb      	ldrb	r3, [r7, #7]
 80087d2:	f003 0308 	and.w	r3, r3, #8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80087ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087f0:	79fb      	ldrb	r3, [r7, #7]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	bf8c      	ite	hi
 80087f6:	2301      	movhi	r3, #1
 80087f8:	2300      	movls	r3, #0
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	f107 0318 	add.w	r3, r7, #24
 8008802:	4611      	mov	r1, r2
 8008804:	4618      	mov	r0, r3
 8008806:	f7fd ffb1 	bl	800676c <inc_lock>
 800880a:	4602      	mov	r2, r0
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d102      	bne.n	800881e <f_open+0x226>
 8008818:	2302      	movs	r3, #2
 800881a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800881e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008822:	2b00      	cmp	r3, #0
 8008824:	f040 8095 	bne.w	8008952 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800882c:	4611      	mov	r1, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fdd2 	bl	80073d8 <ld_clust>
 8008834:	4602      	mov	r2, r0
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800883a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883c:	331c      	adds	r3, #28
 800883e:	4618      	mov	r0, r3
 8008840:	f7fd fe2e 	bl	80064a0 <ld_dword>
 8008844:	4602      	mov	r2, r0
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	88da      	ldrh	r2, [r3, #6]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	79fa      	ldrb	r2, [r7, #7]
 8008862:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3330      	adds	r3, #48	@ 0x30
 800887a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800887e:	2100      	movs	r1, #0
 8008880:	4618      	mov	r0, r3
 8008882:	f7fd fe98 	bl	80065b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	f003 0320 	and.w	r3, r3, #32
 800888c:	2b00      	cmp	r3, #0
 800888e:	d060      	beq.n	8008952 <f_open+0x35a>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d05c      	beq.n	8008952 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68da      	ldr	r2, [r3, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	895b      	ldrh	r3, [r3, #10]
 80088a4:	025b      	lsls	r3, r3, #9
 80088a6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088b4:	e016      	b.n	80088e4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fe f943 	bl	8006b46 <get_fat>
 80088c0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80088c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d802      	bhi.n	80088ce <f_open+0x2d6>
 80088c8:	2302      	movs	r3, #2
 80088ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80088ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d4:	d102      	bne.n	80088dc <f_open+0x2e4>
 80088d6:	2301      	movs	r3, #1
 80088d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80088de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d103      	bne.n	80088f4 <f_open+0x2fc>
 80088ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80088ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d8e0      	bhi.n	80088b6 <f_open+0x2be>
				}
				fp->clust = clst;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80088f8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80088fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d127      	bne.n	8008952 <f_open+0x35a>
 8008902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008908:	2b00      	cmp	r3, #0
 800890a:	d022      	beq.n	8008952 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008910:	4618      	mov	r0, r3
 8008912:	f7fe f8f9 	bl	8006b08 <clust2sect>
 8008916:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8008918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d103      	bne.n	8008926 <f_open+0x32e>
						res = FR_INT_ERR;
 800891e:	2302      	movs	r3, #2
 8008920:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008924:	e015      	b.n	8008952 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008928:	0a5a      	lsrs	r2, r3, #9
 800892a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800892c:	441a      	add	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	7858      	ldrb	r0, [r3, #1]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6a1a      	ldr	r2, [r3, #32]
 8008940:	2301      	movs	r3, #1
 8008942:	f7fd fd37 	bl	80063b4 <disk_read>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <f_open+0x35a>
 800894c:	2301      	movs	r3, #1
 800894e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008952:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <f_open+0x368>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008960:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008964:	4618      	mov	r0, r3
 8008966:	3768      	adds	r7, #104	@ 0x68
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b08e      	sub	sp, #56	@ 0x38
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f107 0214 	add.w	r2, r7, #20
 800898a:	4611      	mov	r1, r2
 800898c:	4618      	mov	r0, r3
 800898e:	f7ff fdb7 	bl	8008500 <validate>
 8008992:	4603      	mov	r3, r0
 8008994:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008998:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800899c:	2b00      	cmp	r3, #0
 800899e:	d107      	bne.n	80089b0 <f_read+0x44>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	7d5b      	ldrb	r3, [r3, #21]
 80089a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80089a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <f_read+0x4a>
 80089b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80089b4:	e115      	b.n	8008be2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	7d1b      	ldrb	r3, [r3, #20]
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <f_read+0x5a>
 80089c2:	2307      	movs	r3, #7
 80089c4:	e10d      	b.n	8008be2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	f240 80fe 	bls.w	8008bd8 <f_read+0x26c>
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80089e0:	e0fa      	b.n	8008bd8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f040 80c6 	bne.w	8008b7c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	0a5b      	lsrs	r3, r3, #9
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	8952      	ldrh	r2, [r2, #10]
 80089fa:	3a01      	subs	r2, #1
 80089fc:	4013      	ands	r3, r2
 80089fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d12f      	bne.n	8008a66 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d103      	bne.n	8008a16 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a14:	e013      	b.n	8008a3e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d007      	beq.n	8008a2e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	4619      	mov	r1, r3
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f7fe fb1c 	bl	8007062 <clmt_clust>
 8008a2a:	6338      	str	r0, [r7, #48]	@ 0x30
 8008a2c:	e007      	b.n	8008a3e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	4619      	mov	r1, r3
 8008a36:	4610      	mov	r0, r2
 8008a38:	f7fe f885 	bl	8006b46 <get_fat>
 8008a3c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d804      	bhi.n	8008a4e <f_read+0xe2>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2202      	movs	r2, #2
 8008a48:	755a      	strb	r2, [r3, #21]
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e0c9      	b.n	8008be2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a54:	d104      	bne.n	8008a60 <f_read+0xf4>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	755a      	strb	r2, [r3, #21]
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e0c0      	b.n	8008be2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a64:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4610      	mov	r0, r2
 8008a70:	f7fe f84a 	bl	8006b08 <clust2sect>
 8008a74:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d104      	bne.n	8008a86 <f_read+0x11a>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	755a      	strb	r2, [r3, #21]
 8008a82:	2302      	movs	r3, #2
 8008a84:	e0ad      	b.n	8008be2 <f_read+0x276>
			sect += csect;
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	0a5b      	lsrs	r3, r3, #9
 8008a92:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d039      	beq.n	8008b0e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a9a:	69fa      	ldr	r2, [r7, #28]
 8008a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9e:	4413      	add	r3, r2
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	8952      	ldrh	r2, [r2, #10]
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d905      	bls.n	8008ab4 <f_read+0x148>
					cc = fs->csize - csect;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	895b      	ldrh	r3, [r3, #10]
 8008aac:	461a      	mov	r2, r3
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	7858      	ldrb	r0, [r3, #1]
 8008ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008abe:	f7fd fc79 	bl	80063b4 <disk_read>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d004      	beq.n	8008ad2 <f_read+0x166>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2201      	movs	r2, #1
 8008acc:	755a      	strb	r2, [r3, #21]
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e087      	b.n	8008be2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	7d1b      	ldrb	r3, [r3, #20]
 8008ad6:	b25b      	sxtb	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	da14      	bge.n	8008b06 <f_read+0x19a>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6a1a      	ldr	r2, [r3, #32]
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d90d      	bls.n	8008b06 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6a1a      	ldr	r2, [r3, #32]
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	025b      	lsls	r3, r3, #9
 8008af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af6:	18d0      	adds	r0, r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3330      	adds	r3, #48	@ 0x30
 8008afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b00:	4619      	mov	r1, r3
 8008b02:	f7fd fd37 	bl	8006574 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b08:	025b      	lsls	r3, r3, #9
 8008b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008b0c:	e050      	b.n	8008bb0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d02e      	beq.n	8008b76 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	7d1b      	ldrb	r3, [r3, #20]
 8008b1c:	b25b      	sxtb	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	da18      	bge.n	8008b54 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	7858      	ldrb	r0, [r3, #1]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a1a      	ldr	r2, [r3, #32]
 8008b30:	2301      	movs	r3, #1
 8008b32:	f7fd fc5f 	bl	80063f4 <disk_write>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d004      	beq.n	8008b46 <f_read+0x1da>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	755a      	strb	r2, [r3, #21]
 8008b42:	2301      	movs	r3, #1
 8008b44:	e04d      	b.n	8008be2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	7d1b      	ldrb	r3, [r3, #20]
 8008b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	7858      	ldrb	r0, [r3, #1]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b5e:	2301      	movs	r3, #1
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	f7fd fc27 	bl	80063b4 <disk_read>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <f_read+0x20a>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	755a      	strb	r2, [r3, #21]
 8008b72:	2301      	movs	r3, #1
 8008b74:	e035      	b.n	8008be2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b84:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d901      	bls.n	8008b96 <f_read+0x22a>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba4:	4413      	add	r3, r2
 8008ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008bac:	f7fd fce2 	bl	8006574 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb4:	4413      	add	r3, r2
 8008bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	699a      	ldr	r2, [r3, #24]
 8008bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bbe:	441a      	add	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	619a      	str	r2, [r3, #24]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bca:	441a      	add	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f47f af01 	bne.w	80089e2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3738      	adds	r7, #56	@ 0x38
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b08c      	sub	sp, #48	@ 0x30
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	607a      	str	r2, [r7, #4]
 8008bf6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f107 0210 	add.w	r2, r7, #16
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff fc78 	bl	8008500 <validate>
 8008c10:	4603      	mov	r3, r0
 8008c12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008c16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d107      	bne.n	8008c2e <f_write+0x44>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	7d5b      	ldrb	r3, [r3, #21]
 8008c22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008c26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <f_write+0x4a>
 8008c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c32:	e14b      	b.n	8008ecc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	7d1b      	ldrb	r3, [r3, #20]
 8008c38:	f003 0302 	and.w	r3, r3, #2
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <f_write+0x5a>
 8008c40:	2307      	movs	r3, #7
 8008c42:	e143      	b.n	8008ecc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	699a      	ldr	r2, [r3, #24]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	441a      	add	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	f080 812d 	bcs.w	8008eb0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	43db      	mvns	r3, r3
 8008c5c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008c5e:	e127      	b.n	8008eb0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f040 80e3 	bne.w	8008e34 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	0a5b      	lsrs	r3, r3, #9
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	8952      	ldrh	r2, [r2, #10]
 8008c78:	3a01      	subs	r2, #1
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d143      	bne.n	8008d0c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10c      	bne.n	8008ca6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d11a      	bne.n	8008cce <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fe f948 	bl	8006f32 <create_chain>
 8008ca2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008ca4:	e013      	b.n	8008cce <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d007      	beq.n	8008cbe <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f7fe f9d4 	bl	8007062 <clmt_clust>
 8008cba:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008cbc:	e007      	b.n	8008cce <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	f7fe f933 	bl	8006f32 <create_chain>
 8008ccc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 80f2 	beq.w	8008eba <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d104      	bne.n	8008ce6 <f_write+0xfc>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	755a      	strb	r2, [r3, #21]
 8008ce2:	2302      	movs	r3, #2
 8008ce4:	e0f2      	b.n	8008ecc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cec:	d104      	bne.n	8008cf8 <f_write+0x10e>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	755a      	strb	r2, [r3, #21]
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e0e9      	b.n	8008ecc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cfc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d102      	bne.n	8008d0c <f_write+0x122>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d0a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	7d1b      	ldrb	r3, [r3, #20]
 8008d10:	b25b      	sxtb	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	da18      	bge.n	8008d48 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	7858      	ldrb	r0, [r3, #1]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6a1a      	ldr	r2, [r3, #32]
 8008d24:	2301      	movs	r3, #1
 8008d26:	f7fd fb65 	bl	80063f4 <disk_write>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d004      	beq.n	8008d3a <f_write+0x150>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2201      	movs	r2, #1
 8008d34:	755a      	strb	r2, [r3, #21]
 8008d36:	2301      	movs	r3, #1
 8008d38:	e0c8      	b.n	8008ecc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	7d1b      	ldrb	r3, [r3, #20]
 8008d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4610      	mov	r0, r2
 8008d52:	f7fd fed9 	bl	8006b08 <clust2sect>
 8008d56:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <f_write+0x17e>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2202      	movs	r2, #2
 8008d62:	755a      	strb	r2, [r3, #21]
 8008d64:	2302      	movs	r3, #2
 8008d66:	e0b1      	b.n	8008ecc <f_write+0x2e2>
			sect += csect;
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	0a5b      	lsrs	r3, r3, #9
 8008d74:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d03c      	beq.n	8008df6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	4413      	add	r3, r2
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	8952      	ldrh	r2, [r2, #10]
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d905      	bls.n	8008d96 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	895b      	ldrh	r3, [r3, #10]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	7858      	ldrb	r0, [r3, #1]
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	69f9      	ldr	r1, [r7, #28]
 8008da0:	f7fd fb28 	bl	80063f4 <disk_write>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <f_write+0x1ca>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2201      	movs	r2, #1
 8008dae:	755a      	strb	r2, [r3, #21]
 8008db0:	2301      	movs	r3, #1
 8008db2:	e08b      	b.n	8008ecc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6a1a      	ldr	r2, [r3, #32]
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	6a3a      	ldr	r2, [r7, #32]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d915      	bls.n	8008dee <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a1a      	ldr	r2, [r3, #32]
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	025b      	lsls	r3, r3, #9
 8008dd2:	69fa      	ldr	r2, [r7, #28]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008dda:	4619      	mov	r1, r3
 8008ddc:	f7fd fbca 	bl	8006574 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	7d1b      	ldrb	r3, [r3, #20]
 8008de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	025b      	lsls	r3, r3, #9
 8008df2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008df4:	e03f      	b.n	8008e76 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d016      	beq.n	8008e2e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	699a      	ldr	r2, [r3, #24]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d210      	bcs.n	8008e2e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	7858      	ldrb	r0, [r3, #1]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e16:	2301      	movs	r3, #1
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	f7fd facb 	bl	80063b4 <disk_read>
 8008e1e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d004      	beq.n	8008e2e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2201      	movs	r2, #1
 8008e28:	755a      	strb	r2, [r3, #21]
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e04e      	b.n	8008ecc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008e40:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d901      	bls.n	8008e4e <f_write+0x264>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e5c:	4413      	add	r3, r2
 8008e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e60:	69f9      	ldr	r1, [r7, #28]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fd fb86 	bl	8006574 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	7d1b      	ldrb	r3, [r3, #20]
 8008e6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008e76:	69fa      	ldr	r2, [r7, #28]
 8008e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7a:	4413      	add	r3, r2
 8008e7c:	61fb      	str	r3, [r7, #28]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	699a      	ldr	r2, [r3, #24]
 8008e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e84:	441a      	add	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	619a      	str	r2, [r3, #24]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	bf38      	it	cc
 8008e96:	461a      	movcc	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	60da      	str	r2, [r3, #12]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea2:	441a      	add	r2, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f47f aed4 	bne.w	8008c60 <f_write+0x76>
 8008eb8:	e000      	b.n	8008ebc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008eba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	7d1b      	ldrb	r3, [r3, #20]
 8008ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3730      	adds	r7, #48	@ 0x30
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f107 0208 	add.w	r2, r7, #8
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff fb0b 	bl	8008500 <validate>
 8008eea:	4603      	mov	r3, r0
 8008eec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d168      	bne.n	8008fc6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	7d1b      	ldrb	r3, [r3, #20]
 8008ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d062      	beq.n	8008fc6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	7d1b      	ldrb	r3, [r3, #20]
 8008f04:	b25b      	sxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	da15      	bge.n	8008f36 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	7858      	ldrb	r0, [r3, #1]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1a      	ldr	r2, [r3, #32]
 8008f18:	2301      	movs	r3, #1
 8008f1a:	f7fd fa6b 	bl	80063f4 <disk_write>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <f_sync+0x54>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e04f      	b.n	8008fc8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	7d1b      	ldrb	r3, [r3, #20]
 8008f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008f36:	f7fc ffb9 	bl	8005eac <get_fattime>
 8008f3a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f42:	4619      	mov	r1, r3
 8008f44:	4610      	mov	r0, r2
 8008f46:	f7fd fd43 	bl	80069d0 <move_window>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d138      	bne.n	8008fc6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f58:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	330b      	adds	r3, #11
 8008f5e:	781a      	ldrb	r2, [r3, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	330b      	adds	r3, #11
 8008f64:	f042 0220 	orr.w	r2, r2, #32
 8008f68:	b2d2      	uxtb	r2, r2
 8008f6a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6818      	ldr	r0, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	461a      	mov	r2, r3
 8008f76:	68f9      	ldr	r1, [r7, #12]
 8008f78:	f7fe fa4d 	bl	8007416 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f103 021c 	add.w	r2, r3, #28
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	4619      	mov	r1, r3
 8008f88:	4610      	mov	r0, r2
 8008f8a:	f7fd fac7 	bl	800651c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3316      	adds	r3, #22
 8008f92:	6939      	ldr	r1, [r7, #16]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fd fac1 	bl	800651c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3312      	adds	r3, #18
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fd faa0 	bl	80064e6 <st_word>
					fs->wflag = 1;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fd fd3c 	bl	8006a2c <sync_fs>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	7d1b      	ldrb	r3, [r3, #20]
 8008fbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff ff7b 	bl	8008ed4 <f_sync>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d118      	bne.n	800901a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f107 0208 	add.w	r2, r7, #8
 8008fee:	4611      	mov	r1, r2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7ff fa85 	bl	8008500 <validate>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10c      	bne.n	800901a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	4618      	mov	r0, r3
 8009006:	f7fd fc3f 	bl	8006888 <dec_lock>
 800900a:	4603      	mov	r3, r0
 800900c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800901a:	7bfb      	ldrb	r3, [r7, #15]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	4613      	mov	r3, r2
 8009030:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009032:	2301      	movs	r3, #1
 8009034:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800903a:	4b1f      	ldr	r3, [pc, #124]	@ (80090b8 <FATFS_LinkDriverEx+0x94>)
 800903c:	7a5b      	ldrb	r3, [r3, #9]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d131      	bne.n	80090a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009044:	4b1c      	ldr	r3, [pc, #112]	@ (80090b8 <FATFS_LinkDriverEx+0x94>)
 8009046:	7a5b      	ldrb	r3, [r3, #9]
 8009048:	b2db      	uxtb	r3, r3
 800904a:	461a      	mov	r2, r3
 800904c:	4b1a      	ldr	r3, [pc, #104]	@ (80090b8 <FATFS_LinkDriverEx+0x94>)
 800904e:	2100      	movs	r1, #0
 8009050:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009052:	4b19      	ldr	r3, [pc, #100]	@ (80090b8 <FATFS_LinkDriverEx+0x94>)
 8009054:	7a5b      	ldrb	r3, [r3, #9]
 8009056:	b2db      	uxtb	r3, r3
 8009058:	4a17      	ldr	r2, [pc, #92]	@ (80090b8 <FATFS_LinkDriverEx+0x94>)
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009062:	4b15      	ldr	r3, [pc, #84]	@ (80090b8 <FATFS_LinkDriverEx+0x94>)
 8009064:	7a5b      	ldrb	r3, [r3, #9]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	461a      	mov	r2, r3
 800906a:	4b13      	ldr	r3, [pc, #76]	@ (80090b8 <FATFS_LinkDriverEx+0x94>)
 800906c:	4413      	add	r3, r2
 800906e:	79fa      	ldrb	r2, [r7, #7]
 8009070:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009072:	4b11      	ldr	r3, [pc, #68]	@ (80090b8 <FATFS_LinkDriverEx+0x94>)
 8009074:	7a5b      	ldrb	r3, [r3, #9]
 8009076:	b2db      	uxtb	r3, r3
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	b2d1      	uxtb	r1, r2
 800907c:	4a0e      	ldr	r2, [pc, #56]	@ (80090b8 <FATFS_LinkDriverEx+0x94>)
 800907e:	7251      	strb	r1, [r2, #9]
 8009080:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009082:	7dbb      	ldrb	r3, [r7, #22]
 8009084:	3330      	adds	r3, #48	@ 0x30
 8009086:	b2da      	uxtb	r2, r3
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	3301      	adds	r3, #1
 8009090:	223a      	movs	r2, #58	@ 0x3a
 8009092:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	3302      	adds	r3, #2
 8009098:	222f      	movs	r2, #47	@ 0x2f
 800909a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	3303      	adds	r3, #3
 80090a0:	2200      	movs	r2, #0
 80090a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80090a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	200012a8 	.word	0x200012a8

080090bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090c6:	2200      	movs	r2, #0
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7ff ffaa 	bl	8009024 <FATFS_LinkDriverEx>
 80090d0:	4603      	mov	r3, r0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	6039      	str	r1, [r7, #0]
 80090e6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80090e8:	88fb      	ldrh	r3, [r7, #6]
 80090ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80090ec:	d802      	bhi.n	80090f4 <ff_convert+0x18>
		c = chr;
 80090ee:	88fb      	ldrh	r3, [r7, #6]
 80090f0:	81fb      	strh	r3, [r7, #14]
 80090f2:	e025      	b.n	8009140 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00b      	beq.n	8009112 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80090fa:	88fb      	ldrh	r3, [r7, #6]
 80090fc:	2bff      	cmp	r3, #255	@ 0xff
 80090fe:	d805      	bhi.n	800910c <ff_convert+0x30>
 8009100:	88fb      	ldrh	r3, [r7, #6]
 8009102:	3b80      	subs	r3, #128	@ 0x80
 8009104:	4a12      	ldr	r2, [pc, #72]	@ (8009150 <ff_convert+0x74>)
 8009106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800910a:	e000      	b.n	800910e <ff_convert+0x32>
 800910c:	2300      	movs	r3, #0
 800910e:	81fb      	strh	r3, [r7, #14]
 8009110:	e016      	b.n	8009140 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009112:	2300      	movs	r3, #0
 8009114:	81fb      	strh	r3, [r7, #14]
 8009116:	e009      	b.n	800912c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009118:	89fb      	ldrh	r3, [r7, #14]
 800911a:	4a0d      	ldr	r2, [pc, #52]	@ (8009150 <ff_convert+0x74>)
 800911c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009120:	88fa      	ldrh	r2, [r7, #6]
 8009122:	429a      	cmp	r2, r3
 8009124:	d006      	beq.n	8009134 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009126:	89fb      	ldrh	r3, [r7, #14]
 8009128:	3301      	adds	r3, #1
 800912a:	81fb      	strh	r3, [r7, #14]
 800912c:	89fb      	ldrh	r3, [r7, #14]
 800912e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009130:	d9f2      	bls.n	8009118 <ff_convert+0x3c>
 8009132:	e000      	b.n	8009136 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009134:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009136:	89fb      	ldrh	r3, [r7, #14]
 8009138:	3380      	adds	r3, #128	@ 0x80
 800913a:	b29b      	uxth	r3, r3
 800913c:	b2db      	uxtb	r3, r3
 800913e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009140:	89fb      	ldrh	r3, [r7, #14]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	08009dec 	.word	0x08009dec

08009154 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800915e:	88fb      	ldrh	r3, [r7, #6]
 8009160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009164:	d201      	bcs.n	800916a <ff_wtoupper+0x16>
 8009166:	4b3e      	ldr	r3, [pc, #248]	@ (8009260 <ff_wtoupper+0x10c>)
 8009168:	e000      	b.n	800916c <ff_wtoupper+0x18>
 800916a:	4b3e      	ldr	r3, [pc, #248]	@ (8009264 <ff_wtoupper+0x110>)
 800916c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	1c9a      	adds	r2, r3, #2
 8009172:	617a      	str	r2, [r7, #20]
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009178:	8a7b      	ldrh	r3, [r7, #18]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d068      	beq.n	8009250 <ff_wtoupper+0xfc>
 800917e:	88fa      	ldrh	r2, [r7, #6]
 8009180:	8a7b      	ldrh	r3, [r7, #18]
 8009182:	429a      	cmp	r2, r3
 8009184:	d364      	bcc.n	8009250 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	1c9a      	adds	r2, r3, #2
 800918a:	617a      	str	r2, [r7, #20]
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	823b      	strh	r3, [r7, #16]
 8009190:	8a3b      	ldrh	r3, [r7, #16]
 8009192:	0a1b      	lsrs	r3, r3, #8
 8009194:	81fb      	strh	r3, [r7, #14]
 8009196:	8a3b      	ldrh	r3, [r7, #16]
 8009198:	b2db      	uxtb	r3, r3
 800919a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800919c:	88fa      	ldrh	r2, [r7, #6]
 800919e:	8a79      	ldrh	r1, [r7, #18]
 80091a0:	8a3b      	ldrh	r3, [r7, #16]
 80091a2:	440b      	add	r3, r1
 80091a4:	429a      	cmp	r2, r3
 80091a6:	da49      	bge.n	800923c <ff_wtoupper+0xe8>
			switch (cmd) {
 80091a8:	89fb      	ldrh	r3, [r7, #14]
 80091aa:	2b08      	cmp	r3, #8
 80091ac:	d84f      	bhi.n	800924e <ff_wtoupper+0xfa>
 80091ae:	a201      	add	r2, pc, #4	@ (adr r2, 80091b4 <ff_wtoupper+0x60>)
 80091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b4:	080091d9 	.word	0x080091d9
 80091b8:	080091eb 	.word	0x080091eb
 80091bc:	08009201 	.word	0x08009201
 80091c0:	08009209 	.word	0x08009209
 80091c4:	08009211 	.word	0x08009211
 80091c8:	08009219 	.word	0x08009219
 80091cc:	08009221 	.word	0x08009221
 80091d0:	08009229 	.word	0x08009229
 80091d4:	08009231 	.word	0x08009231
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80091d8:	88fa      	ldrh	r2, [r7, #6]
 80091da:	8a7b      	ldrh	r3, [r7, #18]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	005b      	lsls	r3, r3, #1
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	4413      	add	r3, r2
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	80fb      	strh	r3, [r7, #6]
 80091e8:	e027      	b.n	800923a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80091ea:	88fa      	ldrh	r2, [r7, #6]
 80091ec:	8a7b      	ldrh	r3, [r7, #18]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	88fa      	ldrh	r2, [r7, #6]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	80fb      	strh	r3, [r7, #6]
 80091fe:	e01c      	b.n	800923a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009200:	88fb      	ldrh	r3, [r7, #6]
 8009202:	3b10      	subs	r3, #16
 8009204:	80fb      	strh	r3, [r7, #6]
 8009206:	e018      	b.n	800923a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009208:	88fb      	ldrh	r3, [r7, #6]
 800920a:	3b20      	subs	r3, #32
 800920c:	80fb      	strh	r3, [r7, #6]
 800920e:	e014      	b.n	800923a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009210:	88fb      	ldrh	r3, [r7, #6]
 8009212:	3b30      	subs	r3, #48	@ 0x30
 8009214:	80fb      	strh	r3, [r7, #6]
 8009216:	e010      	b.n	800923a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	3b1a      	subs	r3, #26
 800921c:	80fb      	strh	r3, [r7, #6]
 800921e:	e00c      	b.n	800923a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009220:	88fb      	ldrh	r3, [r7, #6]
 8009222:	3308      	adds	r3, #8
 8009224:	80fb      	strh	r3, [r7, #6]
 8009226:	e008      	b.n	800923a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009228:	88fb      	ldrh	r3, [r7, #6]
 800922a:	3b50      	subs	r3, #80	@ 0x50
 800922c:	80fb      	strh	r3, [r7, #6]
 800922e:	e004      	b.n	800923a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009230:	88fb      	ldrh	r3, [r7, #6]
 8009232:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009236:	80fb      	strh	r3, [r7, #6]
 8009238:	bf00      	nop
			}
			break;
 800923a:	e008      	b.n	800924e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800923c:	89fb      	ldrh	r3, [r7, #14]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d195      	bne.n	800916e <ff_wtoupper+0x1a>
 8009242:	8a3b      	ldrh	r3, [r7, #16]
 8009244:	005b      	lsls	r3, r3, #1
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	4413      	add	r3, r2
 800924a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800924c:	e78f      	b.n	800916e <ff_wtoupper+0x1a>
			break;
 800924e:	bf00      	nop
	}

	return chr;
 8009250:	88fb      	ldrh	r3, [r7, #6]
}
 8009252:	4618      	mov	r0, r3
 8009254:	371c      	adds	r7, #28
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	08009eec 	.word	0x08009eec
 8009264:	0800a0e0 	.word	0x0800a0e0

08009268 <_vsniprintf_r>:
 8009268:	b530      	push	{r4, r5, lr}
 800926a:	4614      	mov	r4, r2
 800926c:	2c00      	cmp	r4, #0
 800926e:	b09b      	sub	sp, #108	@ 0x6c
 8009270:	4605      	mov	r5, r0
 8009272:	461a      	mov	r2, r3
 8009274:	da05      	bge.n	8009282 <_vsniprintf_r+0x1a>
 8009276:	238b      	movs	r3, #139	@ 0x8b
 8009278:	6003      	str	r3, [r0, #0]
 800927a:	f04f 30ff 	mov.w	r0, #4294967295
 800927e:	b01b      	add	sp, #108	@ 0x6c
 8009280:	bd30      	pop	{r4, r5, pc}
 8009282:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009286:	f8ad 300c 	strh.w	r3, [sp, #12]
 800928a:	bf14      	ite	ne
 800928c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009290:	4623      	moveq	r3, r4
 8009292:	9302      	str	r3, [sp, #8]
 8009294:	9305      	str	r3, [sp, #20]
 8009296:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800929a:	9100      	str	r1, [sp, #0]
 800929c:	9104      	str	r1, [sp, #16]
 800929e:	f8ad 300e 	strh.w	r3, [sp, #14]
 80092a2:	4669      	mov	r1, sp
 80092a4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80092a6:	f000 f9a1 	bl	80095ec <_svfiprintf_r>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	bfbc      	itt	lt
 80092ae:	238b      	movlt	r3, #139	@ 0x8b
 80092b0:	602b      	strlt	r3, [r5, #0]
 80092b2:	2c00      	cmp	r4, #0
 80092b4:	d0e3      	beq.n	800927e <_vsniprintf_r+0x16>
 80092b6:	9b00      	ldr	r3, [sp, #0]
 80092b8:	2200      	movs	r2, #0
 80092ba:	701a      	strb	r2, [r3, #0]
 80092bc:	e7df      	b.n	800927e <_vsniprintf_r+0x16>
	...

080092c0 <vsniprintf>:
 80092c0:	b507      	push	{r0, r1, r2, lr}
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	4613      	mov	r3, r2
 80092c6:	460a      	mov	r2, r1
 80092c8:	4601      	mov	r1, r0
 80092ca:	4803      	ldr	r0, [pc, #12]	@ (80092d8 <vsniprintf+0x18>)
 80092cc:	6800      	ldr	r0, [r0, #0]
 80092ce:	f7ff ffcb 	bl	8009268 <_vsniprintf_r>
 80092d2:	b003      	add	sp, #12
 80092d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80092d8:	20000944 	.word	0x20000944

080092dc <memset>:
 80092dc:	4402      	add	r2, r0
 80092de:	4603      	mov	r3, r0
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d100      	bne.n	80092e6 <memset+0xa>
 80092e4:	4770      	bx	lr
 80092e6:	f803 1b01 	strb.w	r1, [r3], #1
 80092ea:	e7f9      	b.n	80092e0 <memset+0x4>

080092ec <__errno>:
 80092ec:	4b01      	ldr	r3, [pc, #4]	@ (80092f4 <__errno+0x8>)
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	20000944 	.word	0x20000944

080092f8 <__libc_init_array>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	4d0d      	ldr	r5, [pc, #52]	@ (8009330 <__libc_init_array+0x38>)
 80092fc:	4c0d      	ldr	r4, [pc, #52]	@ (8009334 <__libc_init_array+0x3c>)
 80092fe:	1b64      	subs	r4, r4, r5
 8009300:	10a4      	asrs	r4, r4, #2
 8009302:	2600      	movs	r6, #0
 8009304:	42a6      	cmp	r6, r4
 8009306:	d109      	bne.n	800931c <__libc_init_array+0x24>
 8009308:	4d0b      	ldr	r5, [pc, #44]	@ (8009338 <__libc_init_array+0x40>)
 800930a:	4c0c      	ldr	r4, [pc, #48]	@ (800933c <__libc_init_array+0x44>)
 800930c:	f000 fc66 	bl	8009bdc <_init>
 8009310:	1b64      	subs	r4, r4, r5
 8009312:	10a4      	asrs	r4, r4, #2
 8009314:	2600      	movs	r6, #0
 8009316:	42a6      	cmp	r6, r4
 8009318:	d105      	bne.n	8009326 <__libc_init_array+0x2e>
 800931a:	bd70      	pop	{r4, r5, r6, pc}
 800931c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009320:	4798      	blx	r3
 8009322:	3601      	adds	r6, #1
 8009324:	e7ee      	b.n	8009304 <__libc_init_array+0xc>
 8009326:	f855 3b04 	ldr.w	r3, [r5], #4
 800932a:	4798      	blx	r3
 800932c:	3601      	adds	r6, #1
 800932e:	e7f2      	b.n	8009316 <__libc_init_array+0x1e>
 8009330:	0800a1d8 	.word	0x0800a1d8
 8009334:	0800a1d8 	.word	0x0800a1d8
 8009338:	0800a1d8 	.word	0x0800a1d8
 800933c:	0800a1dc 	.word	0x0800a1dc

08009340 <__retarget_lock_acquire_recursive>:
 8009340:	4770      	bx	lr

08009342 <__retarget_lock_release_recursive>:
 8009342:	4770      	bx	lr

08009344 <_free_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4605      	mov	r5, r0
 8009348:	2900      	cmp	r1, #0
 800934a:	d041      	beq.n	80093d0 <_free_r+0x8c>
 800934c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009350:	1f0c      	subs	r4, r1, #4
 8009352:	2b00      	cmp	r3, #0
 8009354:	bfb8      	it	lt
 8009356:	18e4      	addlt	r4, r4, r3
 8009358:	f000 f8e0 	bl	800951c <__malloc_lock>
 800935c:	4a1d      	ldr	r2, [pc, #116]	@ (80093d4 <_free_r+0x90>)
 800935e:	6813      	ldr	r3, [r2, #0]
 8009360:	b933      	cbnz	r3, 8009370 <_free_r+0x2c>
 8009362:	6063      	str	r3, [r4, #4]
 8009364:	6014      	str	r4, [r2, #0]
 8009366:	4628      	mov	r0, r5
 8009368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800936c:	f000 b8dc 	b.w	8009528 <__malloc_unlock>
 8009370:	42a3      	cmp	r3, r4
 8009372:	d908      	bls.n	8009386 <_free_r+0x42>
 8009374:	6820      	ldr	r0, [r4, #0]
 8009376:	1821      	adds	r1, r4, r0
 8009378:	428b      	cmp	r3, r1
 800937a:	bf01      	itttt	eq
 800937c:	6819      	ldreq	r1, [r3, #0]
 800937e:	685b      	ldreq	r3, [r3, #4]
 8009380:	1809      	addeq	r1, r1, r0
 8009382:	6021      	streq	r1, [r4, #0]
 8009384:	e7ed      	b.n	8009362 <_free_r+0x1e>
 8009386:	461a      	mov	r2, r3
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	b10b      	cbz	r3, 8009390 <_free_r+0x4c>
 800938c:	42a3      	cmp	r3, r4
 800938e:	d9fa      	bls.n	8009386 <_free_r+0x42>
 8009390:	6811      	ldr	r1, [r2, #0]
 8009392:	1850      	adds	r0, r2, r1
 8009394:	42a0      	cmp	r0, r4
 8009396:	d10b      	bne.n	80093b0 <_free_r+0x6c>
 8009398:	6820      	ldr	r0, [r4, #0]
 800939a:	4401      	add	r1, r0
 800939c:	1850      	adds	r0, r2, r1
 800939e:	4283      	cmp	r3, r0
 80093a0:	6011      	str	r1, [r2, #0]
 80093a2:	d1e0      	bne.n	8009366 <_free_r+0x22>
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	6053      	str	r3, [r2, #4]
 80093aa:	4408      	add	r0, r1
 80093ac:	6010      	str	r0, [r2, #0]
 80093ae:	e7da      	b.n	8009366 <_free_r+0x22>
 80093b0:	d902      	bls.n	80093b8 <_free_r+0x74>
 80093b2:	230c      	movs	r3, #12
 80093b4:	602b      	str	r3, [r5, #0]
 80093b6:	e7d6      	b.n	8009366 <_free_r+0x22>
 80093b8:	6820      	ldr	r0, [r4, #0]
 80093ba:	1821      	adds	r1, r4, r0
 80093bc:	428b      	cmp	r3, r1
 80093be:	bf04      	itt	eq
 80093c0:	6819      	ldreq	r1, [r3, #0]
 80093c2:	685b      	ldreq	r3, [r3, #4]
 80093c4:	6063      	str	r3, [r4, #4]
 80093c6:	bf04      	itt	eq
 80093c8:	1809      	addeq	r1, r1, r0
 80093ca:	6021      	streq	r1, [r4, #0]
 80093cc:	6054      	str	r4, [r2, #4]
 80093ce:	e7ca      	b.n	8009366 <_free_r+0x22>
 80093d0:	bd38      	pop	{r3, r4, r5, pc}
 80093d2:	bf00      	nop
 80093d4:	200013f8 	.word	0x200013f8

080093d8 <sbrk_aligned>:
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	4e0f      	ldr	r6, [pc, #60]	@ (8009418 <sbrk_aligned+0x40>)
 80093dc:	460c      	mov	r4, r1
 80093de:	6831      	ldr	r1, [r6, #0]
 80093e0:	4605      	mov	r5, r0
 80093e2:	b911      	cbnz	r1, 80093ea <sbrk_aligned+0x12>
 80093e4:	f000 fba6 	bl	8009b34 <_sbrk_r>
 80093e8:	6030      	str	r0, [r6, #0]
 80093ea:	4621      	mov	r1, r4
 80093ec:	4628      	mov	r0, r5
 80093ee:	f000 fba1 	bl	8009b34 <_sbrk_r>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	d103      	bne.n	80093fe <sbrk_aligned+0x26>
 80093f6:	f04f 34ff 	mov.w	r4, #4294967295
 80093fa:	4620      	mov	r0, r4
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
 80093fe:	1cc4      	adds	r4, r0, #3
 8009400:	f024 0403 	bic.w	r4, r4, #3
 8009404:	42a0      	cmp	r0, r4
 8009406:	d0f8      	beq.n	80093fa <sbrk_aligned+0x22>
 8009408:	1a21      	subs	r1, r4, r0
 800940a:	4628      	mov	r0, r5
 800940c:	f000 fb92 	bl	8009b34 <_sbrk_r>
 8009410:	3001      	adds	r0, #1
 8009412:	d1f2      	bne.n	80093fa <sbrk_aligned+0x22>
 8009414:	e7ef      	b.n	80093f6 <sbrk_aligned+0x1e>
 8009416:	bf00      	nop
 8009418:	200013f4 	.word	0x200013f4

0800941c <_malloc_r>:
 800941c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009420:	1ccd      	adds	r5, r1, #3
 8009422:	f025 0503 	bic.w	r5, r5, #3
 8009426:	3508      	adds	r5, #8
 8009428:	2d0c      	cmp	r5, #12
 800942a:	bf38      	it	cc
 800942c:	250c      	movcc	r5, #12
 800942e:	2d00      	cmp	r5, #0
 8009430:	4606      	mov	r6, r0
 8009432:	db01      	blt.n	8009438 <_malloc_r+0x1c>
 8009434:	42a9      	cmp	r1, r5
 8009436:	d904      	bls.n	8009442 <_malloc_r+0x26>
 8009438:	230c      	movs	r3, #12
 800943a:	6033      	str	r3, [r6, #0]
 800943c:	2000      	movs	r0, #0
 800943e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009442:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009518 <_malloc_r+0xfc>
 8009446:	f000 f869 	bl	800951c <__malloc_lock>
 800944a:	f8d8 3000 	ldr.w	r3, [r8]
 800944e:	461c      	mov	r4, r3
 8009450:	bb44      	cbnz	r4, 80094a4 <_malloc_r+0x88>
 8009452:	4629      	mov	r1, r5
 8009454:	4630      	mov	r0, r6
 8009456:	f7ff ffbf 	bl	80093d8 <sbrk_aligned>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	4604      	mov	r4, r0
 800945e:	d158      	bne.n	8009512 <_malloc_r+0xf6>
 8009460:	f8d8 4000 	ldr.w	r4, [r8]
 8009464:	4627      	mov	r7, r4
 8009466:	2f00      	cmp	r7, #0
 8009468:	d143      	bne.n	80094f2 <_malloc_r+0xd6>
 800946a:	2c00      	cmp	r4, #0
 800946c:	d04b      	beq.n	8009506 <_malloc_r+0xea>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	4639      	mov	r1, r7
 8009472:	4630      	mov	r0, r6
 8009474:	eb04 0903 	add.w	r9, r4, r3
 8009478:	f000 fb5c 	bl	8009b34 <_sbrk_r>
 800947c:	4581      	cmp	r9, r0
 800947e:	d142      	bne.n	8009506 <_malloc_r+0xea>
 8009480:	6821      	ldr	r1, [r4, #0]
 8009482:	1a6d      	subs	r5, r5, r1
 8009484:	4629      	mov	r1, r5
 8009486:	4630      	mov	r0, r6
 8009488:	f7ff ffa6 	bl	80093d8 <sbrk_aligned>
 800948c:	3001      	adds	r0, #1
 800948e:	d03a      	beq.n	8009506 <_malloc_r+0xea>
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	442b      	add	r3, r5
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	f8d8 3000 	ldr.w	r3, [r8]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	bb62      	cbnz	r2, 80094f8 <_malloc_r+0xdc>
 800949e:	f8c8 7000 	str.w	r7, [r8]
 80094a2:	e00f      	b.n	80094c4 <_malloc_r+0xa8>
 80094a4:	6822      	ldr	r2, [r4, #0]
 80094a6:	1b52      	subs	r2, r2, r5
 80094a8:	d420      	bmi.n	80094ec <_malloc_r+0xd0>
 80094aa:	2a0b      	cmp	r2, #11
 80094ac:	d917      	bls.n	80094de <_malloc_r+0xc2>
 80094ae:	1961      	adds	r1, r4, r5
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	6025      	str	r5, [r4, #0]
 80094b4:	bf18      	it	ne
 80094b6:	6059      	strne	r1, [r3, #4]
 80094b8:	6863      	ldr	r3, [r4, #4]
 80094ba:	bf08      	it	eq
 80094bc:	f8c8 1000 	streq.w	r1, [r8]
 80094c0:	5162      	str	r2, [r4, r5]
 80094c2:	604b      	str	r3, [r1, #4]
 80094c4:	4630      	mov	r0, r6
 80094c6:	f000 f82f 	bl	8009528 <__malloc_unlock>
 80094ca:	f104 000b 	add.w	r0, r4, #11
 80094ce:	1d23      	adds	r3, r4, #4
 80094d0:	f020 0007 	bic.w	r0, r0, #7
 80094d4:	1ac2      	subs	r2, r0, r3
 80094d6:	bf1c      	itt	ne
 80094d8:	1a1b      	subne	r3, r3, r0
 80094da:	50a3      	strne	r3, [r4, r2]
 80094dc:	e7af      	b.n	800943e <_malloc_r+0x22>
 80094de:	6862      	ldr	r2, [r4, #4]
 80094e0:	42a3      	cmp	r3, r4
 80094e2:	bf0c      	ite	eq
 80094e4:	f8c8 2000 	streq.w	r2, [r8]
 80094e8:	605a      	strne	r2, [r3, #4]
 80094ea:	e7eb      	b.n	80094c4 <_malloc_r+0xa8>
 80094ec:	4623      	mov	r3, r4
 80094ee:	6864      	ldr	r4, [r4, #4]
 80094f0:	e7ae      	b.n	8009450 <_malloc_r+0x34>
 80094f2:	463c      	mov	r4, r7
 80094f4:	687f      	ldr	r7, [r7, #4]
 80094f6:	e7b6      	b.n	8009466 <_malloc_r+0x4a>
 80094f8:	461a      	mov	r2, r3
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	d1fb      	bne.n	80094f8 <_malloc_r+0xdc>
 8009500:	2300      	movs	r3, #0
 8009502:	6053      	str	r3, [r2, #4]
 8009504:	e7de      	b.n	80094c4 <_malloc_r+0xa8>
 8009506:	230c      	movs	r3, #12
 8009508:	6033      	str	r3, [r6, #0]
 800950a:	4630      	mov	r0, r6
 800950c:	f000 f80c 	bl	8009528 <__malloc_unlock>
 8009510:	e794      	b.n	800943c <_malloc_r+0x20>
 8009512:	6005      	str	r5, [r0, #0]
 8009514:	e7d6      	b.n	80094c4 <_malloc_r+0xa8>
 8009516:	bf00      	nop
 8009518:	200013f8 	.word	0x200013f8

0800951c <__malloc_lock>:
 800951c:	4801      	ldr	r0, [pc, #4]	@ (8009524 <__malloc_lock+0x8>)
 800951e:	f7ff bf0f 	b.w	8009340 <__retarget_lock_acquire_recursive>
 8009522:	bf00      	nop
 8009524:	200013f0 	.word	0x200013f0

08009528 <__malloc_unlock>:
 8009528:	4801      	ldr	r0, [pc, #4]	@ (8009530 <__malloc_unlock+0x8>)
 800952a:	f7ff bf0a 	b.w	8009342 <__retarget_lock_release_recursive>
 800952e:	bf00      	nop
 8009530:	200013f0 	.word	0x200013f0

08009534 <__ssputs_r>:
 8009534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009538:	688e      	ldr	r6, [r1, #8]
 800953a:	461f      	mov	r7, r3
 800953c:	42be      	cmp	r6, r7
 800953e:	680b      	ldr	r3, [r1, #0]
 8009540:	4682      	mov	sl, r0
 8009542:	460c      	mov	r4, r1
 8009544:	4690      	mov	r8, r2
 8009546:	d82d      	bhi.n	80095a4 <__ssputs_r+0x70>
 8009548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800954c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009550:	d026      	beq.n	80095a0 <__ssputs_r+0x6c>
 8009552:	6965      	ldr	r5, [r4, #20]
 8009554:	6909      	ldr	r1, [r1, #16]
 8009556:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800955a:	eba3 0901 	sub.w	r9, r3, r1
 800955e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009562:	1c7b      	adds	r3, r7, #1
 8009564:	444b      	add	r3, r9
 8009566:	106d      	asrs	r5, r5, #1
 8009568:	429d      	cmp	r5, r3
 800956a:	bf38      	it	cc
 800956c:	461d      	movcc	r5, r3
 800956e:	0553      	lsls	r3, r2, #21
 8009570:	d527      	bpl.n	80095c2 <__ssputs_r+0x8e>
 8009572:	4629      	mov	r1, r5
 8009574:	f7ff ff52 	bl	800941c <_malloc_r>
 8009578:	4606      	mov	r6, r0
 800957a:	b360      	cbz	r0, 80095d6 <__ssputs_r+0xa2>
 800957c:	6921      	ldr	r1, [r4, #16]
 800957e:	464a      	mov	r2, r9
 8009580:	f000 fae8 	bl	8009b54 <memcpy>
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800958a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800958e:	81a3      	strh	r3, [r4, #12]
 8009590:	6126      	str	r6, [r4, #16]
 8009592:	6165      	str	r5, [r4, #20]
 8009594:	444e      	add	r6, r9
 8009596:	eba5 0509 	sub.w	r5, r5, r9
 800959a:	6026      	str	r6, [r4, #0]
 800959c:	60a5      	str	r5, [r4, #8]
 800959e:	463e      	mov	r6, r7
 80095a0:	42be      	cmp	r6, r7
 80095a2:	d900      	bls.n	80095a6 <__ssputs_r+0x72>
 80095a4:	463e      	mov	r6, r7
 80095a6:	6820      	ldr	r0, [r4, #0]
 80095a8:	4632      	mov	r2, r6
 80095aa:	4641      	mov	r1, r8
 80095ac:	f000 faa8 	bl	8009b00 <memmove>
 80095b0:	68a3      	ldr	r3, [r4, #8]
 80095b2:	1b9b      	subs	r3, r3, r6
 80095b4:	60a3      	str	r3, [r4, #8]
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	4433      	add	r3, r6
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	2000      	movs	r0, #0
 80095be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c2:	462a      	mov	r2, r5
 80095c4:	f000 fad4 	bl	8009b70 <_realloc_r>
 80095c8:	4606      	mov	r6, r0
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d1e0      	bne.n	8009590 <__ssputs_r+0x5c>
 80095ce:	6921      	ldr	r1, [r4, #16]
 80095d0:	4650      	mov	r0, sl
 80095d2:	f7ff feb7 	bl	8009344 <_free_r>
 80095d6:	230c      	movs	r3, #12
 80095d8:	f8ca 3000 	str.w	r3, [sl]
 80095dc:	89a3      	ldrh	r3, [r4, #12]
 80095de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095e2:	81a3      	strh	r3, [r4, #12]
 80095e4:	f04f 30ff 	mov.w	r0, #4294967295
 80095e8:	e7e9      	b.n	80095be <__ssputs_r+0x8a>
	...

080095ec <_svfiprintf_r>:
 80095ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	4698      	mov	r8, r3
 80095f2:	898b      	ldrh	r3, [r1, #12]
 80095f4:	061b      	lsls	r3, r3, #24
 80095f6:	b09d      	sub	sp, #116	@ 0x74
 80095f8:	4607      	mov	r7, r0
 80095fa:	460d      	mov	r5, r1
 80095fc:	4614      	mov	r4, r2
 80095fe:	d510      	bpl.n	8009622 <_svfiprintf_r+0x36>
 8009600:	690b      	ldr	r3, [r1, #16]
 8009602:	b973      	cbnz	r3, 8009622 <_svfiprintf_r+0x36>
 8009604:	2140      	movs	r1, #64	@ 0x40
 8009606:	f7ff ff09 	bl	800941c <_malloc_r>
 800960a:	6028      	str	r0, [r5, #0]
 800960c:	6128      	str	r0, [r5, #16]
 800960e:	b930      	cbnz	r0, 800961e <_svfiprintf_r+0x32>
 8009610:	230c      	movs	r3, #12
 8009612:	603b      	str	r3, [r7, #0]
 8009614:	f04f 30ff 	mov.w	r0, #4294967295
 8009618:	b01d      	add	sp, #116	@ 0x74
 800961a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961e:	2340      	movs	r3, #64	@ 0x40
 8009620:	616b      	str	r3, [r5, #20]
 8009622:	2300      	movs	r3, #0
 8009624:	9309      	str	r3, [sp, #36]	@ 0x24
 8009626:	2320      	movs	r3, #32
 8009628:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800962c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009630:	2330      	movs	r3, #48	@ 0x30
 8009632:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80097d0 <_svfiprintf_r+0x1e4>
 8009636:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800963a:	f04f 0901 	mov.w	r9, #1
 800963e:	4623      	mov	r3, r4
 8009640:	469a      	mov	sl, r3
 8009642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009646:	b10a      	cbz	r2, 800964c <_svfiprintf_r+0x60>
 8009648:	2a25      	cmp	r2, #37	@ 0x25
 800964a:	d1f9      	bne.n	8009640 <_svfiprintf_r+0x54>
 800964c:	ebba 0b04 	subs.w	fp, sl, r4
 8009650:	d00b      	beq.n	800966a <_svfiprintf_r+0x7e>
 8009652:	465b      	mov	r3, fp
 8009654:	4622      	mov	r2, r4
 8009656:	4629      	mov	r1, r5
 8009658:	4638      	mov	r0, r7
 800965a:	f7ff ff6b 	bl	8009534 <__ssputs_r>
 800965e:	3001      	adds	r0, #1
 8009660:	f000 80a7 	beq.w	80097b2 <_svfiprintf_r+0x1c6>
 8009664:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009666:	445a      	add	r2, fp
 8009668:	9209      	str	r2, [sp, #36]	@ 0x24
 800966a:	f89a 3000 	ldrb.w	r3, [sl]
 800966e:	2b00      	cmp	r3, #0
 8009670:	f000 809f 	beq.w	80097b2 <_svfiprintf_r+0x1c6>
 8009674:	2300      	movs	r3, #0
 8009676:	f04f 32ff 	mov.w	r2, #4294967295
 800967a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800967e:	f10a 0a01 	add.w	sl, sl, #1
 8009682:	9304      	str	r3, [sp, #16]
 8009684:	9307      	str	r3, [sp, #28]
 8009686:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800968a:	931a      	str	r3, [sp, #104]	@ 0x68
 800968c:	4654      	mov	r4, sl
 800968e:	2205      	movs	r2, #5
 8009690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009694:	484e      	ldr	r0, [pc, #312]	@ (80097d0 <_svfiprintf_r+0x1e4>)
 8009696:	f7f6 fdab 	bl	80001f0 <memchr>
 800969a:	9a04      	ldr	r2, [sp, #16]
 800969c:	b9d8      	cbnz	r0, 80096d6 <_svfiprintf_r+0xea>
 800969e:	06d0      	lsls	r0, r2, #27
 80096a0:	bf44      	itt	mi
 80096a2:	2320      	movmi	r3, #32
 80096a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096a8:	0711      	lsls	r1, r2, #28
 80096aa:	bf44      	itt	mi
 80096ac:	232b      	movmi	r3, #43	@ 0x2b
 80096ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096b2:	f89a 3000 	ldrb.w	r3, [sl]
 80096b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80096b8:	d015      	beq.n	80096e6 <_svfiprintf_r+0xfa>
 80096ba:	9a07      	ldr	r2, [sp, #28]
 80096bc:	4654      	mov	r4, sl
 80096be:	2000      	movs	r0, #0
 80096c0:	f04f 0c0a 	mov.w	ip, #10
 80096c4:	4621      	mov	r1, r4
 80096c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096ca:	3b30      	subs	r3, #48	@ 0x30
 80096cc:	2b09      	cmp	r3, #9
 80096ce:	d94b      	bls.n	8009768 <_svfiprintf_r+0x17c>
 80096d0:	b1b0      	cbz	r0, 8009700 <_svfiprintf_r+0x114>
 80096d2:	9207      	str	r2, [sp, #28]
 80096d4:	e014      	b.n	8009700 <_svfiprintf_r+0x114>
 80096d6:	eba0 0308 	sub.w	r3, r0, r8
 80096da:	fa09 f303 	lsl.w	r3, r9, r3
 80096de:	4313      	orrs	r3, r2
 80096e0:	9304      	str	r3, [sp, #16]
 80096e2:	46a2      	mov	sl, r4
 80096e4:	e7d2      	b.n	800968c <_svfiprintf_r+0xa0>
 80096e6:	9b03      	ldr	r3, [sp, #12]
 80096e8:	1d19      	adds	r1, r3, #4
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	9103      	str	r1, [sp, #12]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	bfbb      	ittet	lt
 80096f2:	425b      	neglt	r3, r3
 80096f4:	f042 0202 	orrlt.w	r2, r2, #2
 80096f8:	9307      	strge	r3, [sp, #28]
 80096fa:	9307      	strlt	r3, [sp, #28]
 80096fc:	bfb8      	it	lt
 80096fe:	9204      	strlt	r2, [sp, #16]
 8009700:	7823      	ldrb	r3, [r4, #0]
 8009702:	2b2e      	cmp	r3, #46	@ 0x2e
 8009704:	d10a      	bne.n	800971c <_svfiprintf_r+0x130>
 8009706:	7863      	ldrb	r3, [r4, #1]
 8009708:	2b2a      	cmp	r3, #42	@ 0x2a
 800970a:	d132      	bne.n	8009772 <_svfiprintf_r+0x186>
 800970c:	9b03      	ldr	r3, [sp, #12]
 800970e:	1d1a      	adds	r2, r3, #4
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	9203      	str	r2, [sp, #12]
 8009714:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009718:	3402      	adds	r4, #2
 800971a:	9305      	str	r3, [sp, #20]
 800971c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80097e0 <_svfiprintf_r+0x1f4>
 8009720:	7821      	ldrb	r1, [r4, #0]
 8009722:	2203      	movs	r2, #3
 8009724:	4650      	mov	r0, sl
 8009726:	f7f6 fd63 	bl	80001f0 <memchr>
 800972a:	b138      	cbz	r0, 800973c <_svfiprintf_r+0x150>
 800972c:	9b04      	ldr	r3, [sp, #16]
 800972e:	eba0 000a 	sub.w	r0, r0, sl
 8009732:	2240      	movs	r2, #64	@ 0x40
 8009734:	4082      	lsls	r2, r0
 8009736:	4313      	orrs	r3, r2
 8009738:	3401      	adds	r4, #1
 800973a:	9304      	str	r3, [sp, #16]
 800973c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009740:	4824      	ldr	r0, [pc, #144]	@ (80097d4 <_svfiprintf_r+0x1e8>)
 8009742:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009746:	2206      	movs	r2, #6
 8009748:	f7f6 fd52 	bl	80001f0 <memchr>
 800974c:	2800      	cmp	r0, #0
 800974e:	d036      	beq.n	80097be <_svfiprintf_r+0x1d2>
 8009750:	4b21      	ldr	r3, [pc, #132]	@ (80097d8 <_svfiprintf_r+0x1ec>)
 8009752:	bb1b      	cbnz	r3, 800979c <_svfiprintf_r+0x1b0>
 8009754:	9b03      	ldr	r3, [sp, #12]
 8009756:	3307      	adds	r3, #7
 8009758:	f023 0307 	bic.w	r3, r3, #7
 800975c:	3308      	adds	r3, #8
 800975e:	9303      	str	r3, [sp, #12]
 8009760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009762:	4433      	add	r3, r6
 8009764:	9309      	str	r3, [sp, #36]	@ 0x24
 8009766:	e76a      	b.n	800963e <_svfiprintf_r+0x52>
 8009768:	fb0c 3202 	mla	r2, ip, r2, r3
 800976c:	460c      	mov	r4, r1
 800976e:	2001      	movs	r0, #1
 8009770:	e7a8      	b.n	80096c4 <_svfiprintf_r+0xd8>
 8009772:	2300      	movs	r3, #0
 8009774:	3401      	adds	r4, #1
 8009776:	9305      	str	r3, [sp, #20]
 8009778:	4619      	mov	r1, r3
 800977a:	f04f 0c0a 	mov.w	ip, #10
 800977e:	4620      	mov	r0, r4
 8009780:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009784:	3a30      	subs	r2, #48	@ 0x30
 8009786:	2a09      	cmp	r2, #9
 8009788:	d903      	bls.n	8009792 <_svfiprintf_r+0x1a6>
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0c6      	beq.n	800971c <_svfiprintf_r+0x130>
 800978e:	9105      	str	r1, [sp, #20]
 8009790:	e7c4      	b.n	800971c <_svfiprintf_r+0x130>
 8009792:	fb0c 2101 	mla	r1, ip, r1, r2
 8009796:	4604      	mov	r4, r0
 8009798:	2301      	movs	r3, #1
 800979a:	e7f0      	b.n	800977e <_svfiprintf_r+0x192>
 800979c:	ab03      	add	r3, sp, #12
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	462a      	mov	r2, r5
 80097a2:	4b0e      	ldr	r3, [pc, #56]	@ (80097dc <_svfiprintf_r+0x1f0>)
 80097a4:	a904      	add	r1, sp, #16
 80097a6:	4638      	mov	r0, r7
 80097a8:	f3af 8000 	nop.w
 80097ac:	1c42      	adds	r2, r0, #1
 80097ae:	4606      	mov	r6, r0
 80097b0:	d1d6      	bne.n	8009760 <_svfiprintf_r+0x174>
 80097b2:	89ab      	ldrh	r3, [r5, #12]
 80097b4:	065b      	lsls	r3, r3, #25
 80097b6:	f53f af2d 	bmi.w	8009614 <_svfiprintf_r+0x28>
 80097ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097bc:	e72c      	b.n	8009618 <_svfiprintf_r+0x2c>
 80097be:	ab03      	add	r3, sp, #12
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	462a      	mov	r2, r5
 80097c4:	4b05      	ldr	r3, [pc, #20]	@ (80097dc <_svfiprintf_r+0x1f0>)
 80097c6:	a904      	add	r1, sp, #16
 80097c8:	4638      	mov	r0, r7
 80097ca:	f000 f879 	bl	80098c0 <_printf_i>
 80097ce:	e7ed      	b.n	80097ac <_svfiprintf_r+0x1c0>
 80097d0:	0800a19c 	.word	0x0800a19c
 80097d4:	0800a1a6 	.word	0x0800a1a6
 80097d8:	00000000 	.word	0x00000000
 80097dc:	08009535 	.word	0x08009535
 80097e0:	0800a1a2 	.word	0x0800a1a2

080097e4 <_printf_common>:
 80097e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e8:	4616      	mov	r6, r2
 80097ea:	4698      	mov	r8, r3
 80097ec:	688a      	ldr	r2, [r1, #8]
 80097ee:	690b      	ldr	r3, [r1, #16]
 80097f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80097f4:	4293      	cmp	r3, r2
 80097f6:	bfb8      	it	lt
 80097f8:	4613      	movlt	r3, r2
 80097fa:	6033      	str	r3, [r6, #0]
 80097fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009800:	4607      	mov	r7, r0
 8009802:	460c      	mov	r4, r1
 8009804:	b10a      	cbz	r2, 800980a <_printf_common+0x26>
 8009806:	3301      	adds	r3, #1
 8009808:	6033      	str	r3, [r6, #0]
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	0699      	lsls	r1, r3, #26
 800980e:	bf42      	ittt	mi
 8009810:	6833      	ldrmi	r3, [r6, #0]
 8009812:	3302      	addmi	r3, #2
 8009814:	6033      	strmi	r3, [r6, #0]
 8009816:	6825      	ldr	r5, [r4, #0]
 8009818:	f015 0506 	ands.w	r5, r5, #6
 800981c:	d106      	bne.n	800982c <_printf_common+0x48>
 800981e:	f104 0a19 	add.w	sl, r4, #25
 8009822:	68e3      	ldr	r3, [r4, #12]
 8009824:	6832      	ldr	r2, [r6, #0]
 8009826:	1a9b      	subs	r3, r3, r2
 8009828:	42ab      	cmp	r3, r5
 800982a:	dc26      	bgt.n	800987a <_printf_common+0x96>
 800982c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009830:	6822      	ldr	r2, [r4, #0]
 8009832:	3b00      	subs	r3, #0
 8009834:	bf18      	it	ne
 8009836:	2301      	movne	r3, #1
 8009838:	0692      	lsls	r2, r2, #26
 800983a:	d42b      	bmi.n	8009894 <_printf_common+0xb0>
 800983c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009840:	4641      	mov	r1, r8
 8009842:	4638      	mov	r0, r7
 8009844:	47c8      	blx	r9
 8009846:	3001      	adds	r0, #1
 8009848:	d01e      	beq.n	8009888 <_printf_common+0xa4>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	6922      	ldr	r2, [r4, #16]
 800984e:	f003 0306 	and.w	r3, r3, #6
 8009852:	2b04      	cmp	r3, #4
 8009854:	bf02      	ittt	eq
 8009856:	68e5      	ldreq	r5, [r4, #12]
 8009858:	6833      	ldreq	r3, [r6, #0]
 800985a:	1aed      	subeq	r5, r5, r3
 800985c:	68a3      	ldr	r3, [r4, #8]
 800985e:	bf0c      	ite	eq
 8009860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009864:	2500      	movne	r5, #0
 8009866:	4293      	cmp	r3, r2
 8009868:	bfc4      	itt	gt
 800986a:	1a9b      	subgt	r3, r3, r2
 800986c:	18ed      	addgt	r5, r5, r3
 800986e:	2600      	movs	r6, #0
 8009870:	341a      	adds	r4, #26
 8009872:	42b5      	cmp	r5, r6
 8009874:	d11a      	bne.n	80098ac <_printf_common+0xc8>
 8009876:	2000      	movs	r0, #0
 8009878:	e008      	b.n	800988c <_printf_common+0xa8>
 800987a:	2301      	movs	r3, #1
 800987c:	4652      	mov	r2, sl
 800987e:	4641      	mov	r1, r8
 8009880:	4638      	mov	r0, r7
 8009882:	47c8      	blx	r9
 8009884:	3001      	adds	r0, #1
 8009886:	d103      	bne.n	8009890 <_printf_common+0xac>
 8009888:	f04f 30ff 	mov.w	r0, #4294967295
 800988c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009890:	3501      	adds	r5, #1
 8009892:	e7c6      	b.n	8009822 <_printf_common+0x3e>
 8009894:	18e1      	adds	r1, r4, r3
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	2030      	movs	r0, #48	@ 0x30
 800989a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800989e:	4422      	add	r2, r4
 80098a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80098a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80098a8:	3302      	adds	r3, #2
 80098aa:	e7c7      	b.n	800983c <_printf_common+0x58>
 80098ac:	2301      	movs	r3, #1
 80098ae:	4622      	mov	r2, r4
 80098b0:	4641      	mov	r1, r8
 80098b2:	4638      	mov	r0, r7
 80098b4:	47c8      	blx	r9
 80098b6:	3001      	adds	r0, #1
 80098b8:	d0e6      	beq.n	8009888 <_printf_common+0xa4>
 80098ba:	3601      	adds	r6, #1
 80098bc:	e7d9      	b.n	8009872 <_printf_common+0x8e>
	...

080098c0 <_printf_i>:
 80098c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098c4:	7e0f      	ldrb	r7, [r1, #24]
 80098c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098c8:	2f78      	cmp	r7, #120	@ 0x78
 80098ca:	4691      	mov	r9, r2
 80098cc:	4680      	mov	r8, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	469a      	mov	sl, r3
 80098d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80098d6:	d807      	bhi.n	80098e8 <_printf_i+0x28>
 80098d8:	2f62      	cmp	r7, #98	@ 0x62
 80098da:	d80a      	bhi.n	80098f2 <_printf_i+0x32>
 80098dc:	2f00      	cmp	r7, #0
 80098de:	f000 80d2 	beq.w	8009a86 <_printf_i+0x1c6>
 80098e2:	2f58      	cmp	r7, #88	@ 0x58
 80098e4:	f000 80b9 	beq.w	8009a5a <_printf_i+0x19a>
 80098e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80098f0:	e03a      	b.n	8009968 <_printf_i+0xa8>
 80098f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80098f6:	2b15      	cmp	r3, #21
 80098f8:	d8f6      	bhi.n	80098e8 <_printf_i+0x28>
 80098fa:	a101      	add	r1, pc, #4	@ (adr r1, 8009900 <_printf_i+0x40>)
 80098fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009900:	08009959 	.word	0x08009959
 8009904:	0800996d 	.word	0x0800996d
 8009908:	080098e9 	.word	0x080098e9
 800990c:	080098e9 	.word	0x080098e9
 8009910:	080098e9 	.word	0x080098e9
 8009914:	080098e9 	.word	0x080098e9
 8009918:	0800996d 	.word	0x0800996d
 800991c:	080098e9 	.word	0x080098e9
 8009920:	080098e9 	.word	0x080098e9
 8009924:	080098e9 	.word	0x080098e9
 8009928:	080098e9 	.word	0x080098e9
 800992c:	08009a6d 	.word	0x08009a6d
 8009930:	08009997 	.word	0x08009997
 8009934:	08009a27 	.word	0x08009a27
 8009938:	080098e9 	.word	0x080098e9
 800993c:	080098e9 	.word	0x080098e9
 8009940:	08009a8f 	.word	0x08009a8f
 8009944:	080098e9 	.word	0x080098e9
 8009948:	08009997 	.word	0x08009997
 800994c:	080098e9 	.word	0x080098e9
 8009950:	080098e9 	.word	0x080098e9
 8009954:	08009a2f 	.word	0x08009a2f
 8009958:	6833      	ldr	r3, [r6, #0]
 800995a:	1d1a      	adds	r2, r3, #4
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6032      	str	r2, [r6, #0]
 8009960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009964:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009968:	2301      	movs	r3, #1
 800996a:	e09d      	b.n	8009aa8 <_printf_i+0x1e8>
 800996c:	6833      	ldr	r3, [r6, #0]
 800996e:	6820      	ldr	r0, [r4, #0]
 8009970:	1d19      	adds	r1, r3, #4
 8009972:	6031      	str	r1, [r6, #0]
 8009974:	0606      	lsls	r6, r0, #24
 8009976:	d501      	bpl.n	800997c <_printf_i+0xbc>
 8009978:	681d      	ldr	r5, [r3, #0]
 800997a:	e003      	b.n	8009984 <_printf_i+0xc4>
 800997c:	0645      	lsls	r5, r0, #25
 800997e:	d5fb      	bpl.n	8009978 <_printf_i+0xb8>
 8009980:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009984:	2d00      	cmp	r5, #0
 8009986:	da03      	bge.n	8009990 <_printf_i+0xd0>
 8009988:	232d      	movs	r3, #45	@ 0x2d
 800998a:	426d      	negs	r5, r5
 800998c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009990:	4859      	ldr	r0, [pc, #356]	@ (8009af8 <_printf_i+0x238>)
 8009992:	230a      	movs	r3, #10
 8009994:	e011      	b.n	80099ba <_printf_i+0xfa>
 8009996:	6821      	ldr	r1, [r4, #0]
 8009998:	6833      	ldr	r3, [r6, #0]
 800999a:	0608      	lsls	r0, r1, #24
 800999c:	f853 5b04 	ldr.w	r5, [r3], #4
 80099a0:	d402      	bmi.n	80099a8 <_printf_i+0xe8>
 80099a2:	0649      	lsls	r1, r1, #25
 80099a4:	bf48      	it	mi
 80099a6:	b2ad      	uxthmi	r5, r5
 80099a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80099aa:	4853      	ldr	r0, [pc, #332]	@ (8009af8 <_printf_i+0x238>)
 80099ac:	6033      	str	r3, [r6, #0]
 80099ae:	bf14      	ite	ne
 80099b0:	230a      	movne	r3, #10
 80099b2:	2308      	moveq	r3, #8
 80099b4:	2100      	movs	r1, #0
 80099b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80099ba:	6866      	ldr	r6, [r4, #4]
 80099bc:	60a6      	str	r6, [r4, #8]
 80099be:	2e00      	cmp	r6, #0
 80099c0:	bfa2      	ittt	ge
 80099c2:	6821      	ldrge	r1, [r4, #0]
 80099c4:	f021 0104 	bicge.w	r1, r1, #4
 80099c8:	6021      	strge	r1, [r4, #0]
 80099ca:	b90d      	cbnz	r5, 80099d0 <_printf_i+0x110>
 80099cc:	2e00      	cmp	r6, #0
 80099ce:	d04b      	beq.n	8009a68 <_printf_i+0x1a8>
 80099d0:	4616      	mov	r6, r2
 80099d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80099d6:	fb03 5711 	mls	r7, r3, r1, r5
 80099da:	5dc7      	ldrb	r7, [r0, r7]
 80099dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099e0:	462f      	mov	r7, r5
 80099e2:	42bb      	cmp	r3, r7
 80099e4:	460d      	mov	r5, r1
 80099e6:	d9f4      	bls.n	80099d2 <_printf_i+0x112>
 80099e8:	2b08      	cmp	r3, #8
 80099ea:	d10b      	bne.n	8009a04 <_printf_i+0x144>
 80099ec:	6823      	ldr	r3, [r4, #0]
 80099ee:	07df      	lsls	r7, r3, #31
 80099f0:	d508      	bpl.n	8009a04 <_printf_i+0x144>
 80099f2:	6923      	ldr	r3, [r4, #16]
 80099f4:	6861      	ldr	r1, [r4, #4]
 80099f6:	4299      	cmp	r1, r3
 80099f8:	bfde      	ittt	le
 80099fa:	2330      	movle	r3, #48	@ 0x30
 80099fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a04:	1b92      	subs	r2, r2, r6
 8009a06:	6122      	str	r2, [r4, #16]
 8009a08:	f8cd a000 	str.w	sl, [sp]
 8009a0c:	464b      	mov	r3, r9
 8009a0e:	aa03      	add	r2, sp, #12
 8009a10:	4621      	mov	r1, r4
 8009a12:	4640      	mov	r0, r8
 8009a14:	f7ff fee6 	bl	80097e4 <_printf_common>
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d14a      	bne.n	8009ab2 <_printf_i+0x1f2>
 8009a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a20:	b004      	add	sp, #16
 8009a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	f043 0320 	orr.w	r3, r3, #32
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	4833      	ldr	r0, [pc, #204]	@ (8009afc <_printf_i+0x23c>)
 8009a30:	2778      	movs	r7, #120	@ 0x78
 8009a32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	6831      	ldr	r1, [r6, #0]
 8009a3a:	061f      	lsls	r7, r3, #24
 8009a3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a40:	d402      	bmi.n	8009a48 <_printf_i+0x188>
 8009a42:	065f      	lsls	r7, r3, #25
 8009a44:	bf48      	it	mi
 8009a46:	b2ad      	uxthmi	r5, r5
 8009a48:	6031      	str	r1, [r6, #0]
 8009a4a:	07d9      	lsls	r1, r3, #31
 8009a4c:	bf44      	itt	mi
 8009a4e:	f043 0320 	orrmi.w	r3, r3, #32
 8009a52:	6023      	strmi	r3, [r4, #0]
 8009a54:	b11d      	cbz	r5, 8009a5e <_printf_i+0x19e>
 8009a56:	2310      	movs	r3, #16
 8009a58:	e7ac      	b.n	80099b4 <_printf_i+0xf4>
 8009a5a:	4827      	ldr	r0, [pc, #156]	@ (8009af8 <_printf_i+0x238>)
 8009a5c:	e7e9      	b.n	8009a32 <_printf_i+0x172>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	f023 0320 	bic.w	r3, r3, #32
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	e7f6      	b.n	8009a56 <_printf_i+0x196>
 8009a68:	4616      	mov	r6, r2
 8009a6a:	e7bd      	b.n	80099e8 <_printf_i+0x128>
 8009a6c:	6833      	ldr	r3, [r6, #0]
 8009a6e:	6825      	ldr	r5, [r4, #0]
 8009a70:	6961      	ldr	r1, [r4, #20]
 8009a72:	1d18      	adds	r0, r3, #4
 8009a74:	6030      	str	r0, [r6, #0]
 8009a76:	062e      	lsls	r6, r5, #24
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	d501      	bpl.n	8009a80 <_printf_i+0x1c0>
 8009a7c:	6019      	str	r1, [r3, #0]
 8009a7e:	e002      	b.n	8009a86 <_printf_i+0x1c6>
 8009a80:	0668      	lsls	r0, r5, #25
 8009a82:	d5fb      	bpl.n	8009a7c <_printf_i+0x1bc>
 8009a84:	8019      	strh	r1, [r3, #0]
 8009a86:	2300      	movs	r3, #0
 8009a88:	6123      	str	r3, [r4, #16]
 8009a8a:	4616      	mov	r6, r2
 8009a8c:	e7bc      	b.n	8009a08 <_printf_i+0x148>
 8009a8e:	6833      	ldr	r3, [r6, #0]
 8009a90:	1d1a      	adds	r2, r3, #4
 8009a92:	6032      	str	r2, [r6, #0]
 8009a94:	681e      	ldr	r6, [r3, #0]
 8009a96:	6862      	ldr	r2, [r4, #4]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f7f6 fba8 	bl	80001f0 <memchr>
 8009aa0:	b108      	cbz	r0, 8009aa6 <_printf_i+0x1e6>
 8009aa2:	1b80      	subs	r0, r0, r6
 8009aa4:	6060      	str	r0, [r4, #4]
 8009aa6:	6863      	ldr	r3, [r4, #4]
 8009aa8:	6123      	str	r3, [r4, #16]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ab0:	e7aa      	b.n	8009a08 <_printf_i+0x148>
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	4640      	mov	r0, r8
 8009aba:	47d0      	blx	sl
 8009abc:	3001      	adds	r0, #1
 8009abe:	d0ad      	beq.n	8009a1c <_printf_i+0x15c>
 8009ac0:	6823      	ldr	r3, [r4, #0]
 8009ac2:	079b      	lsls	r3, r3, #30
 8009ac4:	d413      	bmi.n	8009aee <_printf_i+0x22e>
 8009ac6:	68e0      	ldr	r0, [r4, #12]
 8009ac8:	9b03      	ldr	r3, [sp, #12]
 8009aca:	4298      	cmp	r0, r3
 8009acc:	bfb8      	it	lt
 8009ace:	4618      	movlt	r0, r3
 8009ad0:	e7a6      	b.n	8009a20 <_printf_i+0x160>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	4632      	mov	r2, r6
 8009ad6:	4649      	mov	r1, r9
 8009ad8:	4640      	mov	r0, r8
 8009ada:	47d0      	blx	sl
 8009adc:	3001      	adds	r0, #1
 8009ade:	d09d      	beq.n	8009a1c <_printf_i+0x15c>
 8009ae0:	3501      	adds	r5, #1
 8009ae2:	68e3      	ldr	r3, [r4, #12]
 8009ae4:	9903      	ldr	r1, [sp, #12]
 8009ae6:	1a5b      	subs	r3, r3, r1
 8009ae8:	42ab      	cmp	r3, r5
 8009aea:	dcf2      	bgt.n	8009ad2 <_printf_i+0x212>
 8009aec:	e7eb      	b.n	8009ac6 <_printf_i+0x206>
 8009aee:	2500      	movs	r5, #0
 8009af0:	f104 0619 	add.w	r6, r4, #25
 8009af4:	e7f5      	b.n	8009ae2 <_printf_i+0x222>
 8009af6:	bf00      	nop
 8009af8:	0800a1ad 	.word	0x0800a1ad
 8009afc:	0800a1be 	.word	0x0800a1be

08009b00 <memmove>:
 8009b00:	4288      	cmp	r0, r1
 8009b02:	b510      	push	{r4, lr}
 8009b04:	eb01 0402 	add.w	r4, r1, r2
 8009b08:	d902      	bls.n	8009b10 <memmove+0x10>
 8009b0a:	4284      	cmp	r4, r0
 8009b0c:	4623      	mov	r3, r4
 8009b0e:	d807      	bhi.n	8009b20 <memmove+0x20>
 8009b10:	1e43      	subs	r3, r0, #1
 8009b12:	42a1      	cmp	r1, r4
 8009b14:	d008      	beq.n	8009b28 <memmove+0x28>
 8009b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b1e:	e7f8      	b.n	8009b12 <memmove+0x12>
 8009b20:	4402      	add	r2, r0
 8009b22:	4601      	mov	r1, r0
 8009b24:	428a      	cmp	r2, r1
 8009b26:	d100      	bne.n	8009b2a <memmove+0x2a>
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b32:	e7f7      	b.n	8009b24 <memmove+0x24>

08009b34 <_sbrk_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d06      	ldr	r5, [pc, #24]	@ (8009b50 <_sbrk_r+0x1c>)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	602b      	str	r3, [r5, #0]
 8009b40:	f7f7 fdf2 	bl	8001728 <_sbrk>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_sbrk_r+0x1a>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_sbrk_r+0x1a>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	200013ec 	.word	0x200013ec

08009b54 <memcpy>:
 8009b54:	440a      	add	r2, r1
 8009b56:	4291      	cmp	r1, r2
 8009b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b5c:	d100      	bne.n	8009b60 <memcpy+0xc>
 8009b5e:	4770      	bx	lr
 8009b60:	b510      	push	{r4, lr}
 8009b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b6a:	4291      	cmp	r1, r2
 8009b6c:	d1f9      	bne.n	8009b62 <memcpy+0xe>
 8009b6e:	bd10      	pop	{r4, pc}

08009b70 <_realloc_r>:
 8009b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b74:	4680      	mov	r8, r0
 8009b76:	4615      	mov	r5, r2
 8009b78:	460c      	mov	r4, r1
 8009b7a:	b921      	cbnz	r1, 8009b86 <_realloc_r+0x16>
 8009b7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b80:	4611      	mov	r1, r2
 8009b82:	f7ff bc4b 	b.w	800941c <_malloc_r>
 8009b86:	b92a      	cbnz	r2, 8009b94 <_realloc_r+0x24>
 8009b88:	f7ff fbdc 	bl	8009344 <_free_r>
 8009b8c:	2400      	movs	r4, #0
 8009b8e:	4620      	mov	r0, r4
 8009b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b94:	f000 f81a 	bl	8009bcc <_malloc_usable_size_r>
 8009b98:	4285      	cmp	r5, r0
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	d802      	bhi.n	8009ba4 <_realloc_r+0x34>
 8009b9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009ba2:	d8f4      	bhi.n	8009b8e <_realloc_r+0x1e>
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	f7ff fc38 	bl	800941c <_malloc_r>
 8009bac:	4607      	mov	r7, r0
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d0ec      	beq.n	8009b8c <_realloc_r+0x1c>
 8009bb2:	42b5      	cmp	r5, r6
 8009bb4:	462a      	mov	r2, r5
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	bf28      	it	cs
 8009bba:	4632      	movcs	r2, r6
 8009bbc:	f7ff ffca 	bl	8009b54 <memcpy>
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	f7ff fbbe 	bl	8009344 <_free_r>
 8009bc8:	463c      	mov	r4, r7
 8009bca:	e7e0      	b.n	8009b8e <_realloc_r+0x1e>

08009bcc <_malloc_usable_size_r>:
 8009bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bd0:	1f18      	subs	r0, r3, #4
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	bfbc      	itt	lt
 8009bd6:	580b      	ldrlt	r3, [r1, r0]
 8009bd8:	18c0      	addlt	r0, r0, r3
 8009bda:	4770      	bx	lr

08009bdc <_init>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	bf00      	nop
 8009be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009be2:	bc08      	pop	{r3}
 8009be4:	469e      	mov	lr, r3
 8009be6:	4770      	bx	lr

08009be8 <_fini>:
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	bf00      	nop
 8009bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bee:	bc08      	pop	{r3}
 8009bf0:	469e      	mov	lr, r3
 8009bf2:	4770      	bx	lr
